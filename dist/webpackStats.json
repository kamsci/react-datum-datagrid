{
  "errors": [],
  "warnings": [],
  "version": "3.4.1",
  "hash": "be5fbf479041f70fb575",
  "publicPath": "dist/",
  "assetsByChunkName": {
    "main": "react-datum-datagrid.min.js"
  },
  "assets": [
    {
      "name": "react-datum-datagrid.min.js",
      "size": 67051,
      "chunks": [
        0
      ],
      "chunkNames": [
        "main"
      ]
    }
  ],
  "entrypoints": {
    "main": {
      "chunks": [
        0
      ],
      "assets": [
        "react-datum-datagrid.min.js"
      ]
    }
  },
  "chunks": [
    {
      "id": 0,
      "rendered": true,
      "initial": true,
      "entry": true,
      "extraAsync": false,
      "size": 101478,
      "names": [
        "main"
      ],
      "files": [
        "react-datum-datagrid.min.js"
      ],
      "hash": "b2bbdf1a299d6f238775",
      "parents": [],
      "modules": [
        {
          "id": 0,
          "identifier": "external {\"root\":\"_\",\"commonjs2\":\"underscore\",\"commonjs\":\"underscore\",\"amd\":\"underscore\"}",
          "name": "external {\"root\":\"_\",\"commonjs2\":\"underscore\",\"commonjs\":\"underscore\",\"amd\":\"underscore\"}",
          "index": 12,
          "index2": 9,
          "size": 42,
          "cacheable": false,
          "built": false,
          "optional": false,
          "prefetched": false,
          "chunks": [
            0
          ],
          "assets": [],
          "issuer": "/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/cache-loader/dist/cjs.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/babel-loader/lib/index.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/lib/datagrid.js",
          "issuerId": 12,
          "issuerName": "./lib/datagrid.js",
          "failed": false,
          "errors": 0,
          "warnings": 0,
          "reasons": [
            {
              "moduleId": 6,
              "moduleIdentifier": "/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/cache-loader/dist/cjs.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/babel-loader/lib/index.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/lib/helpers/reactStyles.js",
              "module": "./lib/helpers/reactStyles.js",
              "moduleName": "./lib/helpers/reactStyles.js",
              "type": "cjs require",
              "userRequest": "underscore",
              "loc": "9:6-27"
            },
            {
              "moduleId": 8,
              "moduleIdentifier": "/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/cache-loader/dist/cjs.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/babel-loader/lib/index.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/lib/cell.js",
              "module": "./lib/cell.js",
              "moduleName": "./lib/cell.js",
              "type": "cjs require",
              "userRequest": "underscore",
              "loc": "32:6-27"
            },
            {
              "moduleId": 12,
              "moduleIdentifier": "/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/cache-loader/dist/cjs.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/babel-loader/lib/index.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/lib/datagrid.js",
              "module": "./lib/datagrid.js",
              "moduleName": "./lib/datagrid.js",
              "type": "cjs require",
              "userRequest": "underscore",
              "loc": "39:6-27"
            },
            {
              "moduleId": 17,
              "moduleIdentifier": "/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/cache-loader/dist/cjs.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/babel-loader/lib/index.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/lib/helpers/mixin.js",
              "module": "./lib/helpers/mixin.js",
              "moduleName": "./lib/helpers/mixin.js",
              "type": "cjs require",
              "userRequest": "underscore",
              "loc": "6:6-27"
            },
            {
              "moduleId": 18,
              "moduleIdentifier": "/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/cache-loader/dist/cjs.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/babel-loader/lib/index.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/lib/helpers/deepSet.js",
              "module": "./lib/helpers/deepSet.js",
              "moduleName": "./lib/helpers/deepSet.js",
              "type": "cjs require",
              "userRequest": "underscore",
              "loc": "6:6-27"
            },
            {
              "moduleId": 19,
              "moduleIdentifier": "/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/cache-loader/dist/cjs.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/babel-loader/lib/index.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/lib/cellWrapper.js",
              "module": "./lib/cellWrapper.js",
              "moduleName": "./lib/cellWrapper.js",
              "type": "cjs require",
              "userRequest": "underscore",
              "loc": "36:6-27"
            },
            {
              "moduleId": 22,
              "moduleIdentifier": "/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/cache-loader/dist/cjs.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/babel-loader/lib/index.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/lib/gridEdit.js",
              "module": "./lib/gridEdit.js",
              "moduleName": "./lib/gridEdit.js",
              "type": "cjs require",
              "userRequest": "underscore",
              "loc": "14:6-27"
            },
            {
              "moduleId": 24,
              "moduleIdentifier": "/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/cache-loader/dist/cjs.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/babel-loader/lib/index.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/lib/gridSelect.js",
              "module": "./lib/gridSelect.js",
              "moduleName": "./lib/gridSelect.js",
              "type": "cjs require",
              "userRequest": "underscore",
              "loc": "25:6-27"
            }
          ],
          "usedExports": true,
          "providedExports": null,
          "optimizationBailout": [],
          "depth": 3
        },
        {
          "id": 1,
          "identifier": "external {\"root\":\"jQuery\",\"commonjs2\":\"jquery\",\"commonjs\":\"jquery\",\"amd\":\"jquery\"}",
          "name": "external {\"root\":\"jQuery\",\"commonjs2\":\"jquery\",\"commonjs\":\"jquery\",\"amd\":\"jquery\"}",
          "index": 13,
          "index2": 10,
          "size": 42,
          "cacheable": false,
          "built": false,
          "optional": false,
          "prefetched": false,
          "chunks": [
            0
          ],
          "assets": [],
          "issuer": "/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/cache-loader/dist/cjs.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/babel-loader/lib/index.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/lib/datagrid.js",
          "issuerId": 12,
          "issuerName": "./lib/datagrid.js",
          "failed": false,
          "errors": 0,
          "warnings": 0,
          "reasons": [
            {
              "moduleId": 12,
              "moduleIdentifier": "/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/cache-loader/dist/cjs.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/babel-loader/lib/index.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/lib/datagrid.js",
              "module": "./lib/datagrid.js",
              "moduleName": "./lib/datagrid.js",
              "type": "cjs require",
              "userRequest": "jquery",
              "loc": "41:6-23"
            },
            {
              "moduleId": 19,
              "moduleIdentifier": "/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/cache-loader/dist/cjs.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/babel-loader/lib/index.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/lib/cellWrapper.js",
              "module": "./lib/cellWrapper.js",
              "moduleName": "./lib/cellWrapper.js",
              "type": "cjs require",
              "userRequest": "jquery",
              "loc": "34:6-23"
            },
            {
              "moduleId": 22,
              "moduleIdentifier": "/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/cache-loader/dist/cjs.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/babel-loader/lib/index.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/lib/gridEdit.js",
              "module": "./lib/gridEdit.js",
              "moduleName": "./lib/gridEdit.js",
              "type": "cjs require",
              "userRequest": "jquery",
              "loc": "16:6-23"
            },
            {
              "moduleId": 24,
              "moduleIdentifier": "/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/cache-loader/dist/cjs.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/babel-loader/lib/index.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/lib/gridSelect.js",
              "module": "./lib/gridSelect.js",
              "moduleName": "./lib/gridSelect.js",
              "type": "cjs require",
              "userRequest": "jquery",
              "loc": "23:6-23"
            },
            {
              "moduleId": 25,
              "moduleIdentifier": "/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/cache-loader/dist/cjs.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/babel-loader/lib/index.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/lib/helpers/copyPasteFromExcel.js",
              "module": "./lib/helpers/copyPasteFromExcel.js",
              "moduleName": "./lib/helpers/copyPasteFromExcel.js",
              "type": "cjs require",
              "userRequest": "jquery",
              "loc": "12:6-23"
            }
          ],
          "usedExports": true,
          "providedExports": null,
          "optimizationBailout": [],
          "depth": 3
        },
        {
          "id": 2,
          "identifier": "external {\"root\":\"React\",\"commonjs2\":\"react\",\"commonjs\":\"react\",\"amd\":\"react\"}",
          "name": "external {\"root\":\"React\",\"commonjs2\":\"react\",\"commonjs\":\"react\",\"amd\":\"react\"}",
          "index": 4,
          "index2": 1,
          "size": 42,
          "cacheable": false,
          "built": false,
          "optional": false,
          "prefetched": false,
          "chunks": [
            0
          ],
          "assets": [],
          "issuer": "/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/cache-loader/dist/cjs.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/babel-loader/lib/index.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/lib/datagrid.js",
          "issuerId": 12,
          "issuerName": "./lib/datagrid.js",
          "failed": false,
          "errors": 0,
          "warnings": 0,
          "reasons": [
            {
              "moduleId": 8,
              "moduleIdentifier": "/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/cache-loader/dist/cjs.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/babel-loader/lib/index.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/lib/cell.js",
              "module": "./lib/cell.js",
              "moduleName": "./lib/cell.js",
              "type": "cjs require",
              "userRequest": "react",
              "loc": "24:10-26"
            },
            {
              "moduleId": 12,
              "moduleIdentifier": "/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/cache-loader/dist/cjs.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/babel-loader/lib/index.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/lib/datagrid.js",
              "module": "./lib/datagrid.js",
              "moduleName": "./lib/datagrid.js",
              "type": "cjs require",
              "userRequest": "react",
              "loc": "31:10-26"
            },
            {
              "moduleId": 19,
              "moduleIdentifier": "/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/cache-loader/dist/cjs.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/babel-loader/lib/index.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/lib/cellWrapper.js",
              "module": "./lib/cellWrapper.js",
              "moduleName": "./lib/cellWrapper.js",
              "type": "cjs require",
              "userRequest": "react",
              "loc": "26:10-26"
            },
            {
              "moduleId": 20,
              "moduleIdentifier": "/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/cache-loader/dist/cjs.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/babel-loader/lib/index.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/lib/labelCell.js",
              "module": "./lib/labelCell.js",
              "moduleName": "./lib/labelCell.js",
              "type": "cjs require",
              "userRequest": "react",
              "loc": "24:10-26"
            }
          ],
          "usedExports": true,
          "providedExports": null,
          "optimizationBailout": [],
          "depth": 3
        },
        {
          "id": 3,
          "identifier": "/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/prop-types/index.js",
          "name": "./node_modules/prop-types/index.js",
          "index": 7,
          "index2": 8,
          "size": 956,
          "cacheable": true,
          "built": true,
          "optional": false,
          "prefetched": false,
          "chunks": [
            0
          ],
          "assets": [],
          "issuer": "/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/cache-loader/dist/cjs.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/babel-loader/lib/index.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/lib/datagrid.js",
          "issuerId": 12,
          "issuerName": "./lib/datagrid.js",
          "failed": false,
          "errors": 0,
          "warnings": 0,
          "reasons": [
            {
              "moduleId": 8,
              "moduleIdentifier": "/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/cache-loader/dist/cjs.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/babel-loader/lib/index.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/lib/cell.js",
              "module": "./lib/cell.js",
              "moduleName": "./lib/cell.js",
              "type": "cjs require",
              "userRequest": "prop-types",
              "loc": "28:14-35"
            },
            {
              "moduleId": 12,
              "moduleIdentifier": "/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/cache-loader/dist/cjs.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/babel-loader/lib/index.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/lib/datagrid.js",
              "module": "./lib/datagrid.js",
              "moduleName": "./lib/datagrid.js",
              "type": "cjs require",
              "userRequest": "prop-types",
              "loc": "37:14-35"
            },
            {
              "moduleId": 19,
              "moduleIdentifier": "/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/cache-loader/dist/cjs.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/babel-loader/lib/index.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/lib/cellWrapper.js",
              "module": "./lib/cellWrapper.js",
              "moduleName": "./lib/cellWrapper.js",
              "type": "cjs require",
              "userRequest": "prop-types",
              "loc": "30:14-35"
            },
            {
              "moduleId": 20,
              "moduleIdentifier": "/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/cache-loader/dist/cjs.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/babel-loader/lib/index.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/lib/labelCell.js",
              "module": "./lib/labelCell.js",
              "moduleName": "./lib/labelCell.js",
              "type": "cjs require",
              "userRequest": "prop-types",
              "loc": "26:14-35"
            }
          ],
          "usedExports": true,
          "providedExports": null,
          "optimizationBailout": [],
          "depth": 3,
          "source": "/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nif (process.env.NODE_ENV !== 'production') {\n  var REACT_ELEMENT_TYPE = (typeof Symbol === 'function' &&\n    Symbol.for &&\n    Symbol.for('react.element')) ||\n    0xeac7;\n\n  var isValidElement = function(object) {\n    return typeof object === 'object' &&\n      object !== null &&\n      object.$$typeof === REACT_ELEMENT_TYPE;\n  };\n\n  // By explicitly using `prop-types` you are opting into new development behavior.\n  // http://fb.me/prop-types-in-prod\n  var throwOnDirectAccess = true;\n  module.exports = require('./factoryWithTypeCheckers')(isValidElement, throwOnDirectAccess);\n} else {\n  // By explicitly using `prop-types` you are opting into new production behavior.\n  // http://fb.me/prop-types-in-prod\n  module.exports = require('./factoryWithThrowingShims')();\n}\n"
        },
        {
          "id": 4,
          "identifier": "external {\"root\":\"ReactDOM\",\"commonjs2\":\"react-dom\",\"commonjs\":\"react-dom\",\"amd\":\"react-dom\"}",
          "name": "external {\"root\":\"ReactDOM\",\"commonjs2\":\"react-dom\",\"commonjs\":\"react-dom\",\"amd\":\"react-dom\"}",
          "index": 5,
          "index2": 2,
          "size": 42,
          "cacheable": false,
          "built": false,
          "optional": false,
          "prefetched": false,
          "chunks": [
            0
          ],
          "assets": [],
          "issuer": "/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/cache-loader/dist/cjs.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/babel-loader/lib/index.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/lib/datagrid.js",
          "issuerId": 12,
          "issuerName": "./lib/datagrid.js",
          "failed": false,
          "errors": 0,
          "warnings": 0,
          "reasons": [
            {
              "moduleId": 12,
              "moduleIdentifier": "/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/cache-loader/dist/cjs.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/babel-loader/lib/index.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/lib/datagrid.js",
              "module": "./lib/datagrid.js",
              "moduleName": "./lib/datagrid.js",
              "type": "cjs require",
              "userRequest": "react-dom",
              "loc": "33:13-33"
            },
            {
              "moduleId": 19,
              "moduleIdentifier": "/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/cache-loader/dist/cjs.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/babel-loader/lib/index.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/lib/cellWrapper.js",
              "module": "./lib/cellWrapper.js",
              "moduleName": "./lib/cellWrapper.js",
              "type": "cjs require",
              "userRequest": "react-dom",
              "loc": "28:13-33"
            },
            {
              "moduleId": 24,
              "moduleIdentifier": "/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/cache-loader/dist/cjs.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/babel-loader/lib/index.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/lib/gridSelect.js",
              "module": "./lib/gridSelect.js",
              "moduleName": "./lib/gridSelect.js",
              "type": "cjs require",
              "userRequest": "react-dom",
              "loc": "21:13-33"
            }
          ],
          "usedExports": true,
          "providedExports": null,
          "optimizationBailout": [],
          "depth": 3
        },
        {
          "id": 5,
          "identifier": "external {\"root\":\"ReactDatum\",\"commonjs2\":\"react-datum\",\"commonjs\":\"react-datum\",\"amd\":\"react-datum\"}",
          "name": "external {\"root\":\"ReactDatum\",\"commonjs2\":\"react-datum\",\"commonjs\":\"react-datum\",\"amd\":\"react-datum\"}",
          "index": 6,
          "index2": 3,
          "size": 42,
          "cacheable": false,
          "built": false,
          "optional": false,
          "prefetched": false,
          "chunks": [
            0
          ],
          "assets": [],
          "issuer": "/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/cache-loader/dist/cjs.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/babel-loader/lib/index.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/lib/datagrid.js",
          "issuerId": 12,
          "issuerName": "./lib/datagrid.js",
          "failed": false,
          "errors": 0,
          "warnings": 0,
          "reasons": [
            {
              "moduleId": 8,
              "moduleIdentifier": "/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/cache-loader/dist/cjs.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/babel-loader/lib/index.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/lib/cell.js",
              "module": "./lib/cell.js",
              "moduleName": "./lib/cell.js",
              "type": "cjs require",
              "userRequest": "react-datum",
              "loc": "26:15-37"
            },
            {
              "moduleId": 12,
              "moduleIdentifier": "/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/cache-loader/dist/cjs.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/babel-loader/lib/index.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/lib/datagrid.js",
              "module": "./lib/datagrid.js",
              "moduleName": "./lib/datagrid.js",
              "type": "cjs require",
              "userRequest": "react-datum",
              "loc": "35:15-37"
            }
          ],
          "usedExports": true,
          "providedExports": null,
          "optimizationBailout": [],
          "depth": 3
        },
        {
          "id": 6,
          "identifier": "/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/cache-loader/dist/cjs.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/babel-loader/lib/index.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/lib/helpers/reactStyles.js",
          "name": "./lib/helpers/reactStyles.js",
          "index": 15,
          "index2": 13,
          "size": 2256,
          "cacheable": true,
          "built": true,
          "optional": false,
          "prefetched": false,
          "chunks": [
            0
          ],
          "assets": [],
          "issuer": "/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/cache-loader/dist/cjs.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/babel-loader/lib/index.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/lib/datagrid.js",
          "issuerId": 12,
          "issuerName": "./lib/datagrid.js",
          "failed": false,
          "errors": 0,
          "warnings": 0,
          "reasons": [
            {
              "moduleId": 12,
              "moduleIdentifier": "/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/cache-loader/dist/cjs.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/babel-loader/lib/index.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/lib/datagrid.js",
              "module": "./lib/datagrid.js",
              "moduleName": "./lib/datagrid.js",
              "type": "cjs require",
              "userRequest": "./helpers/reactStyles",
              "loc": "45:16-48"
            },
            {
              "moduleId": 20,
              "moduleIdentifier": "/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/cache-loader/dist/cjs.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/babel-loader/lib/index.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/lib/labelCell.js",
              "module": "./lib/labelCell.js",
              "moduleName": "./lib/labelCell.js",
              "type": "cjs require",
              "userRequest": "./helpers/reactStyles",
              "loc": "30:16-48"
            }
          ],
          "usedExports": true,
          "providedExports": null,
          "optimizationBailout": [],
          "depth": 3,
          "source": "'use strict';\n\n(function () {\n  var DeepSet,\n      ReactStyles,\n      _,\n      slice = [].slice;\n\n  _ = require('underscore');\n\n  DeepSet = require('./deepSet');\n\n  module.exports = ReactStyles = function () {\n    function ReactStyles(styles) {\n      this.styles = styles;\n    }\n\n    /*\n      Get's an object of React inline styles resolving any includes.  \n      \n      Context is optional and defaults to window.  \n      (see, ./reactStyles.md for more)\n     */\n\n    ReactStyles.prototype.get = function () {\n      var context, i, include, includes, j, len, len1, outStyles, style, styleName, styleNames;\n      context = arguments[0], styleNames = 2 <= arguments.length ? slice.call(arguments, 1) : [];\n      if (_.isString(context)) {\n        styleNames.splice(0, 0, context);\n        context = window;\n      }\n      outStyles = [{}];\n      for (i = 0, len = styleNames.length; i < len; i++) {\n        styleName = styleNames[i];\n        style = _.extend({}, this.styles[styleName]);\n        if (style == null) {\n          console.error(\"ReactStyles: invalid styleName specified: '\" + styleName + \"'\");\n          continue;\n        }\n        if (style.includes != null) {\n          includes = _.isArray(style.includes) ? style.includes : [style.includes];\n          for (j = 0, len1 = includes.length; j < len1; j++) {\n            include = includes[j];\n            switch (false) {\n              case !_.isString(include):\n                outStyles.push(this.get(context, include));\n                break;\n              case !_.isFunction(include):\n                outStyles.push(include.call(context));\n                break;\n              case !_.isObject(include):\n                outStyles.push(include);\n                break;\n              default:\n                throw \"Unrecognized include type (should be string, object or function): \" + JSON.stringify(include) + \" for styles: \" + JSON.stringify(this.styles);\n            }\n          }\n          delete style.includes;\n        }\n        outStyles.push(style);\n      }\n      return _.extend.apply(this, outStyles);\n    };\n\n    ReactStyles.prototype.set = function (deepAttr, value) {\n      return DeepSet(this.styles, deepAttr, value);\n    };\n\n    return ReactStyles;\n  }();\n}).call(undefined);"
        },
        {
          "id": 7,
          "identifier": "/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/classnames/index.js",
          "name": "./node_modules/classnames/index.js",
          "index": 18,
          "index2": 14,
          "size": 1102,
          "cacheable": true,
          "built": true,
          "optional": false,
          "prefetched": false,
          "chunks": [
            0
          ],
          "assets": [],
          "issuer": "/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/cache-loader/dist/cjs.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/babel-loader/lib/index.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/lib/cellWrapper.js",
          "issuerId": 19,
          "issuerName": "./lib/cellWrapper.js",
          "failed": false,
          "errors": 0,
          "warnings": 0,
          "reasons": [
            {
              "moduleId": 8,
              "moduleIdentifier": "/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/cache-loader/dist/cjs.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/babel-loader/lib/index.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/lib/cell.js",
              "module": "./lib/cell.js",
              "moduleName": "./lib/cell.js",
              "type": "cjs require",
              "userRequest": "classnames",
              "loc": "30:15-36"
            },
            {
              "moduleId": 19,
              "moduleIdentifier": "/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/cache-loader/dist/cjs.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/babel-loader/lib/index.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/lib/cellWrapper.js",
              "module": "./lib/cellWrapper.js",
              "moduleName": "./lib/cellWrapper.js",
              "type": "cjs require",
              "userRequest": "classnames",
              "loc": "32:15-36"
            }
          ],
          "usedExports": true,
          "providedExports": null,
          "optimizationBailout": [],
          "depth": 4,
          "source": "/*!\n  Copyright (c) 2016 Jed Watson.\n  Licensed under the MIT License (MIT), see\n  http://jedwatson.github.io/classnames\n*/\n/* global define */\n\n(function () {\n\t'use strict';\n\n\tvar hasOwn = {}.hasOwnProperty;\n\n\tfunction classNames () {\n\t\tvar classes = [];\n\n\t\tfor (var i = 0; i < arguments.length; i++) {\n\t\t\tvar arg = arguments[i];\n\t\t\tif (!arg) continue;\n\n\t\t\tvar argType = typeof arg;\n\n\t\t\tif (argType === 'string' || argType === 'number') {\n\t\t\t\tclasses.push(arg);\n\t\t\t} else if (Array.isArray(arg)) {\n\t\t\t\tclasses.push(classNames.apply(null, arg));\n\t\t\t} else if (argType === 'object') {\n\t\t\t\tfor (var key in arg) {\n\t\t\t\t\tif (hasOwn.call(arg, key) && arg[key]) {\n\t\t\t\t\t\tclasses.push(key);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn classes.join(' ');\n\t}\n\n\tif (typeof module !== 'undefined' && module.exports) {\n\t\tmodule.exports = classNames;\n\t} else if (typeof define === 'function' && typeof define.amd === 'object' && define.amd) {\n\t\t// register as 'classnames', consistent with npm package name\n\t\tdefine('classnames', [], function () {\n\t\t\treturn classNames;\n\t\t});\n\t} else {\n\t\twindow.classNames = classNames;\n\t}\n}());\n"
        },
        {
          "id": 8,
          "identifier": "/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/cache-loader/dist/cjs.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/babel-loader/lib/index.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/lib/cell.js",
          "name": "./lib/cell.js",
          "index": 19,
          "index2": 15,
          "size": 9618,
          "cacheable": true,
          "built": true,
          "optional": false,
          "prefetched": false,
          "chunks": [
            0
          ],
          "assets": [],
          "issuer": "/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/cache-loader/dist/cjs.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/babel-loader/lib/index.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/lib/cellWrapper.js",
          "issuerId": 19,
          "issuerName": "./lib/cellWrapper.js",
          "failed": false,
          "errors": 0,
          "warnings": 0,
          "reasons": [
            {
              "moduleId": 19,
              "moduleIdentifier": "/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/cache-loader/dist/cjs.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/babel-loader/lib/index.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/lib/cellWrapper.js",
              "module": "./lib/cellWrapper.js",
              "moduleName": "./lib/cellWrapper.js",
              "type": "cjs require",
              "userRequest": "./cell",
              "loc": "38:9-26"
            },
            {
              "moduleId": 20,
              "moduleIdentifier": "/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/cache-loader/dist/cjs.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/babel-loader/lib/index.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/lib/labelCell.js",
              "module": "./lib/labelCell.js",
              "moduleName": "./lib/labelCell.js",
              "type": "cjs require",
              "userRequest": "./cell",
              "loc": "32:9-26"
            }
          ],
          "usedExports": true,
          "providedExports": null,
          "optimizationBailout": [],
          "depth": 4,
          "source": "'use strict';\n\n(function () {\n  var Cell,\n      Classnames,\n      PropTypes,\n      React,\n      ReactDatum,\n      _,\n      bind = function bind(fn, me) {\n    return function () {\n      return fn.apply(me, arguments);\n    };\n  },\n      extend = function extend(child, parent) {\n    for (var key in parent) {\n      if (hasProp.call(parent, key)) child[key] = parent[key];\n    }function ctor() {\n      this.constructor = child;\n    }ctor.prototype = parent.prototype;child.prototype = new ctor();child.__super__ = parent.prototype;return child;\n  },\n      hasProp = {}.hasOwnProperty;\n\n  React = require('react');\n\n  ReactDatum = require('react-datum');\n\n  PropTypes = require('prop-types');\n\n  Classnames = require('classnames');\n\n  _ = require('underscore');\n\n  module.exports = Cell = function (superClass) {\n    extend(Cell, superClass);\n\n    Cell.propTypes = {\n      editing: PropTypes.bool,\n      rowData: PropTypes.object,\n      column: PropTypes.object,\n      datagrid: PropTypes.any,\n      onEdit: PropTypes.func,\n      defaultCellStyle: PropTypes.object\n    };\n\n    Cell.contextTypes = {\n      datagrid: PropTypes.any\n    };\n\n    function Cell() {\n      this.onEditClick = bind(this.onEditClick, this);\n      this._delayedForceUpdate = bind(this._delayedForceUpdate, this);\n      this._debouncedForceUpdate = bind(this._debouncedForceUpdate, this);\n      this.renderWrapped = bind(this.renderWrapped, this);\n      Cell.__super__.constructor.apply(this, arguments);\n    }\n\n    Cell.prototype.componentDidMount = function () {\n      return Cell.__super__.componentDidMount.apply(this, arguments);\n    };\n\n    Cell.prototype.render = function () {\n      var datumComponent, datumProps, ref, value;\n      value = this.props.value;\n      datumProps = _.extend({}, this.props.column.datumProps, {\n        model: this.getModel(),\n        attr: this.props.column.key,\n        column: this.props.column,\n        ref: 'datum',\n        inputMode: this.props.editing ? 'edit' : 'readonly'\n      });\n      datumProps = _.defaults(datumProps, {\n        rbOverlayProps: {\n          trigger: ['hover', 'focus', 'click'],\n          placement: 'top'\n        }\n      });\n      datumComponent = (ref = this.props.column.datum) != null ? ref : ReactDatum.Text;\n      value = React.createElement(this.props.column.datum, datumProps);\n      this.renderWrapped(value);\n      return renderedCell;\n    };\n\n    Cell.prototype.renderWrapped = function (value, options) {\n      var canEditCell, className, icon, ref, wrapperStyle;\n      if (options == null) {\n        options = {};\n      }\n      options = _.defaults(options, {\n        title: null,\n        wrapperStyle: {}\n      });\n      this.setDatumErrors();\n      canEditCell = (ref = this.getDatagrid()) != null ? ref.canEditCell(this.props.column, this.getModel()) : void 0;\n      wrapperStyle = $.extend(true, {}, options.wrapperStyle, this.getCellStyle(canEditCell));\n      className = this.getCellClass(canEditCell);\n      icon = this.getPrimaryIcon(canEditCell);\n      return React.createElement(\"div\", {\n        \"data-attr-row\": this.props.rowIdx,\n        \"data-attr-col\": this.props.column.key,\n        \"className\": className,\n        \"title\": options.title,\n        \"style\": wrapperStyle\n      }, icon, React.createElement(\"span\", null, value));\n    };\n\n    Cell.prototype._debouncedForceUpdate = function () {\n      return _.debounce(function (_this) {\n        return function () {\n          return _this.forceUpdate();\n        };\n      }(this), 50);\n    };\n\n    Cell.prototype._delayedForceUpdate = function (delay) {\n      if (delay == null) {\n        delay = 5000;\n      }\n      return _.delay(this._debouncedForceUpdate, 5000);\n    };\n\n    Cell.prototype.onEditClick = function (evt) {\n      return _.defer(function (_this) {\n        return function () {\n          var ref;\n          if (_this.props.onEdit != null) {\n            return _this.props.onEdit(_this, evt);\n          } else {\n            return (ref = _this.getDatagrid()) != null ? typeof ref.editCurrentCell === \"function\" ? ref.editCurrentCell() : void 0 : void 0;\n          }\n        };\n      }(this));\n    };\n\n    Cell.prototype.getModel = function () {\n      return this.props.rowData;\n    };\n\n    Cell.prototype.getDatagrid = function () {\n      var ref;\n      return (ref = this.props.datagrid) != null ? ref : this.context.datagrid;\n    };\n\n    Cell.prototype.getCellClass = function (canEditCell) {\n      var model, ref;\n      model = this.getModel();\n      return Classnames('rdd-cell', \"rdd-\" + this.props.column.key.dasherize() + \"-column no-help-icon\", this.getAdditionalElementClasses(), {\n        'rdd-cell-error': ((ref = this.getDatagridSaveErrors()) != null ? ref.length : void 0) > 0\n      }, {\n        'rdd-cell-saved': this.getDatagridSaveSuccess() === true\n      }, {\n        'rdd-editable': canEditCell\n      }, {\n        'rdd-selected': this.isSelected()\n      });\n    };\n\n    Cell.prototype.getCellStyle = function (canEditCell) {\n      var model;\n      model = this.getModel();\n      return $.extend(true, {}, this.getCellDefaultStyle(model), this.props.column.cellStyle, this.getCellOverrideStyle(model));\n    };\n\n    Cell.prototype.getCellDefaultStyle = function (model) {\n      var cellStyle, ref;\n      cellStyle = _.extend({}, (ref = this.props.defaultCellStyle) != null ? ref : {});\n      if (this.props.column.rightAlign) {\n        cellStyle.textAlign = 'right';\n        cellStyle.paddingRight = 10;\n      }\n      return cellStyle;\n    };\n\n    Cell.prototype.getCellOverrideStyle = function (model) {\n      return {};\n    };\n\n    Cell.prototype.getPrimaryIcon = function (canEditCell) {\n      var icon, model;\n      icon = null;\n      model = this.getModel();\n      if (model == null) {\n        return null;\n      }\n      if (this.getDatagridSaving()) {\n        icon = React.createElement(\"i\", {\n          \"className\": \"fa fa-spin fa-refresh rdd-icon rdd-icon-refresh\",\n          \"title\": \"Saving update...\"\n        });\n      } else if (canEditCell && !this.props.column.hideEditableIcon) {\n        icon = React.createElement(\"i\", {\n          \"className\": \"fa fa-pencil rdd-icon rdd-icon-edit\",\n          \"onClick\": this.onEditClick,\n          \"title\": \"Click to edit this cell (or dbclick or enter)\"\n        });\n      }\n      return icon;\n    };\n\n    Cell.prototype.getAdditionalElementClasses = function () {\n      return null;\n    };\n\n    Cell.prototype.getDatagridSaveErrors = function () {\n      var model, ref, ref1, ref2;\n      model = this.getModel();\n      return (ref = (ref1 = model != null ? typeof model.getDatagridSaveErrors === \"function\" ? model.getDatagridSaveErrors(this.props.column.key) : void 0 : void 0) != null ? ref1 : model != null ? (ref2 = model.__datagridSaveErrors) != null ? ref2[this.props.column.key] : void 0 : void 0) != null ? ref : [];\n    };\n\n    Cell.prototype.getDatagridSaveSuccess = function () {\n      var model, ref, ref1, ref2;\n      model = this.getModel();\n      return (ref = (ref1 = model != null ? typeof model.getDatagridSaveSuccess === \"function\" ? model.getDatagridSaveSuccess(this.props.column.key) : void 0 : void 0) != null ? ref1 : model != null ? (ref2 = model.__datagridSaveSuccess) != null ? ref2[this.props.column.key] : void 0 : void 0) != null ? ref : false;\n    };\n\n    Cell.prototype.setDatagridSaveSuccess = function (trueOrFalse) {\n      var model, ref;\n      model = this.getModel();\n      if (model == null) {\n        return;\n      }\n      if (_.isFunction(model.setDatagridSaveSuccess)) {\n        return model.setDatagridSaveSuccess(this.props.column.key, trueOrFalse);\n      } else {\n        return (ref = model.__datagridSaveSuccess) != null ? ref[this.props.column.key] = trueOrFalse : void 0;\n      }\n    };\n\n    Cell.prototype.getDatagridSaving = function () {\n      var model, ref, ref1, ref2;\n      model = this.getModel();\n      return (ref = (ref1 = model != null ? typeof model.getDatagridSaving === \"function\" ? model.getDatagridSaving(this.props.column.key) : void 0 : void 0) != null ? ref1 : model != null ? (ref2 = model.__datagridSaving) != null ? ref2[this.props.column.key] : void 0 : void 0) != null ? ref : false;\n    };\n\n    Cell.prototype.isSelected = function () {\n      var ref;\n      return (ref = this.getDatagrid()) != null ? typeof ref.isCellSelected === \"function\" ? ref.isCellSelected(this.props.rowIdx, this.props.column.key) : void 0 : void 0;\n    };\n\n    Cell.prototype.setDatumErrors = function () {\n      var model, saveErrorResp;\n      model = this.getModel();\n      if (model == null) {\n        return;\n      }\n      saveErrorResp = this.getDatagridSaveErrors();\n      if ((saveErrorResp != null ? saveErrorResp.length : void 0) > 0) {\n        _.defer(function (_this) {\n          return function () {\n            var base;\n            if (_this.refs.datum != null) {\n              if (typeof (base = _this.refs.datum).clearErrors === \"function\") {\n                base.clearErrors();\n              }\n              return _this.refs.datum.onModelSaveError(_this.getModel(), saveErrorResp);\n            }\n          };\n        }(this));\n      }\n      if (this.getDatagridSaveSuccess()) {\n        _.defer(function (_this) {\n          return function () {\n            var base;\n            if (_this.refs.datum != null) {\n              if (typeof (base = _this.refs.datum).clearErrors === \"function\") {\n                base.clearErrors();\n              }\n            }\n            return _this.setDatagridSaveSuccess(false);\n          };\n        }(this));\n        return this._delayedForceUpdate();\n      }\n    };\n\n    return Cell;\n  }(React.Component);\n}).call(undefined);"
        },
        {
          "id": 9,
          "identifier": "multi ./index.js",
          "name": "multi ./index.js",
          "index": 0,
          "index2": 26,
          "size": 28,
          "cacheable": true,
          "built": true,
          "optional": false,
          "prefetched": false,
          "chunks": [
            0
          ],
          "assets": [],
          "issuer": null,
          "issuerId": null,
          "issuerName": null,
          "failed": false,
          "errors": 0,
          "warnings": 0,
          "reasons": [],
          "usedExports": true,
          "providedExports": null,
          "optimizationBailout": [],
          "depth": 0
        },
        {
          "id": 10,
          "identifier": "/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/cache-loader/dist/cjs.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/babel-loader/lib/index.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/index.js",
          "name": "./index.js",
          "index": 1,
          "index2": 25,
          "size": 191,
          "cacheable": true,
          "built": true,
          "optional": false,
          "prefetched": false,
          "chunks": [
            0
          ],
          "assets": [],
          "issuer": "multi ./index.js",
          "issuerId": 9,
          "issuerName": "multi ./index.js",
          "failed": false,
          "errors": 0,
          "warnings": 0,
          "reasons": [
            {
              "moduleId": 9,
              "moduleIdentifier": "multi ./index.js",
              "module": "multi ./index.js",
              "moduleName": "multi ./index.js",
              "type": "single entry",
              "userRequest": "./index.js",
              "loc": "main:100000"
            }
          ],
          "usedExports": true,
          "providedExports": null,
          "optimizationBailout": [],
          "depth": 1,
          "source": "'use strict';\n\nvar _ReactDatumDatagrid = require('./lib/datagrid');\n\nif (window) {\n  window.ReactDatumDatagrid = _ReactDatumDatagrid;\n}\nif (module) {\n  module.exports = _ReactDatumDatagrid;\n}"
        },
        {
          "id": 11,
          "identifier": "/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/webpack/buildin/module.js",
          "name": "(webpack)/buildin/module.js",
          "index": 2,
          "index2": 0,
          "size": 517,
          "cacheable": true,
          "built": true,
          "optional": false,
          "prefetched": false,
          "chunks": [
            0
          ],
          "assets": [],
          "issuer": "/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/cache-loader/dist/cjs.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/babel-loader/lib/index.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/index.js",
          "issuerId": 10,
          "issuerName": "./index.js",
          "failed": false,
          "errors": 0,
          "warnings": 0,
          "reasons": [
            {
              "moduleId": 10,
              "moduleIdentifier": "/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/cache-loader/dist/cjs.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/babel-loader/lib/index.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/index.js",
              "module": "./index.js",
              "moduleName": "./index.js",
              "type": "cjs require",
              "userRequest": "module",
              "loc": "1:0-51"
            }
          ],
          "usedExports": true,
          "providedExports": null,
          "optimizationBailout": [],
          "depth": 2,
          "source": "module.exports = function(module) {\r\n\tif(!module.webpackPolyfill) {\r\n\t\tmodule.deprecate = function() {};\r\n\t\tmodule.paths = [];\r\n\t\t// module.parent = undefined by default\r\n\t\tif(!module.children) module.children = [];\r\n\t\tObject.defineProperty(module, \"loaded\", {\r\n\t\t\tenumerable: true,\r\n\t\t\tget: function() {\r\n\t\t\t\treturn module.l;\r\n\t\t\t}\r\n\t\t});\r\n\t\tObject.defineProperty(module, \"id\", {\r\n\t\t\tenumerable: true,\r\n\t\t\tget: function() {\r\n\t\t\t\treturn module.i;\r\n\t\t\t}\r\n\t\t});\r\n\t\tmodule.webpackPolyfill = 1;\r\n\t}\r\n\treturn module;\r\n};\r\n"
        },
        {
          "id": 12,
          "identifier": "/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/cache-loader/dist/cjs.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/babel-loader/lib/index.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/lib/datagrid.js",
          "name": "./lib/datagrid.js",
          "index": 3,
          "index2": 24,
          "size": 16007,
          "cacheable": true,
          "built": true,
          "optional": false,
          "prefetched": false,
          "chunks": [
            0
          ],
          "assets": [],
          "issuer": "/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/cache-loader/dist/cjs.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/babel-loader/lib/index.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/index.js",
          "issuerId": 10,
          "issuerName": "./index.js",
          "failed": false,
          "errors": 0,
          "warnings": 0,
          "reasons": [
            {
              "moduleId": 10,
              "moduleIdentifier": "/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/cache-loader/dist/cjs.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/babel-loader/lib/index.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/index.js",
              "module": "./index.js",
              "moduleName": "./index.js",
              "type": "cjs require",
              "userRequest": "./lib/datagrid",
              "loc": "3:26-51"
            }
          ],
          "usedExports": true,
          "providedExports": null,
          "optimizationBailout": [],
          "depth": 2,
          "source": "'use strict';\n\n(function () {\n  var $,\n      CellWrapper,\n      Datagrid,\n      GridEdit,\n      GridSelect,\n      LabelCell,\n      Mixin,\n      PropTypes,\n      React,\n      ReactDOM,\n      ReactDatum,\n      ReactStyles,\n      _,\n      bind = function bind(fn, me) {\n    return function () {\n      return fn.apply(me, arguments);\n    };\n  },\n      extend = function extend(child, parent) {\n    for (var key in parent) {\n      if (hasProp.call(parent, key)) child[key] = parent[key];\n    }function ctor() {\n      this.constructor = child;\n    }ctor.prototype = parent.prototype;child.prototype = new ctor();child.__super__ = parent.prototype;return child;\n  },\n      hasProp = {}.hasOwnProperty;\n\n  React = require('react');\n\n  ReactDOM = require('react-dom');\n\n  ReactDatum = require('react-datum');\n\n  PropTypes = require('prop-types');\n\n  _ = require('underscore');\n\n  $ = require('jquery');\n\n  Mixin = require('./helpers/mixin');\n\n  ReactStyles = require('./helpers/reactStyles');\n\n  CellWrapper = require('./cellWrapper');\n\n  LabelCell = require('./labelCell');\n\n  GridEdit = require('./gridEdit');\n\n  GridSelect = require('./gridSelect');\n\n  /*\n    This is react-datum-datagrid.   \n    \n    Example:\n    TODO\n   */\n\n  module.exports = Datagrid = function (superClass) {\n    extend(Datagrid, superClass);\n\n    function Datagrid() {\n      this._onLabelScroll = bind(this._onLabelScroll, this);\n      this._onBottomGridScroll = bind(this._onBottomGridScroll, this);\n      this._onTopGridScroll = bind(this._onTopGridScroll, this);\n      return Datagrid.__super__.constructor.apply(this, arguments);\n    }\n\n    Datagrid.displayName = \"react-datum-datagrid\";\n\n    Datagrid.DEFAULT_CELL_HEIGHT = 20;\n\n    Datagrid.DEFAULT_CELL_BORDER_WIDTH = 1;\n\n    Datagrid.DEFAULT_CELL_PADDING_HEIGHT = 5;\n\n    Datagrid.DEFAULT_CELL_PADDING_WIDTH = 10;\n\n    Datagrid.propTypes = {\n      collection: PropTypes.oneOfType([PropTypes.object, PropTypes.array]),\n      columns: PropTypes.array,\n      silentSaveErrors: PropTypes.bool,\n      labelWidth: PropTypes.number,\n      onHideColumn: PropTypes.func,\n      onShowColumn: PropTypes.func\n    };\n\n    Datagrid.defaultProps = {\n      labelWidth: 300\n    };\n\n    Datagrid.childContextTypes = {\n      datagrid: PropTypes.instanceOf(Datagrid.constructor)\n    };\n\n    Datagrid.prototype.getChildContext = function () {\n      return {\n        datagrid: this\n      };\n    };\n\n    Datagrid.prototype.styles = new ReactStyles({\n      container: {\n        includes: function includes() {\n          return this.props.style;\n        }\n      },\n      headers: {\n        includes: function includes() {\n          return {\n            width: this.props.labelWidth\n          };\n        },\n        display: 'inline-block',\n        backgroundColor: '#eceff6',\n        height: '100%',\n        verticalAlign: 'top'\n      },\n      gridsContainer: {\n        includes: function includes() {\n          return {\n            width: \"calc(100% - \" + this.props.labelWidth + \"px)\"\n          };\n        },\n        display: 'inline-block',\n        height: '100%'\n      },\n      topGrid: {\n        includes: ['bottomDivider', function () {\n          return {\n            height: this._getTopGridHeight()\n          };\n        }],\n        width: 'calc(100% - 13px)'\n      },\n      bottomGrid: {\n        includes: function includes() {\n          return {\n            height: this._getBottomGridHeight()\n          };\n        },\n        width: '100%'\n      },\n      fixedHeaderCells: {\n        includes: ['bottomDivider', function () {\n          return {\n            height: this._getTopGridHeight() + 1\n          };\n        }],\n        width: '100%'\n      },\n      scrollingHeaderCells: {\n        includes: function includes() {\n          return {\n            height: \"calc(100% - \" + (this._getTopGridHeight() + 20) + \"px)\"\n          };\n        },\n        width: '100%',\n        marginTop: 1\n      },\n      scrollingHeaderCellsViewport: {\n        height: '100%',\n        overflowY: 'scroll'\n      },\n      styleImage: {\n        width: 50,\n        minHeight: 60\n      },\n      bottomDivider: {\n        borderBottom: \"3px solid #cccccc\"\n      }\n    });\n\n    Datagrid.prototype.componentDidMount = function () {\n      this._initializeScrolling();\n      return Datagrid.__super__.componentDidMount.apply(this, arguments);\n    };\n\n    Datagrid.prototype.style = function (name) {\n      var ref;\n      return _.extend({}, this.styles.get(this, name), ((ref = this.props.styles) != null ? ref[name] : void 0) || {});\n    };\n\n    Datagrid.prototype.render = function () {\n      var fixedColumns, scrollingColumns;\n      fixedColumns = this._getFixedColumns();\n      scrollingColumns = this._getScrollingColumns();\n      return React.createElement(\"div\", {\n        \"style\": this.style('container'),\n        \"className\": 'react-datum-datagrid'\n      }, React.createElement(\"div\", {\n        \"style\": this.style('headers'),\n        \"className\": 'rdd-headers'\n      }, React.createElement(\"div\", {\n        \"style\": this.style('fixedHeaderCells'),\n        \"className\": 'rdd-fixed-header-cells'\n      }, this._renderHeaderCells(fixedColumns)), React.createElement(\"div\", {\n        \"style\": this.style('scrollingHeaderCells'),\n        \"className\": 'rdd-scrolling-header-cells'\n      }, React.createElement(\"div\", {\n        \"style\": this.style('scrollingHeaderCellsViewport')\n      }, this._renderHeaderCells(scrollingColumns)))), React.createElement(\"div\", {\n        \"style\": this.style('gridsContainer')\n      }, React.createElement(\"div\", {\n        \"style\": this.style('topGrid'),\n        \"className\": 'rdd-top-grid'\n      }, React.createElement(ReactGrid, {\n        \"collection\": this.props.collection,\n        \"ref\": 'topGrid',\n        \"gridSelectionClass\": null,\n        \"gridOptions\": {\n          preloadCushion: 200,\n          pageSize: 20\n        }\n      }, function (_this) {\n        return function (model, rowIdx) {\n          return _this._renderDataCells(_this._getFixedColumns(), model, rowIdx, 0);\n        };\n      }(this))), React.createElement(\"div\", {\n        \"style\": this.style('bottomGrid'),\n        \"className\": 'rdd-bottom-grid'\n      }, React.createElement(ReactGrid, {\n        \"collection\": this.props.collection,\n        \"ref\": 'bottomGrid',\n        \"gridSelectionClass\": null,\n        \"gridOptions\": {\n          preloadCushion: 200,\n          pageSize: 20\n        }\n      }, function (_this) {\n        return function (model, rowIdx) {\n          return _this._renderDataCells(_this._getScrollingColumns(), model, rowIdx, _this._getFixedColumns().length);\n        };\n      }(this)))));\n    };\n\n    /*\n      Override me to conditionally enable editing on a per cell basis\n     */\n\n    Datagrid.prototype.canEditCell = function (col, rowModel) {\n      var ref, ref1;\n      if (!(col != null ? col.editable : void 0)) {\n        return false;\n      }\n      if (col != null ? (ref = col.datum) != null ? (ref1 = ref.prototype) != null ? typeof ref1.isLocked === \"function\" ? ref1.isLocked(col, rowModel) : void 0 : void 0 : void 0 : void 0) {\n        return false;\n      }\n      return true;\n    };\n\n    Datagrid.prototype.getSelectedCell = function () {\n      var $focusedCell, colIdx, columnDef, rowIdx;\n      $focusedCell = $(ReactDOM.findDOMNode(this)).find('.rdd-cell-wrapper:focus');\n      if (!(($focusedCell != null ? $focusedCell.length : void 0) > 0)) {\n        return null;\n      }\n      rowIdx = ReactDatum.Number.safelyFloat($focusedCell.attr('data-row'));\n      colIdx = ReactDatum.Number.safelyFloat($focusedCell.attr('data-col'));\n      columnDef = this.getColumn(colIdx);\n      return {\n        rowIdx: rowIdx,\n        idx: colIdx,\n        col: columnDef.key\n      };\n    };\n\n    Datagrid.prototype.setSelectedCell = function (rowIndex, colIndex) {\n      var $requestedCell;\n      $requestedCell = $(ReactDOM.findDOMNode(this)).find(\".rdd-cell-wrapper[data-row=\" + rowIndex + \"][data-col=\" + colIndex + \"]\");\n      if (!(($requestedCell != null ? $requestedCell.length : void 0) > 0)) {\n        return;\n      }\n      return $requestedCell.focus();\n    };\n\n    Datagrid.prototype.unsetSelectedCell = function () {\n      if (this.getSelectedCell() != null) {\n        return document.activeElement.blur();\n      }\n    };\n\n    Datagrid.prototype.isCellSelected = function (rowIdx, colKey) {\n      var selectedCell;\n      selectedCell = this.getSelectedCell();\n      return selectedCell.rowIdx === rowIdx && selectedCell.col === colKey;\n    };\n\n    Datagrid.prototype.refresh = function () {\n      var ref, ref1, ref2, ref3;\n      if ((ref = this.refs.topGrid) != null) {\n        if ((ref1 = ref.grid) != null) {\n          ref1.refresh();\n        }\n      }\n      if ((ref2 = this.refs.bottomGrid) != null) {\n        if ((ref3 = ref2.grid) != null) {\n          ref3.refresh();\n        }\n      }\n      this._onLabelScroll();\n      return _.defer(function (_this) {\n        return function () {\n          return _this._onLabelScroll();\n        };\n      }(this));\n    };\n\n    Datagrid.prototype._renderHeaderCells = function (columnDefs) {\n      var cells, columnDef, index;\n      cells = function () {\n        var i, len, results;\n        results = [];\n        for (index = i = 0, len = columnDefs.length; i < len; index = ++i) {\n          columnDef = columnDefs[index];\n          results.push(this._renderLabelCell(index, columnDef));\n        }\n        return results;\n      }.call(this);\n      return cells;\n    };\n\n    Datagrid.prototype._renderLabelCell = function (index, columnDef) {\n      var labelStyle, ref;\n      if (columnDef == null) {\n        return null;\n      }\n      labelStyle = $.extend(true, {}, this._getDefaultCellStyle(columnDef), (ref = columnDef.flipgrid) != null ? ref.labelStyle : void 0);\n      return React.createElement(LabelCell, {\n        \"key\": index,\n        \"column\": columnDef,\n        \"datagrid\": this,\n        \"defaultCellStyle\": labelStyle,\n        \"onShowColumn\": this.props.onShowColumn,\n        \"onHideColumn\": this.props.onHideColumn\n      });\n    };\n\n    Datagrid.prototype._renderDataCells = function (columnDefs, model, rowIdx, baseColumnIndex) {\n      var cells, columnDef, index;\n      return cells = function () {\n        var i, len, results;\n        results = [];\n        for (index = i = 0, len = columnDefs.length; i < len; index = ++i) {\n          columnDef = columnDefs[index];\n          results.push(this._renderDataCell(index, columnDef, model, rowIdx, baseColumnIndex));\n        }\n        return results;\n      }.call(this);\n    };\n\n    Datagrid.prototype._renderDataCell = function (index, columnDef, model, rowIdx, baseColumnIndex) {\n      return React.createElement(CellWrapper, {\n        \"model\": model,\n        \"column\": columnDef,\n        \"rowIdx\": rowIdx,\n        \"colIdx\": baseColumnIndex + index,\n        \"datagrid\": this,\n        \"defaultCellStyle\": this._getDefaultCellStyle(columnDef)\n      });\n    };\n\n    Datagrid.prototype._getFixedColumns = function () {\n      return _.filter(this.props.columns, function (columnDef) {\n        return columnDef.locked;\n      });\n    };\n\n    Datagrid.prototype._getScrollingColumns = function () {\n      return _.filter(this.props.columns, function (columnDef) {\n        return !columnDef.locked;\n      });\n    };\n\n    Datagrid.prototype._initializeScrolling = function () {\n      var bottomGridEl, scrollingLableCellsEl, topGridEl;\n      topGridEl = ReactDOM.findDOMNode(this.refs.topGrid).querySelector('.grid');\n      bottomGridEl = ReactDOM.findDOMNode(this.refs.bottomGrid).querySelector('.grid');\n      topGridEl.addEventListener('scroll', this._onTopGridScroll);\n      bottomGridEl.addEventListener('scroll', this._onBottomGridScroll);\n      scrollingLableCellsEl = ReactDOM.findDOMNode(this).querySelector('.scrolling-label-cells > div');\n      return scrollingLableCellsEl.addEventListener('scroll', this._onLabelScroll);\n    };\n\n    Datagrid.prototype._onTopGridScroll = function () {\n      var bottomGridEl, topGridEl;\n      if (!this._isBottomInitiatedScrolling) {\n        this._isTopInitiatedScrolling = true;\n        topGridEl = ReactDOM.findDOMNode(this.refs.topGrid).querySelector('.grid');\n        bottomGridEl = ReactDOM.findDOMNode(this.refs.bottomGrid).querySelector('.grid');\n        bottomGridEl.scrollLeft = topGridEl.scrollLeft;\n      }\n      return this._isBottomInitiatedScrolling = false;\n    };\n\n    Datagrid.prototype._onBottomGridScroll = function () {\n      var bottomGridEl, scrollingLableCellsEl, topGridEl;\n      if (!(this._isTopInitiatedScrolling || this._isLabelInitiatedScrolling)) {\n        this._isBottomInitiatedScrolling = true;\n        topGridEl = ReactDOM.findDOMNode(this.refs.topGrid).querySelector('.grid');\n        bottomGridEl = ReactDOM.findDOMNode(this.refs.bottomGrid).querySelector('.grid');\n        topGridEl.scrollLeft = bottomGridEl.scrollLeft;\n      }\n      this._isTopInitiatedScrolling = false;\n      if (!this._isLabelInitiatedScrolling) {\n        scrollingLableCellsEl = ReactDOM.findDOMNode(this).querySelector('.scrolling-label-cells > div');\n        bottomGridEl = ReactDOM.findDOMNode(this.refs.bottomGrid).querySelector('.grid');\n        scrollingLableCellsEl.scrollTop = bottomGridEl.scrollTop;\n      }\n      return this._isLabelInitiatedScrolling = false;\n    };\n\n    Datagrid.prototype._onLabelScroll = function () {\n      var bottomGridEl, scrollingLableCellsEl;\n      if (!this._isBottomInitiatedScrolling) {\n        this._isLabelInitiatedScrolling = true;\n        scrollingLableCellsEl = ReactDOM.findDOMNode(this).querySelector('.scrolling-label-cells > div');\n        bottomGridEl = ReactDOM.findDOMNode(this.refs.bottomGrid).querySelector('.grid');\n        bottomGridEl.scrollTop = scrollingLableCellsEl.scrollTop;\n      }\n      return this._isBottomInitiatedScrolling = false;\n    };\n\n    Datagrid.prototype._getTopGridHeight = function () {\n      var col, heightOut, i, len, ref, ref1, ref2, ref3, ref4, ref5, ref6, ref7;\n      heightOut = 0;\n      ref = this._getFixedColumns();\n      for (i = 0, len = ref.length; i < len; i++) {\n        col = ref[i];\n        heightOut += (ref1 = this._convertCssPx((ref2 = col.cellStyle) != null ? ref2.borderWidth : void 0)) != null ? ref1 : this.constructor.DEFAULT_CELL_BORDER_WIDTH;\n        heightOut += (ref3 = col.height) != null ? ref3 : this.constructor.DEFAULT_CELL_HEIGHT;\n        heightOut += (ref4 = this._convertCssPx((ref5 = col.cellStyle) != null ? ref5.paddingTop : void 0)) != null ? ref4 : this.constructor.DEFAULT_CELL_PADDING_HEIGHT;\n        heightOut += (ref6 = this._convertCssPx((ref7 = col.cellStyle) != null ? ref7.paddingBottom : void 0)) != null ? ref6 : this.constructor.DEFAULT_CELL_PADDING_HEIGHT;\n      }\n      return heightOut;\n    };\n\n    Datagrid.prototype._getBottomGridHeight = function () {\n      return \"calc(100% - \" + (this._getTopGridHeight() + 5) + \"px)\";\n    };\n\n    Datagrid.prototype._convertCssPx = function (value) {\n      var numerals, ref;\n      if (value == null) {\n        return null;\n      }\n      if (_.isString(value)) {\n        numerals = (ref = value.match(/[^0-9\\.]*([0-9\\.]*).*/)) != null ? ref[1] : void 0;\n        if (numerals == null) {\n          return 0;\n        }\n        return parseInt(numerals);\n      }\n      return value;\n    };\n\n    Datagrid.prototype._getDefaultCellStyle = function (columnDef) {\n      var cellStyle;\n      cellStyle = {\n        height: columnDef.height || this.constructor.DEFAULT_CELL_HEIGHT,\n        borderColor: \"#EFEFEF\",\n        borderStyle: 'solid',\n        borderWidth: 0,\n        borderBottomWidth: this.constructor.DEFAULT_CELL_BORDER_WIDTH,\n        paddingTop: this.constructor.DEFAULT_CELL_PADDING_HEIGHT,\n        paddingBottom: this.constructor.DEFAULT_CELL_PADDING_HEIGHT,\n        paddingLeft: this.constructor.DEFAULT_CELL_PADDING_WIDTH,\n        paddingRight: this.constructor.DEFAULT_CELL_PADDING_WIDTH\n      };\n      return cellStyle;\n    };\n\n    Mixin(Datagrid, GridEdit);\n\n    Mixin(Datagrid, GridSelect);\n\n    return Datagrid;\n  }(React.Component);\n}).call(undefined);"
        },
        {
          "id": 13,
          "identifier": "/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/prop-types/factoryWithThrowingShims.js",
          "name": "./node_modules/prop-types/factoryWithThrowingShims.js",
          "index": 8,
          "index2": 7,
          "size": 1492,
          "cacheable": true,
          "built": true,
          "optional": false,
          "prefetched": false,
          "chunks": [
            0
          ],
          "assets": [],
          "issuer": "/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/prop-types/index.js",
          "issuerId": 3,
          "issuerName": "./node_modules/prop-types/index.js",
          "failed": false,
          "errors": 0,
          "warnings": 0,
          "reasons": [
            {
              "moduleId": 3,
              "moduleIdentifier": "/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/prop-types/index.js",
              "module": "./node_modules/prop-types/index.js",
              "moduleName": "./node_modules/prop-types/index.js",
              "type": "cjs require",
              "userRequest": "./factoryWithThrowingShims",
              "loc": "27:19-56"
            }
          ],
          "usedExports": true,
          "providedExports": null,
          "optimizationBailout": [],
          "depth": 4,
          "source": "/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\nvar emptyFunction = require('fbjs/lib/emptyFunction');\nvar invariant = require('fbjs/lib/invariant');\nvar ReactPropTypesSecret = require('./lib/ReactPropTypesSecret');\n\nmodule.exports = function() {\n  function shim(props, propName, componentName, location, propFullName, secret) {\n    if (secret === ReactPropTypesSecret) {\n      // It is still safe when called from React.\n      return;\n    }\n    invariant(\n      false,\n      'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +\n      'Use PropTypes.checkPropTypes() to call them. ' +\n      'Read more at http://fb.me/use-check-prop-types'\n    );\n  };\n  shim.isRequired = shim;\n  function getShim() {\n    return shim;\n  };\n  // Important!\n  // Keep this list in sync with production version in `./factoryWithTypeCheckers.js`.\n  var ReactPropTypes = {\n    array: shim,\n    bool: shim,\n    func: shim,\n    number: shim,\n    object: shim,\n    string: shim,\n    symbol: shim,\n\n    any: shim,\n    arrayOf: getShim,\n    element: shim,\n    instanceOf: getShim,\n    node: shim,\n    objectOf: getShim,\n    oneOf: getShim,\n    oneOfType: getShim,\n    shape: getShim,\n    exact: getShim\n  };\n\n  ReactPropTypes.checkPropTypes = emptyFunction;\n  ReactPropTypes.PropTypes = ReactPropTypes;\n\n  return ReactPropTypes;\n};\n"
        },
        {
          "id": 14,
          "identifier": "/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/fbjs/lib/emptyFunction.js",
          "name": "./node_modules/fbjs/lib/emptyFunction.js",
          "index": 9,
          "index2": 4,
          "size": 959,
          "cacheable": true,
          "built": true,
          "optional": false,
          "prefetched": false,
          "chunks": [
            0
          ],
          "assets": [],
          "issuer": "/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/prop-types/factoryWithThrowingShims.js",
          "issuerId": 13,
          "issuerName": "./node_modules/prop-types/factoryWithThrowingShims.js",
          "failed": false,
          "errors": 0,
          "warnings": 0,
          "reasons": [
            {
              "moduleId": 13,
              "moduleIdentifier": "/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/prop-types/factoryWithThrowingShims.js",
              "module": "./node_modules/prop-types/factoryWithThrowingShims.js",
              "moduleName": "./node_modules/prop-types/factoryWithThrowingShims.js",
              "type": "cjs require",
              "userRequest": "fbjs/lib/emptyFunction",
              "loc": "10:20-53"
            }
          ],
          "usedExports": true,
          "providedExports": null,
          "optimizationBailout": [],
          "depth": 5,
          "source": "\"use strict\";\n\n/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n\nfunction makeEmptyFunction(arg) {\n  return function () {\n    return arg;\n  };\n}\n\n/**\n * This function accepts and discards inputs; it has no side effects. This is\n * primarily useful idiomatically for overridable function endpoints which\n * always need to be callable, since JS lacks a null-call idiom ala Cocoa.\n */\nvar emptyFunction = function emptyFunction() {};\n\nemptyFunction.thatReturns = makeEmptyFunction;\nemptyFunction.thatReturnsFalse = makeEmptyFunction(false);\nemptyFunction.thatReturnsTrue = makeEmptyFunction(true);\nemptyFunction.thatReturnsNull = makeEmptyFunction(null);\nemptyFunction.thatReturnsThis = function () {\n  return this;\n};\nemptyFunction.thatReturnsArgument = function (arg) {\n  return arg;\n};\n\nmodule.exports = emptyFunction;"
        },
        {
          "id": 15,
          "identifier": "/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/fbjs/lib/invariant.js",
          "name": "./node_modules/fbjs/lib/invariant.js",
          "index": 10,
          "index2": 5,
          "size": 1506,
          "cacheable": true,
          "built": true,
          "optional": false,
          "prefetched": false,
          "chunks": [
            0
          ],
          "assets": [],
          "issuer": "/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/prop-types/factoryWithThrowingShims.js",
          "issuerId": 13,
          "issuerName": "./node_modules/prop-types/factoryWithThrowingShims.js",
          "failed": false,
          "errors": 0,
          "warnings": 0,
          "reasons": [
            {
              "moduleId": 13,
              "moduleIdentifier": "/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/prop-types/factoryWithThrowingShims.js",
              "module": "./node_modules/prop-types/factoryWithThrowingShims.js",
              "moduleName": "./node_modules/prop-types/factoryWithThrowingShims.js",
              "type": "cjs require",
              "userRequest": "fbjs/lib/invariant",
              "loc": "11:16-45"
            }
          ],
          "usedExports": true,
          "providedExports": null,
          "optimizationBailout": [],
          "depth": 5,
          "source": "/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n'use strict';\n\n/**\n * Use invariant() to assert state which your program assumes to be true.\n *\n * Provide sprintf-style format (only %s is supported) and arguments\n * to provide information about what broke and what you were\n * expecting.\n *\n * The invariant message will be stripped in production, but the invariant\n * will remain to ensure logic does not differ in production.\n */\n\nvar validateFormat = function validateFormat(format) {};\n\nif (process.env.NODE_ENV !== 'production') {\n  validateFormat = function validateFormat(format) {\n    if (format === undefined) {\n      throw new Error('invariant requires an error message argument');\n    }\n  };\n}\n\nfunction invariant(condition, format, a, b, c, d, e, f) {\n  validateFormat(format);\n\n  if (!condition) {\n    var error;\n    if (format === undefined) {\n      error = new Error('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');\n    } else {\n      var args = [a, b, c, d, e, f];\n      var argIndex = 0;\n      error = new Error(format.replace(/%s/g, function () {\n        return args[argIndex++];\n      }));\n      error.name = 'Invariant Violation';\n    }\n\n    error.framesToPop = 1; // we don't care about invariant's own frame\n    throw error;\n  }\n}\n\nmodule.exports = invariant;"
        },
        {
          "id": 16,
          "identifier": "/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/prop-types/lib/ReactPropTypesSecret.js",
          "name": "./node_modules/prop-types/lib/ReactPropTypesSecret.js",
          "index": 11,
          "index2": 6,
          "size": 314,
          "cacheable": true,
          "built": true,
          "optional": false,
          "prefetched": false,
          "chunks": [
            0
          ],
          "assets": [],
          "issuer": "/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/prop-types/factoryWithThrowingShims.js",
          "issuerId": 13,
          "issuerName": "./node_modules/prop-types/factoryWithThrowingShims.js",
          "failed": false,
          "errors": 0,
          "warnings": 0,
          "reasons": [
            {
              "moduleId": 13,
              "moduleIdentifier": "/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/prop-types/factoryWithThrowingShims.js",
              "module": "./node_modules/prop-types/factoryWithThrowingShims.js",
              "moduleName": "./node_modules/prop-types/factoryWithThrowingShims.js",
              "type": "cjs require",
              "userRequest": "./lib/ReactPropTypesSecret",
              "loc": "12:27-64"
            }
          ],
          "usedExports": true,
          "providedExports": null,
          "optimizationBailout": [],
          "depth": 5,
          "source": "/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\nvar ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';\n\nmodule.exports = ReactPropTypesSecret;\n"
        },
        {
          "id": 17,
          "identifier": "/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/cache-loader/dist/cjs.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/babel-loader/lib/index.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/lib/helpers/mixin.js",
          "name": "./lib/helpers/mixin.js",
          "index": 14,
          "index2": 11,
          "size": 4441,
          "cacheable": true,
          "built": true,
          "optional": false,
          "prefetched": false,
          "chunks": [
            0
          ],
          "assets": [],
          "issuer": "/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/cache-loader/dist/cjs.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/babel-loader/lib/index.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/lib/datagrid.js",
          "issuerId": 12,
          "issuerName": "./lib/datagrid.js",
          "failed": false,
          "errors": 0,
          "warnings": 0,
          "reasons": [
            {
              "moduleId": 12,
              "moduleIdentifier": "/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/cache-loader/dist/cjs.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/babel-loader/lib/index.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/lib/datagrid.js",
              "module": "./lib/datagrid.js",
              "moduleName": "./lib/datagrid.js",
              "type": "cjs require",
              "userRequest": "./helpers/mixin",
              "loc": "43:10-36"
            }
          ],
          "usedExports": true,
          "providedExports": null,
          "optimizationBailout": [],
          "depth": 3,
          "source": "\"use strict\";\n\n(function () {\n  var _, mixin;\n\n  _ = require('underscore');\n\n  /*\n    Extends a class with another class.  Klass is the main class and mixinKlass methods and attributes will\n    be added to klass and function as full members of that class.\n  \n    In the context of a mixinKlass method,\n      - @ will reference the instance of klass\n      - @originalMethod() will always call method replaced by the mixinKlass method\n      - mixinKlass attributes will replace attributes in klass\n  \n    @originalMethod()\n      - is a special method that only exists in the context of a mixinKlass method call\n      - should reference either the previous mixin that replaced this method or the klass method replaced\n      - may be undefined.  if no previous mixin or the klass did not define the mixinKlass method,\n        then @originalMethod should be null or undefined.  If you are unsure if the class being mixed into\n        will define the mixin method, use the   @originalMethod?(arguments)   pattern (note existensial op)\n  \n    see,  app/coffeescripts/tests/application/mixin.coffee for examples and expected behaviors.\n  \n    IMPORTANT NOTES:\n  \n      Mixin constructor methods override contructor methods in class being mixed into.  Mixins that extend\n      other classes get a hidden constructor.  Make sure @originalMethod? is called with the original constructor\n      args.   See models/mixins/stylesMetadata.coffee\n  \n      mixin() <b>must be called last</b> in the class definition or after class is defined such that any overridden\n        methods have already been defined.\n  \n      Parameter passing.  For flexibility, plugins will often pass along arguments to @originalMethod.  If your\n        mixin method doesn't specifically require a fixed set of parameters or doesn't care about parameters,\n        you should call original method like so:\n        <pre>\n                    @originalMethod?.apply(@, arguments)\n        </pre>\n        This will make your mixin more flexible and able to survive changes to the underlying instance method\n        argument specification.\n  \n    example:\n  \n        class MyMixin\n          someMethod: () =>\n            @originalMethod()\n             * ... do something more useful\n  \n        class MyClass\n          someMethod: () =>\n             * do something useful\n  \n          mixin @, MyMixin     #  this needs to be last\n   */\n\n  module.exports = mixin = function mixin(klass, mixinKlass) {\n    var base, base1, base2, key, mixinKlassName, oMethod, oMethodKey, ref, results, val, wrapperDef, wrapperName;\n    if (!mixinKlass) {\n      console.trace();\n      throw \"Dev: Mixin class undefined. Make sure you are correctly requiring file.\";\n    }\n    if (klass === window || klass === document) {\n      throw \"Dev: The class being mixed into should not be window or document. <p>Look closely at the indentation of 'mixin(@, ... )' callsite.  If using '@' for first parameter it must be at the same indentation as the instance method definitions in the class at the very end of the class definition.</p>\";\n    }\n    mixinKlassName = mixinKlass.toString().match(/^\\s*function\\s*([^\\(]*)/)[1] || \"unknown\";\n    ref = mixinKlass.prototype;\n    results = [];\n    for (key in ref) {\n      val = ref[key];\n      if (key === 'constructor') {\n        continue;\n      }\n      if (_.isFunction(val) && (_.isEmpty(_.keys(val)) || key === 'constructor')) {\n        oMethod = klass.prototype[key];\n        oMethodKey = mixinKlassName + \"_\" + key;\n        (base = klass.prototype).__originalMethods || (base.__originalMethods = {});\n        klass.prototype.__originalMethods[oMethodKey] = oMethod;\n        (base1 = klass.prototype).__mixinMethods || (base1.__mixinMethods = {});\n        klass.prototype.__mixinMethods[oMethodKey] = val;\n        (base2 = klass.prototype).__originalMethodStack || (base2.__originalMethodStack = []);\n        wrapperName = oMethodKey + \"__wrapperFn\";\n        wrapperDef = \"klass.prototype[key] = function() {\\n  this.__originalMethodStack.push(this.originalMethod)\\n  this.originalMethod = this.__originalMethods['\" + oMethodKey + \"']\\n  returnValue = this.__mixinMethods['\" + oMethodKey + \"'].apply(this, arguments)\\n  this.originalMethod = this.__originalMethodStack.pop()\\n  return returnValue\\n}\";\n        results.push(eval(wrapperDef));\n      } else {\n        results.push(klass.prototype[key] = val);\n      }\n    }\n    return results;\n  };\n}).call(undefined);"
        },
        {
          "id": 18,
          "identifier": "/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/cache-loader/dist/cjs.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/babel-loader/lib/index.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/lib/helpers/deepSet.js",
          "name": "./lib/helpers/deepSet.js",
          "index": 16,
          "index2": 12,
          "size": 1209,
          "cacheable": true,
          "built": true,
          "optional": false,
          "prefetched": false,
          "chunks": [
            0
          ],
          "assets": [],
          "issuer": "/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/cache-loader/dist/cjs.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/babel-loader/lib/index.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/lib/helpers/reactStyles.js",
          "issuerId": 6,
          "issuerName": "./lib/helpers/reactStyles.js",
          "failed": false,
          "errors": 0,
          "warnings": 0,
          "reasons": [
            {
              "moduleId": 6,
              "moduleIdentifier": "/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/cache-loader/dist/cjs.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/babel-loader/lib/index.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/lib/helpers/reactStyles.js",
              "module": "./lib/helpers/reactStyles.js",
              "moduleName": "./lib/helpers/reactStyles.js",
              "type": "cjs require",
              "userRequest": "./deepSet",
              "loc": "11:12-32"
            }
          ],
          "usedExports": true,
          "providedExports": null,
          "optimizationBailout": [],
          "depth": 4,
          "source": "'use strict';\n\n(function () {\n  var _, deepSet;\n\n  _ = require('underscore');\n\n  /*\n  Performs a deep set on the the value of a attribute deeply nested within this object\n  \n  See deepGet comments above for example use.  anything that can get fetched\n  with deepGet should be able to be set by deepSet\n  \n  see also /app/coffeescripts/tests/application/utils/deepGetAndSet.coffee for more examples and tests\n   */\n\n  module.exports = deepSet = function deepSet(object, pathToAttribute, value, isFunctional) {\n    var current, i, lastPart, len, part, parts;\n    if (isFunctional == null) {\n      isFunctional = true;\n    }\n    current = object;\n    parts = pathToAttribute.split('.');\n    lastPart = _.last(parts);\n    for (i = 0, len = parts.length; i < len; i++) {\n      part = parts[i];\n      if (part === lastPart) {\n        if (isFunctional && _.isFunction(current[part])) {\n          return current[part](value);\n        } else {\n          return current[part] = value;\n        }\n      }\n      if (current[part] == null) {\n        current[part] = {};\n      }\n      current = isFunctional && _.isFunction(current[part]) ? current[part]() : current[part];\n    }\n    return current;\n  };\n}).call(undefined);"
        },
        {
          "id": 19,
          "identifier": "/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/cache-loader/dist/cjs.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/babel-loader/lib/index.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/lib/cellWrapper.js",
          "name": "./lib/cellWrapper.js",
          "index": 17,
          "index2": 16,
          "size": 7672,
          "cacheable": true,
          "built": true,
          "optional": false,
          "prefetched": false,
          "chunks": [
            0
          ],
          "assets": [],
          "issuer": "/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/cache-loader/dist/cjs.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/babel-loader/lib/index.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/lib/datagrid.js",
          "issuerId": 12,
          "issuerName": "./lib/datagrid.js",
          "failed": false,
          "errors": 0,
          "warnings": 0,
          "reasons": [
            {
              "moduleId": 12,
              "moduleIdentifier": "/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/cache-loader/dist/cjs.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/babel-loader/lib/index.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/lib/datagrid.js",
              "module": "./lib/datagrid.js",
              "moduleName": "./lib/datagrid.js",
              "type": "cjs require",
              "userRequest": "./cellWrapper",
              "loc": "47:16-40"
            }
          ],
          "usedExports": true,
          "providedExports": null,
          "optimizationBailout": [],
          "depth": 3,
          "source": "'use strict';\n\n(function () {\n  var $,\n      Cell,\n      CellWrapper,\n      Classnames,\n      PropTypes,\n      React,\n      ReactDOM,\n      _,\n      bind = function bind(fn, me) {\n    return function () {\n      return fn.apply(me, arguments);\n    };\n  },\n      extend = function extend(child, parent) {\n    for (var key in parent) {\n      if (hasProp.call(parent, key)) child[key] = parent[key];\n    }function ctor() {\n      this.constructor = child;\n    }ctor.prototype = parent.prototype;child.prototype = new ctor();child.__super__ = parent.prototype;return child;\n  },\n      hasProp = {}.hasOwnProperty;\n\n  React = require('react');\n\n  ReactDOM = require('react-dom');\n\n  PropTypes = require('prop-types');\n\n  Classnames = require('classnames');\n\n  $ = require('jquery');\n\n  _ = require('underscore');\n\n  Cell = require('./cell');\n\n  module.exports = CellWrapper = function (superClass) {\n    extend(CellWrapper, superClass);\n\n    function CellWrapper() {\n      this._onArrowDown = bind(this._onArrowDown, this);\n      this._onArrowUp = bind(this._onArrowUp, this);\n      this._onArrowLeft = bind(this._onArrowLeft, this);\n      this._onArrowRight = bind(this._onArrowRight, this);\n      this._onCellEdit = bind(this._onCellEdit, this);\n      this._onCellKeydown = bind(this._onCellKeydown, this);\n      this._onCellBlur = bind(this._onCellBlur, this);\n      this._onCellFocus = bind(this._onCellFocus, this);\n      return CellWrapper.__super__.constructor.apply(this, arguments);\n    }\n\n    CellWrapper.props = {\n      model: React.PropTypes.any,\n      column: React.PropTypes.object,\n      rowIdx: React.PropTypes.number,\n      colIdx: React.PropTypes.number,\n      datagrid: React.PropTypes.any,\n      defaultCellComponent: React.PropTypes.any,\n      defaultCellStyle: React.PropTypes.object\n    };\n\n    CellWrapper.defaultProps = {\n      defaultCellComponent: Cell\n    };\n\n    CellWrapper.prototype.componentWillMount = function () {\n      return this.setState({\n        editing: false,\n        selected: false\n      });\n    };\n\n    CellWrapper.prototype.render = function () {\n      var CellComponent, classNames, dataProps, ref;\n      CellComponent = (ref = this.props.column.cellComponent) != null ? ref : this.props.defaultCellComponent;\n      dataProps = {\n        'data-row': this.props.rowIdx,\n        'data-col': this.props.colIdx\n      };\n      classNames = Classnames('rdd-cell-wrapper', {\n        selected: this.isSelected()\n      });\n      return React.createElement(\"div\", Object.assign({\n        \"className\": classNames,\n        \"tabIndex\": 1.,\n        \"onKeyDown\": this._onCellKeydown,\n        \"onFocus\": this._onCellFocus,\n        \"onBlur\": this._onCellBlur,\n        \"onDoubleClick\": this._onCellEdit\n      }, dataProps), React.createElement(CellComponent, {\n        \"editing\": this.state.editing,\n        \"rowData\": this.props.model,\n        \"rowIdx\": this.props.rowIdx,\n        \"column\": this.props.column,\n        \"datagrid\": this.props.datagrid,\n        \"defaultCellStyle\": this.props.defaultCellStyle,\n        \"ref\": 'cellComponent',\n        \"onEdit\": this._onCellEdit\n      }));\n    };\n\n    CellWrapper.prototype.edit = function () {\n      var ref;\n      if (!((ref = this.props.datagrid) != null ? typeof ref.canEditCell === \"function\" ? ref.canEditCell(this.props.column, this.props.model) : void 0 : void 0)) {\n        return;\n      }\n      return this.setState({\n        editing: true\n      });\n    };\n\n    CellWrapper.prototype.focus = function () {\n      return ReactDOM.findDOMNode(this).focus();\n    };\n\n    CellWrapper.prototype.isSelected = function () {\n      var ref;\n      return (ref = this.props.datagrid) != null ? typeof ref.isCellSelected === \"function\" ? ref.isCellSelected(this.props.rowIdx, this.props.column.key) : void 0 : void 0;\n    };\n\n    CellWrapper.prototype._onCellFocus = function (evt) {\n      return this.setState({\n        selected: true\n      });\n    };\n\n    CellWrapper.prototype._onCellBlur = function (evt) {\n      return _.defer(function (_this) {\n        return function () {\n          if (!$.contains(ReactDOM.findDOMNode(_this), document.activeElement)) {\n            return _this.setState({\n              selected: false,\n              editing: false\n            });\n          }\n        };\n      }(this));\n    };\n\n    CellWrapper.prototype._onCellKeydown = function (evt) {\n      var newCell;\n      switch (evt.key) {\n        case 'Enter':\n          if (this.state.editing) {\n            this._save();\n            newCell = evt.shiftKey ? this._focusUp() : this._focusDown();\n            return newCell.find('i.fa-pencil').trigger('click');\n          } else {\n            return this.edit();\n          }\n          break;\n        case 'Tab':\n          evt.preventDefault();\n          newCell = evt.shiftKey ? this._focusLeft() : this._focusRight();\n          if (this.state.editing) {\n            this._save();\n            return _.defer(function (_this) {\n              return function () {\n                return newCell.find('.rdd-icon-edit').trigger('click');\n              };\n            }(this));\n          }\n          break;\n        case 'Escape':\n          return this._cancel();\n        case 'ArrowRight':\n          return this._onArrowRight(evt);\n        case 'ArrowLeft':\n          return this._onArrowLeft(evt);\n        case 'ArrowUp':\n          return this._onArrowUp(evt);\n        case 'ArrowDown':\n          return this._onArrowDown(evt);\n      }\n    };\n\n    CellWrapper.prototype._onCellEdit = function () {\n      return this.edit();\n    };\n\n    CellWrapper.prototype._onArrowRight = function (evt) {\n      evt.preventDefault();\n      return this._focusRight();\n    };\n\n    CellWrapper.prototype._onArrowLeft = function (evt) {\n      evt.preventDefault();\n      return this._focusLeft();\n    };\n\n    CellWrapper.prototype._onArrowUp = function (evt) {\n      evt.preventDefault();\n      return this._focusUp();\n    };\n\n    CellWrapper.prototype._onArrowDown = function (evt) {\n      evt.preventDefault();\n      return this._focusDown();\n    };\n\n    /*\n      rowEvt from react-data-grid looks like this:\n      {  \n        cellKey: \"costing.wholesaleCost.amount\"\n        key: \"Enter\"\n        rowIdx: 0\n        updated: \"24\"\n      }\n      datagrid ignores .key\n     */\n\n    CellWrapper.prototype._save = function () {\n      var rowEvt;\n      rowEvt = {\n        cellKey: this.props.column.key,\n        key: \"Other\",\n        rowIdx: this.props.rowIdx,\n        updated: this.refs.cellComponent.getValue()\n      };\n      this.props.datagrid.saveModel(this.props.model, rowEvt);\n      return this.setState({\n        editing: false\n      });\n    };\n\n    CellWrapper.prototype._cancel = function () {\n      this.setState({\n        editing: false\n      });\n      return _.defer(function (_this) {\n        return function () {\n          return _this.focus();\n        };\n      }(this));\n    };\n\n    CellWrapper.prototype._focusRight = function () {\n      return this._focusOffset(0, 1);\n    };\n\n    CellWrapper.prototype._focusLeft = function () {\n      return this._focusOffset(0, -1);\n    };\n\n    CellWrapper.prototype._focusUp = function () {\n      return this._focusOffset(-1, 0);\n    };\n\n    CellWrapper.prototype._focusDown = function () {\n      return this._focusOffset(1, 0);\n    };\n\n    CellWrapper.prototype._focusOffset = function (colOffset, rowOffset) {\n      var colIdx, rowIdx;\n      colIdx = this.props.colIdx + colOffset;\n      rowIdx = this.props.rowIdx + rowOffset;\n      return $(React.findDOMNode(this.props.datagrid)).find(\".rdd-cell-wrapper[data-row=\" + rowIdx + \"][data-col=\" + colIdx + \"]\").focus();\n    };\n\n    return CellWrapper;\n  }(React.Component);\n}).call(undefined);"
        },
        {
          "id": 20,
          "identifier": "/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/cache-loader/dist/cjs.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/babel-loader/lib/index.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/lib/labelCell.js",
          "name": "./lib/labelCell.js",
          "index": 20,
          "index2": 18,
          "size": 5443,
          "cacheable": true,
          "built": true,
          "optional": false,
          "prefetched": false,
          "chunks": [
            0
          ],
          "assets": [],
          "issuer": "/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/cache-loader/dist/cjs.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/babel-loader/lib/index.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/lib/datagrid.js",
          "issuerId": 12,
          "issuerName": "./lib/datagrid.js",
          "failed": false,
          "errors": 0,
          "warnings": 0,
          "reasons": [
            {
              "moduleId": 12,
              "moduleIdentifier": "/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/cache-loader/dist/cjs.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/babel-loader/lib/index.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/lib/datagrid.js",
              "module": "./lib/datagrid.js",
              "moduleName": "./lib/datagrid.js",
              "type": "cjs require",
              "userRequest": "./labelCell",
              "loc": "49:14-36"
            }
          ],
          "usedExports": true,
          "providedExports": null,
          "optimizationBailout": [],
          "depth": 3,
          "source": "'use strict';\n\n(function () {\n  var Cell,\n      LabelCell,\n      PropTypes,\n      Rb,\n      React,\n      ReactStyles,\n      bind = function bind(fn, me) {\n    return function () {\n      return fn.apply(me, arguments);\n    };\n  },\n      extend = function extend(child, parent) {\n    for (var key in parent) {\n      if (hasProp.call(parent, key)) child[key] = parent[key];\n    }function ctor() {\n      this.constructor = child;\n    }ctor.prototype = parent.prototype;child.prototype = new ctor();child.__super__ = parent.prototype;return child;\n  },\n      hasProp = {}.hasOwnProperty;\n\n  React = require('react');\n\n  PropTypes = require('prop-types');\n\n  Rb = require('react-bootstrap');\n\n  ReactStyles = require('./helpers/reactStyles');\n\n  Cell = require('./cell');\n\n  module.exports = LabelCell = function (superClass) {\n    extend(LabelCell, superClass);\n\n    function LabelCell() {\n      this._onHideIconClick = bind(this._onHideIconClick, this);\n      this._onShowIconClick = bind(this._onShowIconClick, this);\n      return LabelCell.__super__.constructor.apply(this, arguments);\n    }\n\n    LabelCell.propTypes = {\n      rowData: PropTypes.any,\n      column: PropTypes.object,\n      onHideColumn: PropTypes.func,\n      onShowColumn: PropTypes.func\n    };\n\n    LabelCell.prototype.styles = new ReactStyles({\n      icon: {\n        float: 'right',\n        color: '#4767AA'\n      },\n      wrapper: {\n        position: 'relative',\n        paddingLeft: 18\n      },\n      showHideIcon: {\n        position: 'absolute',\n        left: -5,\n        top: 0,\n        fontSize: 17,\n        color: '#4767AA'\n      },\n      showIcon: {\n        includes: 'showHideIcon',\n        left: 2,\n        top: 1\n      },\n      banIcon: {\n        includes: 'showHideIcon',\n        color: '#DE8387',\n        top: 1,\n        left: 1,\n        fontSize: 21\n      }\n    });\n\n    LabelCell.prototype.style = function (name) {\n      var ref;\n      return _.extend({}, this.styles.get(this, name), ((ref = this.props.styles) != null ? ref[name] : void 0) || {});\n    };\n\n    LabelCell.prototype.renderWrapped = function () {\n      var ref, ref1;\n      if (!((ref = this.props.column) != null ? ref.tooltip : void 0)) {\n        return LabelCell.__super__.renderWrapped.call(this, React.createElement(\"div\", {\n          \"style\": this.style('wrapper')\n        }, this._renderShowHideControl(), (ref1 = this.props.column) != null ? ref1.name : void 0));\n      }\n      return LabelCell.__super__.renderWrapped.call(this, React.createElement(\"div\", {\n        \"style\": this.style('wrapper')\n      }, React.createElement(Rb.OverlayTrigger, {\n        \"overlay\": this._renderTooltipPopover()\n      }, React.createElement(\"div\", null, this._renderShowHideControl(), this.props.column.name, React.createElement(\"i\", {\n        \"style\": this.style('icon'),\n        \"className\": 'fa fa-question-circle'\n      })))));\n    };\n\n    LabelCell.prototype._renderTooltipPopover = function () {\n      return React.createElement(Rb.Popover, {\n        \"id\": \"flipgridTooltipPopover\"\n      }, this.props.column.tooltip);\n    };\n\n    LabelCell.prototype._renderShowHideControl = function () {\n      if (!this.props.column.canHide) {\n        return null;\n      }\n      if (this.props.column.isHidden) {\n        return React.createElement(\"i\", {\n          \"className\": 'fa fa-eye',\n          \"style\": this.style('showHideIcon'),\n          \"title\": 'Click to show this attribute when \"Mine\" attributes selected',\n          \"onClick\": this._onShowIconClick\n        });\n      } else {\n        return React.createElement(\"span\", {\n          \"class\": \"fa-stack\",\n          \"title\": 'Click to hide this attribute when \"Mine\" attributes selected',\n          \"onClick\": this._onHideIconClick,\n          \"style\": this.style('showHideIcon')\n        }, React.createElement(\"i\", {\n          \"className\": \"fa fa-eye fa-stack-1x\",\n          \"style\": this.style('showIcon')\n        }), React.createElement(\"i\", {\n          \"className\": \"fa fa-ban fa-stack-2x\",\n          \"style\": this.style('banIcon')\n        }));\n      }\n    };\n\n    LabelCell.prototype.getCellDefaultStyle = function (model) {\n      var styles;\n      styles = _.defaults(LabelCell.__super__.getCellDefaultStyle.call(this, model), {\n        verticalAlign: 'middle',\n        textAlign: 'left',\n        paddingLeft: 10\n      });\n      _.extend(styles, {\n        borderRight: \"solid 1px #FFFFFF\",\n        borderBottom: \"solid 1px #FFFFFF\"\n      });\n      if (this.props.column.isHidden) {\n        styles.color = 'rgba(0, 0, 0, 0.16)';\n      }\n      return styles;\n    };\n\n    LabelCell.prototype.getBackgroundColor = function () {\n      return '#eceff6';\n    };\n\n    LabelCell.prototype._onShowIconClick = function (evt) {\n      this.props.column.isHidden = false;\n      return this.forceUpdate(function (_this) {\n        return function () {\n          var base;\n          return typeof (base = _this.props).onShowColumn === \"function\" ? base.onShowColumn(_this, _this.props.column, evt) : void 0;\n        };\n      }(this));\n    };\n\n    LabelCell.prototype._onHideIconClick = function (evt) {\n      this.props.column.isHidden = true;\n      return this.forceUpdate(function (_this) {\n        return function () {\n          var base;\n          return typeof (base = _this.props).onHideColumn === \"function\" ? base.onHideColumn(_this, _this.props.column, evt) : void 0;\n        };\n      }(this));\n    };\n\n    return LabelCell;\n  }(Cell);\n}).call(undefined);"
        },
        {
          "id": 21,
          "identifier": "external {\"root\":\"ReactBootstrap\",\"commonjs2\":\"react-bootstrap\",\"commonjs\":\"react-bootstrap\",\"amd\":\"react-bootstrap\"}",
          "name": "external {\"root\":\"ReactBootstrap\",\"commonjs2\":\"react-bootstrap\",\"commonjs\":\"react-bootstrap\",\"amd\":\"react-bootstrap\"}",
          "index": 21,
          "index2": 17,
          "size": 42,
          "cacheable": false,
          "built": false,
          "optional": false,
          "prefetched": false,
          "chunks": [
            0
          ],
          "assets": [],
          "issuer": "/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/cache-loader/dist/cjs.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/babel-loader/lib/index.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/lib/labelCell.js",
          "issuerId": 20,
          "issuerName": "./lib/labelCell.js",
          "failed": false,
          "errors": 0,
          "warnings": 0,
          "reasons": [
            {
              "moduleId": 20,
              "moduleIdentifier": "/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/cache-loader/dist/cjs.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/babel-loader/lib/index.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/lib/labelCell.js",
              "module": "./lib/labelCell.js",
              "moduleName": "./lib/labelCell.js",
              "type": "cjs require",
              "userRequest": "react-bootstrap",
              "loc": "28:7-33"
            }
          ],
          "usedExports": true,
          "providedExports": null,
          "optimizationBailout": [],
          "depth": 4
        },
        {
          "id": 22,
          "identifier": "/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/cache-loader/dist/cjs.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/babel-loader/lib/index.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/lib/gridEdit.js",
          "name": "./lib/gridEdit.js",
          "index": 22,
          "index2": 20,
          "size": 13040,
          "cacheable": true,
          "built": true,
          "optional": false,
          "prefetched": false,
          "chunks": [
            0
          ],
          "assets": [],
          "issuer": "/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/cache-loader/dist/cjs.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/babel-loader/lib/index.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/lib/datagrid.js",
          "issuerId": 12,
          "issuerName": "./lib/datagrid.js",
          "failed": false,
          "errors": 0,
          "warnings": 0,
          "reasons": [
            {
              "moduleId": 12,
              "moduleIdentifier": "/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/cache-loader/dist/cjs.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/babel-loader/lib/index.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/lib/datagrid.js",
              "module": "./lib/datagrid.js",
              "moduleName": "./lib/datagrid.js",
              "type": "cjs require",
              "userRequest": "./gridEdit",
              "loc": "51:13-34"
            }
          ],
          "usedExports": true,
          "providedExports": null,
          "optimizationBailout": [],
          "depth": 3,
          "source": "'use strict';\n\n(function () {\n  var $,\n      DeepGet,\n      GridEdit,\n      _,\n      bind = function bind(fn, me) {\n    return function () {\n      return fn.apply(me, arguments);\n    };\n  };\n\n  _ = require('underscore');\n\n  $ = require('jquery');\n\n  DeepGet = require('./helpers/deepGet');\n\n  /*\n   */\n\n  module.exports = GridEdit = function () {\n    function GridEdit() {\n      this.onModelSaveComplete = bind(this.onModelSaveComplete, this);\n      this.onModelSaveError = bind(this.onModelSaveError, this);\n      this.onModelSaveSuccess = bind(this.onModelSaveSuccess, this);\n    }\n\n    GridEdit.prototype.getCollection = function () {\n      var ref, ref1, ref2, ref3, ref4;\n      if (this.originalMethod != null) {\n        return this.originalMethod();\n      }\n      return (ref = (ref1 = (ref2 = (ref3 = this.state) != null ? ref3.collection : void 0) != null ? ref2 : this.props.collection) != null ? ref1 : (ref4 = this.context) != null ? ref4.collection : void 0) != null ? ref : this.collection;\n    };\n\n    /*\n      returns columns with a defaulted name, formatter, header component\n     */\n\n    GridEdit.prototype.getColumns = function (columns) {\n      var ref, ref1, ref2;\n      if (columns == null) {\n        columns = null;\n      }\n      if (this.originalMethod != null) {\n        return this.originalMethod(columns);\n      }\n      return (ref = (ref1 = columns != null ? columns : (ref2 = this.state) != null ? ref2.columns : void 0) != null ? ref1 : this.props.columns) != null ? ref : this.columns;\n    };\n\n    /*\n      returns a column by key or index\n     */\n\n    GridEdit.prototype.getColumn = function (keyOrIndex) {\n      var columns;\n      if (this.originalMethod != null) {\n        return this.originalMethod();\n      }\n      columns = this.getColumns();\n      if (_.isString(keyOrIndex)) {\n        return _.find(this.getColumns(), function (c) {\n          return c.key === keyOrIndex;\n        });\n      } else {\n        return columns[keyOrIndex];\n      }\n    };\n\n    GridEdit.prototype.getModelAt = function (index) {\n      var collection;\n      collection = this.getCollection();\n      switch (false) {\n        case !(collection == null):\n          return null;\n        case collection.getItem == null:\n          return collection.getItem(index);\n        case collection.at == null:\n          return collection.at(index);\n        default:\n          return collection[index];\n      }\n    };\n\n    GridEdit.prototype.getValueFromModel = function (model, attr) {\n      var ref;\n      return (ref = typeof model.get === \"function\" ? model.get(attr) : void 0) != null ? ref : model[attr];\n    };\n\n    GridEdit.prototype.getValueAt = function (rowIndex, colIndexOrKey) {\n      var columnKey, datum, model, ref;\n      ref = this.getModelColumnKeyAt(rowIndex, colIndexOrKey), model = ref[0], columnKey = ref[1], datum = ref[2];\n      if (!(model != null && columnKey != null)) {\n        return null;\n      }\n      return this.getValueFromModel(model, columnKey);\n    };\n\n    /*\n      returns the value to export to csv. Also used by gridSelect mixin for value to copy to clipboard\n    \n      NOTE that getExportValue is also used by copy/paste to get the value to copy to clipboard.\n        you can use csvExportAttribute on the column to export a different attribute only when \n        exporting to CSV\n     */\n\n    GridEdit.prototype.getExportValue = function (model, column, options) {\n      var value;\n      if (options == null) {\n        options = {};\n      }\n      options = _.defaults(options, {\n        forCsv: false\n      });\n      value = null;\n      if (column.exportFunction != null) {\n        value = column.exportFunction(model, column, this, options);\n      } else if (options.forCsv && column.csvExportAttribute) {\n        value = this.getValueFromModel(model, column.csvExportAttribute);\n      } else if (column.exportAttribute != null) {\n        value = this.getValueFromModel(model, column.exportAttribute);\n      } else {\n        value = this.getValueFromModel(model, column.key);\n      }\n      if (options.forCsv && _.isArray(value)) {\n        value = _.uniq(_.compact(value)).join(', ');\n      } else if (_.isArray(value) || _.isObject(value)) {\n        value = JSON.stringify(value);\n      }\n      if (_.isString(value) && options.forCsv) {\n        value = value.replace(/\\\"/g, '\"\"');\n      }\n      return value;\n    };\n\n    GridEdit.prototype.getModelColumnKeyAt = function (rowIndex, colIndexOrKey) {\n      var columnKey, model, ref, ref1;\n      model = this.getModelAt(rowIndex);\n      columnKey = _.isNumber(colIndexOrKey) ? (ref = this.getColumns()) != null ? (ref1 = ref[colIndexOrKey]) != null ? ref1.key : void 0 : void 0 : colIndexOrKey;\n      return [model, columnKey];\n    };\n\n    GridEdit.prototype.setValueOnModel = function (model, columnKey, value, saveOptions) {\n      var attr, column, result;\n      attr = columnKey;\n      column = this.getColumn(columnKey);\n      if (!(column != null && this.validateCell(model, column, value, saveOptions))) {\n        return false;\n      }\n      result = _.isFunction(model.set) ? model.set(attr, value) : model[attr] = value;\n      return result;\n    };\n\n    GridEdit.prototype.setValueAt = function (rowIndex, colIndexOrKey, value) {\n      var columnKey, model, ref;\n      ref = this.getModelColumnKeyAt(rowIndex, colIndexOrKey), model = ref[0], columnKey = ref[1];\n      if (!(model != null && columnKey != null)) {\n        return null;\n      }\n      return this.setValueOnModel(model, columnKey);\n    };\n\n    GridEdit.prototype.validateCell = function (model, column, value, saveOptions) {\n      var i, len, ref, ref1, validation, validationErrors, validationResult;\n      validationErrors = [];\n      ref1 = (ref = column.validations) != null ? ref : [];\n      for (i = 0, len = ref1.length; i < len; i++) {\n        validation = ref1[i];\n        validationResult = validation.apply(this, [model, column, value]);\n        if (validationResult !== true) {\n          validationErrors.push(validationResult);\n        }\n      }\n      if (validationErrors.length > 0) {\n        this.onModelSaveError(model, validationErrors, saveOptions);\n        return false;\n      }\n      return true;\n    };\n\n    /*\n      returns the options used when saving a backbone model\n     */\n\n    GridEdit.prototype.getModelSaveOptions = function () {\n      return {\n        success: function (_this) {\n          return function () {\n            return _this.onModelSaveSuccess.apply(_this, arguments);\n          };\n        }(this),\n        error: function (_this) {\n          return function () {\n            return _this.onModelSaveError.apply(_this, arguments);\n          };\n        }(this)\n      };\n    };\n\n    /*\n    This method will log a batch of actions, relying on\n    debounce to ensure the actions are collected properly.\n     */\n\n    GridEdit.prototype._logUndo = function (model, rowEvt, options) {\n      if (options == null) {\n        options = {};\n      }\n      if (!this.props.enableUndo) {\n        return;\n      }\n      this.undo[this.undoIndex++] = this.constructor._batchUndoRequests;\n      return this.constructor._batchUndoRequests = [];\n    };\n\n    GridEdit.prototype.resetUndo = function () {\n      delete this.undo;\n      this.undo = {};\n      return this.undoIndex = 0;\n    };\n\n    /*\n    This method will iterate over the properties of the @undo object\n    and find the top-most item. Each property is an array of actions that\n    occured within the same \"batch\" or \"bucket\". Once it finds the most recent\n    batch, it will revert the operation by calling @saveModel.\n     */\n\n    GridEdit.prototype.doUndo = function () {\n      var bucketKey, i, keys, len, operation, operations;\n      keys = _.keys(this.undo);\n      if (keys.length === 0) {\n        return;\n      }\n      bucketKey = _.last(keys);\n      operations = this.undo[bucketKey];\n      for (i = 0, len = operations.length; i < len; i++) {\n        operation = operations[i];\n        this.clearCellErrors(operation.model, operation.attr);\n        $.extend(true, operation.model.attributes, operation.revPatch);\n        this.saveModel(operation.model, operation.rowEvt, {\n          logUndo: false,\n          setOnUpdate: false\n        });\n      }\n      return delete this.undo[bucketKey];\n    };\n\n    GridEdit.prototype.logUndoDebounced = _.debounce(GridEdit.prototype._logUndo, GridEdit.LOG_UNDO_DEBOUNCE);\n\n    /*\n      rowEvt from react-data-grid looks like this:\n      {  \n        cellKey: \"costing.wholesaleCost.amount\"\n        key: \"Enter\"\n        rowIdx: 0\n        updated: \"24\"\n      }\n     */\n\n    GridEdit.prototype.saveModel = function (model, rowEvt, options) {\n      var attr, base, isDirty, newValue, oldValue, ref, ref1, revPatch, saveOptions;\n      if (options == null) {\n        options = {};\n      }\n      options = _.defaults(options, {\n        logUndo: this.props.enableUndo,\n        setOnUpdate: true\n      });\n      attr = (ref = rowEvt.attribute) != null ? ref : rowEvt.cellKey;\n      oldValue = DeepGet(model._lastSyncAttributes, attr);\n      newValue = ((ref1 = rowEvt.updated) != null ? ref1.toString().trim() : void 0) !== '' ? rowEvt.updated : null;\n      if (!(oldValue || newValue)) {\n        return;\n      }\n      if (oldValue === newValue) {\n        return;\n      }\n      this.clearCellErrors(model, attr);\n      saveOptions = this.getModelSaveOptions();\n      saveOptions.__datagrid_rowEvt = rowEvt;\n      if (!(this.props.setOnUpdate === false || options.setOnUpdate === false)) {\n        if (!this.setValueOnModel(model, attr, newValue, saveOptions)) {\n          return;\n        }\n      }\n      revPatch = model.getReversePatchObject();\n      if (options.logUndo !== false && oldValue !== newValue) {\n        if ((base = this.constructor)._batchUndoRequests == null) {\n          base._batchUndoRequests = [];\n        }\n        this.constructor._batchUndoRequests.push({\n          model: model,\n          attr: attr,\n          revPatch: revPatch,\n          rowEvt: rowEvt\n        });\n        this.logUndoDebounced.apply(this, arguments);\n      }\n      isDirty = _.isFunction(model.isDirty) ? model.isDirty() : true;\n      if (this.props.saveOnUpdate !== false && isDirty) {\n        this.setSaving(model, rowEvt.cellKey, true);\n        return (model.patch || model.save)({}, saveOptions);\n      }\n    };\n\n    GridEdit.prototype.clearCellErrors = function (model, columnKey) {\n      if (_.isFunction(model.setDatagridSaveErrors)) {\n        return model.setDatagridSaveErrors(columnKey, null);\n      } else {\n        if (model.__datagridSaveErrors == null) {\n          model.__datagridSaveErrors = {};\n        }\n        if (columnKey != null) {\n          return delete model.__datagridSaveErrors[columnKey];\n        } else {\n          return model.__datagridSaveErrors = {};\n        }\n      }\n    };\n\n    GridEdit.prototype.setSaveSuccess = function (model, attr, trueOrFalse) {\n      if (_.isFunction(model.setDatagridSaveSuccess)) {\n        return model.setDatagridSaveSuccess(attr, trueOrFalse);\n      } else {\n        if (model.__datagridSaveSuccess == null) {\n          model.__datagridSaveSuccess = {};\n        }\n        return model.__datagridSaveSuccess[attr] = trueOrFalse;\n      }\n    };\n\n    GridEdit.prototype.setSaveErrors = function (model, attr, resp) {\n      if (_.isFunction(model.setDatagridSaveErrors)) {\n        return model.setDatagridSaveErrors(attr, resp);\n      } else {\n        if (model.__datagridSaveErrors == null) {\n          model.__datagridSaveErrors = {};\n        }\n        return model.__datagridSaveErrors[attr] = resp;\n      }\n    };\n\n    GridEdit.prototype.setSaving = function (model, attr, trueOrFalse) {\n      if (_.isFunction(model.setDatagridSaving)) {\n        return model.setDatagridSaving(attr, trueOrFalse);\n      } else {\n        if (model.__datagridSaving == null) {\n          model.__datagridSaving = {};\n        }\n        return model.__datagridSaving[attr] = trueOrFalse;\n      }\n    };\n\n    GridEdit.prototype.onModelSaveSuccess = function (model, resp, options) {\n      var rowEvt;\n      rowEvt = options != null ? options.__datagrid_rowEvt : void 0;\n      if (rowEvt) {\n        this.setSaveSuccess(model, rowEvt.cellKey, true);\n        this.clearCellErrors(model);\n      }\n      return this.onModelSaveComplete(model, resp, options);\n    };\n\n    GridEdit.prototype.onModelSaveError = function (model, resp, options) {\n      var rowEvt;\n      if (!this.props.silentSaveErrors) {\n        throw \"Unable to save changes<br><br>\" + JSON.stringify(resp);\n      }\n      rowEvt = options != null ? options.__datagrid_rowEvt : void 0;\n      if (rowEvt != null) {\n        this.setSaveErrors(model, rowEvt.cellKey, resp);\n      }\n      return this.onModelSaveComplete(model, resp, options);\n    };\n\n    GridEdit.prototype.onModelSaveComplete = function (model, resp, options) {\n      var rowEvt;\n      rowEvt = options != null ? options.__datagrid_rowEvt : void 0;\n      if (rowEvt) {\n        return this.setSaving(model, rowEvt.cellKey, false);\n      }\n    };\n\n    return GridEdit;\n  }();\n}).call(undefined);"
        },
        {
          "id": 23,
          "identifier": "/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/cache-loader/dist/cjs.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/babel-loader/lib/index.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/lib/helpers/deepGet.js",
          "name": "./lib/helpers/deepGet.js",
          "index": 23,
          "index2": 19,
          "size": 1918,
          "cacheable": true,
          "built": true,
          "optional": false,
          "prefetched": false,
          "chunks": [
            0
          ],
          "assets": [],
          "issuer": "/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/cache-loader/dist/cjs.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/babel-loader/lib/index.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/lib/gridEdit.js",
          "issuerId": 22,
          "issuerName": "./lib/gridEdit.js",
          "failed": false,
          "errors": 0,
          "warnings": 0,
          "reasons": [
            {
              "moduleId": 22,
              "moduleIdentifier": "/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/cache-loader/dist/cjs.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/babel-loader/lib/index.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/lib/gridEdit.js",
              "module": "./lib/gridEdit.js",
              "moduleName": "./lib/gridEdit.js",
              "type": "cjs require",
              "userRequest": "./helpers/deepGet",
              "loc": "18:12-40"
            }
          ],
          "usedExports": true,
          "providedExports": null,
          "optimizationBailout": [],
          "depth": 4,
          "source": "\"use strict\";\n\n/*\n  gets the value of a nested member of an object.\n\n  example:\n  <code>\n    |  var data = {\n    |     sayulita: {\n    |       fun: true,\n    |       surf: true,\n    |       weather: {\n    |         high: 90,\n    |         low: function(){ return 70; }\n    |       }\n    |     }\n    |   }\n    |  deepGet(data, 'weather.high')   # will return 90\n  </code>\n\n  There is no limit to the depth, also functions may be employed anywhere along the path if isFunctional is not set to disabled\n  From the former example:\n  <code>\n    |  deepGet(data, 'weather.low')   # will call the function associated with 'low' which returns 70\n  </code>\n\n  see /app/coffeescripts/tests/application/utils/deepGetAndSet.coffee for more examples and tests\n */\n\n(function () {\n  var _deepGet;\n\n  module.exports = _deepGet = function deepGet(object, pathToAttribute, isFunctional) {\n    var current, i, len, part, ref, ref1;\n    if (isFunctional == null) {\n      isFunctional = true;\n    }\n    current = object;\n    ref = pathToAttribute.split('.');\n    for (i = 0, len = ref.length; i < len; i++) {\n      part = ref[i];\n      if (isFunctional && _.isFunction(current[part])) {\n        current = current[part]();\n      } else if (isFunctional && _.isFunction(current[\"get\" + part.capitalize()])) {\n        current = current[\"get\" + part.capitalize()]();\n      } else if (((ref1 = current['attributes']) != null ? ref1[part] : void 0) != null) {\n        current = current['attributes'][part];\n      } else if (_.isArray(current)) {\n        current = _.map(current, function (currentEntity) {\n          if (currentEntity != null) {\n            return _deepGet(currentEntity, part, isFunctional);\n          } else {\n            return currentEntity;\n          }\n        });\n      } else {\n        current = current[part];\n      }\n      if (current == null) {\n        break;\n      }\n    }\n    return current;\n  };\n}).call(undefined);"
        },
        {
          "id": 24,
          "identifier": "/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/cache-loader/dist/cjs.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/babel-loader/lib/index.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/lib/gridSelect.js",
          "name": "./lib/gridSelect.js",
          "index": 24,
          "index2": 23,
          "size": 24791,
          "cacheable": true,
          "built": true,
          "optional": false,
          "prefetched": false,
          "chunks": [
            0
          ],
          "assets": [],
          "issuer": "/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/cache-loader/dist/cjs.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/babel-loader/lib/index.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/lib/datagrid.js",
          "issuerId": 12,
          "issuerName": "./lib/datagrid.js",
          "failed": false,
          "errors": 0,
          "warnings": 0,
          "reasons": [
            {
              "moduleId": 12,
              "moduleIdentifier": "/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/cache-loader/dist/cjs.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/babel-loader/lib/index.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/lib/datagrid.js",
              "module": "./lib/datagrid.js",
              "moduleName": "./lib/datagrid.js",
              "type": "cjs require",
              "userRequest": "./gridSelect",
              "loc": "53:15-38"
            }
          ],
          "usedExports": true,
          "providedExports": null,
          "optimizationBailout": [],
          "depth": 3,
          "source": "'use strict';\n\n(function () {\n  var $,\n      CompareObjects,\n      CopyPasteFromExcel,\n      GridSelect,\n      ReactDOM,\n      _,\n      bind = function bind(fn, me) {\n    return function () {\n      return fn.apply(me, arguments);\n    };\n  },\n      indexOf = [].indexOf || function (item) {\n    for (var i = 0, l = this.length; i < l; i++) {\n      if (i in this && this[i] === item) return i;\n    }return -1;\n  };\n\n  ReactDOM = require('react-dom');\n\n  $ = require('jquery');\n\n  _ = require('underscore');\n\n  CopyPasteFromExcel = require('./helpers/copyPasteFromExcel');\n\n  CompareObjects = require('./helpers/compareObjects');\n\n  /*\n    These are the selection methods available on react-datum-datagrid\n    \n    @selectedCells\n      An array of objects with the following definition\n        {\n          col: string      # Defines the model attribute associated with this cell\n          rowIdx: number   # Defines the row index of the model this row represents\n          idx: number      # Defines the column index. Not probably too useful outside this mixin\n        } \n        \n    getSelectedCells() method is added to datagrid class being mixed into.  It returns an array \n      of the selected cells.  Array may be just one member -> the currently highlighted cell \n        \n    A typical use case would be to check if @selectedCells.length > 0, if so, use that.\n    Otherwise, you can use getSelectedCell() to see if the user has just focused on a specific\n    cell instead of selecting a range.  \n    \n    Addtional Props:\n      onSelectedCellsChange - called with (@selectedCells)\n   */\n\n  module.exports = GridSelect = function () {\n    function GridSelect() {\n      this.__onDocumentMouseMove = bind(this.__onDocumentMouseMove, this);\n      this.__onDocumentMouseUp = bind(this.__onDocumentMouseUp, this);\n      this.__onDocumentKeyDown = bind(this.__onDocumentKeyDown, this);\n      this.__onDocumentMouseDown = bind(this.__onDocumentMouseDown, this);\n      this.__onDocumentPaste = bind(this.__onDocumentPaste, this);\n      this.__onDocumentCopy = bind(this.__onDocumentCopy, this);\n      this.__unbindEvents = bind(this.__unbindEvents, this);\n      this.__bindEvents = bind(this.__bindEvents, this);\n      this.isCellSelected = bind(this.isCellSelected, this);\n      this.onCollectionReset = bind(this.onCollectionReset, this);\n    }\n\n    GridSelect.prototype.DOUBLE_CLICK_INTERVAL = 600;\n\n    GridSelect.prototype.copyPasteHelper = new CopyPasteFromExcel();\n\n    GridSelect.prototype.shouldEdit = false;\n\n    GridSelect.prototype.selectedCells = [];\n\n    GridSelect.prototype.modelKeyIndex = [];\n\n    GridSelect.prototype.startSelPosition = null;\n\n    GridSelect.prototype.endSelPosition = null;\n\n    GridSelect.prototype.componentDidMount = function () {\n      var ref, ref1, wrap;\n      if (typeof this.originalMethod === \"function\") {\n        this.originalMethod();\n      }\n      this.__bindEvents();\n      wrap = function (_this) {\n        return function (fn) {\n          return function () {\n            if (!_this.shouldEdit) {\n              return false;\n            }\n            return fn.apply(_this.refs.reactDataGrid, arguments);\n          };\n        };\n      }(this);\n      return (ref = this.refs.reactDataGrid) != null ? ref.canEdit = wrap((ref1 = this.refs.reactDataGrid) != null ? ref1.canEdit : void 0) : void 0;\n    };\n\n    GridSelect.prototype.componentWillUnmount = function () {\n      if (typeof this.originalMethod === \"function\") {\n        this.originalMethod();\n      }\n      return this.__unbindEvents();\n    };\n\n    GridSelect.prototype.onCollectionReset = function () {\n      this.resetSelectedCells();\n      return typeof this.originalMethod === \"function\" ? this.originalMethod() : void 0;\n    };\n\n    GridSelect.prototype.getContainerStyle = function () {\n      var ref, style;\n      style = (ref = typeof this.originalMethod === \"function\" ? this.originalMethod() : void 0) != null ? ref : this.props.style;\n      style.userSelect = 'none';\n      return style;\n    };\n\n    GridSelect.prototype._getCellsBetween = function (startRow, startCol, endRow, endCol) {\n      var cols, deltaX, deltaY, i, j, modifierX, modifierY, ref, ref1, result, rows;\n      result = [];\n      deltaX = endRow - startRow;\n      deltaY = endCol - startCol;\n      modifierX = deltaX < 0 ? -1 : 1;\n      modifierY = deltaY < 0 ? -1 : 1;\n      for (rows = i = 0, ref = Math.abs(deltaX); 0 <= ref ? i <= ref : i >= ref; rows = 0 <= ref ? ++i : --i) {\n        for (cols = j = 0, ref1 = Math.abs(deltaY); 0 <= ref1 ? j <= ref1 : j >= ref1; cols = 0 <= ref1 ? ++j : --j) {\n          result.push({\n            rowIdx: startRow + rows * modifierX,\n            col: this.modelKeyIndex[startCol + cols * modifierY],\n            idx: startCol + cols * modifierY\n          });\n        }\n      }\n      return result;\n    };\n\n    GridSelect.prototype.getSelectedCell = function () {\n      if (this.originalMethod == null) {\n        throw \"The grid component that has GridSelect mixin must implement getSelectedCell()\";\n      }\n      return this.originalMethod.apply(this, arguments);\n    };\n\n    GridSelect.prototype.setSelectedCell = function (rowIndex, colIndex) {\n      if (this.originalMethod == null) {\n        throw \"The grid component that has GridSelect mixin must implement setSelectedCell()\";\n      }\n      return this.originalMethod.apply(this, arguments);\n    };\n\n    GridSelect.prototype.unsetSelectedCell = function () {\n      if (this.originalMethod == null) {\n        throw \"The grid component that has GridSelect mixin must implement unsetSelectedCell()\";\n      }\n      return this.originalMethod.apply(this, arguments);\n    };\n\n    GridSelect.prototype.getSelectedColumn = function () {\n      var colIndex, ref;\n      colIndex = (ref = this.getSelectedCell()) != null ? ref.idx : void 0;\n      if (colIndex == null) {\n        return null;\n      }\n      return this.getColumn(colIndex);\n    };\n\n    GridSelect.prototype.resetSelectedCells = function () {\n      var cell, collection, i, len, ref, selectedCells;\n      collection = this.getCollection();\n      if (collection != null) {\n        if (typeof collection.selectNone === \"function\") {\n          collection.selectNone();\n        }\n      }\n      selectedCells = this.selectedCells;\n      this.selectedCells = [];\n      for (i = 0, len = selectedCells.length; i < len; i++) {\n        cell = selectedCells[i];\n        if ((ref = this.getModelAt(cell.rowIdx)) != null) {\n          if (typeof ref.trigger === \"function\") {\n            ref.trigger('invalidate');\n          }\n        }\n      }\n      return _.defer(function (_this) {\n        return function () {\n          var highlightedCell;\n          highlightedCell = _this.getSelectedCell();\n          if (highlightedCell != null) {\n            return collection != null ? typeof collection.selectModelByIndex === \"function\" ? collection.selectModelByIndex(highlightedCell.rowIdx) : void 0 : void 0;\n          }\n        };\n      }(this));\n    };\n\n    GridSelect.prototype.selectCells = function (cells, options) {\n      var base, cell, i, len;\n      if (options == null) {\n        options = {};\n      }\n      this.resetSelectedCells();\n      for (i = 0, len = cells.length; i < len; i++) {\n        cell = cells[i];\n        this.selectCell(cell.rowIdx, cell.col, options);\n      }\n      return typeof (base = this.props).onSelectedCellsChange === \"function\" ? base.onSelectedCellsChange(this.selectedCells) : void 0;\n    };\n\n    GridSelect.prototype.selectCell = function (rowIdx, colKey, options) {\n      var cell, ref, rowModel;\n      if (options == null) {\n        options = {};\n      }\n      if (rowIdx < 0 || this.modelKeyIndex.indexOf(colKey) < 0) {\n        return;\n      }\n      rowModel = this.getModelAt(rowIdx);\n      cell = {\n        rowIdx: rowIdx,\n        col: colKey,\n        idx: this.modelKeyIndex.indexOf(colKey)\n      };\n      if (!this.isCellSelected(rowIdx, colKey)) {\n        this.selectedCells.push(cell);\n      }\n      if (typeof this.getCollection === \"function\") {\n        if ((ref = this.getCollection()) != null) {\n          if (typeof ref.selectModel === \"function\") {\n            ref.selectModel(rowModel, true, options);\n          }\n        }\n      }\n      if (!options.silent) {\n        return _.defer(function (_this) {\n          return function () {\n            return rowModel.trigger('invalidate');\n          };\n        }(this));\n      }\n    };\n\n    GridSelect.prototype.selectCurrentCell = function () {\n      var col, highlightedCell, ref;\n      highlightedCell = this.getSelectedCell();\n      col = (ref = this.getSelectedColumn()) != null ? ref.key : void 0;\n      if (!(highlightedCell != null && col != null)) {\n        return;\n      }\n      return this.selectCell(highlightedCell.rowIdx, col);\n    };\n\n    GridSelect.prototype.isCellSelected = function (row, colKey) {\n      return _.any(this.selectedCells, function (cell) {\n        return cell.rowIdx === row && cell.col === colKey;\n      });\n    };\n\n    GridSelect.prototype.deselectCell = function (rowIdx, colKey) {\n      var ref, rowModel;\n      rowModel = this.getModelAt(rowIdx);\n      this.selectedCells = _.filter(this.selectedCells, function (cell) {\n        return !(cell.rowIdx === rowIdx && cell.col === colKey);\n      });\n      return typeof this.getCollection === \"function\" ? (ref = this.getCollection()) != null ? typeof ref.selectModel === \"function\" ? ref.selectModel(rowModel, false) : void 0 : void 0 : void 0;\n    };\n\n    /*\n      returns an array of selectedCells.  May be array of one - the highlighted cell\n     */\n\n    GridSelect.prototype.getSelectedCells = function () {\n      var highlightedCell, ref, ref1;\n      if (!(((ref = this.selectedCells) != null ? ref.length : void 0) > 0)) {\n        highlightedCell = this.getSelectedCell();\n        if (highlightedCell == null) {\n          return [];\n        }\n        highlightedCell.col = (ref1 = this.getSelectedColumn()) != null ? ref1.key : void 0;\n        return [highlightedCell];\n      }\n      return this.selectedCells;\n    };\n\n    GridSelect.prototype._updateModelKeyIndex = function () {\n      return this.modelKeyIndex = _.map(this.getColumns(), function (col) {\n        return col.key;\n      });\n    };\n\n    GridSelect.prototype._getPositionByElement = function (el) {\n      var $cell, columnKey, idx, rowIdx;\n      $cell = $(el).closest('.datagrid-cell');\n      if (!($cell.length > 0)) {\n        return null;\n      }\n      columnKey = $cell.attr(\"data-attr-col\");\n      rowIdx = parseInt($cell.attr(\"data-attr-row\"));\n      idx = this.modelKeyIndex.indexOf(columnKey);\n      return {\n        rowIdx: rowIdx,\n        col: columnKey,\n        idx: idx\n      };\n    };\n\n    GridSelect.prototype._getUpperLeftBound = function (cells) {\n      var left, top;\n      if (cells == null) {\n        cells = this.selectedCells;\n      }\n      if (this.selectedCells == null) {\n        return [];\n      }\n      top = _.min(cells, function (cell) {\n        return cell.rowIdx;\n      });\n      cells = _.filter(cells, function (cell) {\n        return cell.rowIdx === top.rowIdx;\n      });\n      left = _.min(cells, function (cell) {\n        return cell.idx;\n      });\n      return {\n        top: top.rowIdx,\n        left: left.idx\n      };\n    };\n\n    GridSelect.prototype._getLowerRightBound = function (cells) {\n      var bottom, right;\n      if (cells == null) {\n        cells = this.selectedCells;\n      }\n      if (this.selectedCells == null) {\n        return [];\n      }\n      bottom = _.max(cells, function (cell) {\n        return cell.rowIdx;\n      });\n      cells = _.filter(cells, function (cell) {\n        return cell.rowIdx === bottom.rowIdx;\n      });\n      right = _.max(cells, function (cell) {\n        return cell.idx;\n      });\n      return {\n        bottom: bottom.rowIdx,\n        right: right.idx\n      };\n    };\n\n    GridSelect.prototype.__bindEvents = function () {\n      $(document).on('copy.GridSelect', function (_this) {\n        return function (evt) {\n          return _this.__onDocumentCopy(evt);\n        };\n      }(this));\n      $(document).on('paste.GridSelect', function (_this) {\n        return function (evt) {\n          return _this.__onDocumentPaste(evt);\n        };\n      }(this));\n      $(document).on('keydown.GridSelect', function (_this) {\n        return function (evt) {\n          return _this.__onDocumentKeyDown(evt);\n        };\n      }(this));\n      $(document).on('mouseup.GridSelect', function (_this) {\n        return function (evt) {\n          return _this.__onDocumentMouseUp(evt);\n        };\n      }(this));\n      $(document).on('mousedown.GridSelect', '.datagrid-cell', function (_this) {\n        return function (evt) {\n          return _this.__onDocumentMouseDown(evt);\n        };\n      }(this));\n      return $(document).on('mousemove.GridSelect', '.datagrid-cell', function (_this) {\n        return function (evt) {\n          return _this.__onDocumentMouseMove(evt);\n        };\n      }(this));\n    };\n\n    GridSelect.prototype.__unbindEvents = function () {\n      $(document).off('copy.GridSelect');\n      $(document).off('paste.GridSelect');\n      $(document).off('keydown.GridSelect');\n      $(document).off('mouseup.GridSelect');\n      $(document).off('mousedown.GridSelect');\n      return $(document).off('mousemove.GridSelect');\n    };\n\n    GridSelect.prototype.__onDocumentCopy = function (e) {\n      var cell, cells, cellsInRow, i, j, len, len1, ref, result, row, rowModel, rows, vals;\n      if ($(e.target).closest('.datagrid-cell.editing').length > 0) {\n        return;\n      }\n      result = [];\n      cells = this.getSelectedCells();\n      rows = _.uniq(_.map(cells, function (cell) {\n        return cell.rowIdx;\n      }));\n      for (i = 0, len = rows.length; i < len; i++) {\n        row = rows[i];\n        rowModel = this.getModelAt(row);\n        if (rowModel == null) {\n          continue;\n        }\n        cellsInRow = _.filter(cells, function (cell) {\n          return cell.rowIdx === row;\n        });\n        cellsInRow = _.sortBy(cellsInRow, 'idx');\n        vals = [];\n        ref = _.filter(cellsInRow, function (cell) {\n          return cell != null;\n        });\n        for (j = 0, len1 = ref.length; j < len1; j++) {\n          cell = ref[j];\n          vals.push(this.getExportValue(rowModel, this.getColumn(cell.col)));\n        }\n        result.push(vals.join(\"\\t\"));\n      }\n      e.originalEvent.clipboardData.setData('text/plain', result.join(\"\\n\"));\n      e.stopPropagation();\n      return e.preventDefault();\n    };\n\n    GridSelect.prototype.__onDocumentPaste = function (e) {\n      var $activeEl, cell, cellIdx, cellsInRow, highlightedCell, i, j, k, l, len, m, paste, pasteRow, ref, ref1, ref2, ref3, ref4, ref5, ref6, rowIdx, rowModel, start;\n      paste = this.copyPasteHelper.processPaste(e);\n      $activeEl = $(document.activeElement);\n      if ($($activeEl).closest('.datagrid-cell.editing').length > 0 || $($activeEl).is('input,textarea')) {\n        return;\n      }\n      if (!Array.isArray(paste) && paste.indexOf('\\t') >= 0) {\n        paste = [paste.split('\\t')];\n      }\n      if (Array.isArray(paste)) {\n        if (this.selectedCells.length > 0) {\n          start = this._getUpperLeftBound();\n          for (rowIdx = i = ref = start.top, ref1 = start.top + paste.length - 1; ref <= ref1 ? i <= ref1 : i >= ref1; rowIdx = ref <= ref1 ? ++i : --i) {\n            cellsInRow = _.filter(this.selectedCells, function (cell) {\n              return cell != null && cell.rowIdx === rowIdx;\n            });\n            cellsInRow = _.sortBy(cellsInRow, 'idx');\n            if (cellsInRow.length === 0) {\n              continue;\n            }\n            pasteRow = paste[rowIdx - start.top];\n            if (!Array.isArray(pasteRow)) {\n              pasteRow = [pasteRow];\n            }\n            rowModel = this.getModelAt(rowIdx);\n            for (cellIdx = j = 0, ref2 = pasteRow.length - 1; 0 <= ref2 ? j <= ref2 : j >= ref2; cellIdx = 0 <= ref2 ? ++j : --j) {\n              if (cellIdx >= cellsInRow.length) {\n                continue;\n              }\n              this.__updateRowModelColumn(rowIdx, rowModel, cellsInRow[cellIdx].col, pasteRow[cellIdx]);\n            }\n          }\n        } else {\n          highlightedCell = this.getSelectedCell();\n          if (highlightedCell != null) {\n            start = {\n              top: highlightedCell.rowIdx,\n              left: highlightedCell.idx\n            };\n            for (rowIdx = k = ref3 = start.top, ref4 = start.top + paste.length - 1; ref3 <= ref4 ? k <= ref4 : k >= ref4; rowIdx = ref3 <= ref4 ? ++k : --k) {\n              pasteRow = paste[rowIdx - start.top];\n              if (!_.isArray(pasteRow)) {\n                pasteRow = [pasteRow];\n              }\n              rowModel = this.getModelAt(rowIdx);\n              for (cellIdx = l = 0, ref5 = pasteRow.length - 1; 0 <= ref5 ? l <= ref5 : l >= ref5; cellIdx = 0 <= ref5 ? ++l : --l) {\n                this.__updateRowModelColumn(rowIdx, rowModel, this.modelKeyIndex[start.left + cellIdx], pasteRow[cellIdx]);\n              }\n            }\n          }\n        }\n      } else {\n        ref6 = this.getSelectedCells();\n        for (m = 0, len = ref6.length; m < len; m++) {\n          cell = ref6[m];\n          rowModel = this.getModelAt(cell.rowIdx);\n          this.__updateRowModelColumn(cell.rowIdx, rowModel, cell.col, paste);\n        }\n      }\n      e.stopPropagation();\n      return e.preventDefault();\n    };\n\n    GridSelect.prototype.__onDocumentMouseDown = function (evt) {\n      var el, thisClickPosition, thisClickTick;\n      el = $(evt.target);\n      if (el.closest('.datagrid-cell.editing').length > 0 || !this.__isInOurDatagrid(el)) {\n        return;\n      }\n      if (el.hasClass(\"fa-pencil\")) {\n        this.__startEdit();\n        return;\n      }\n      this._updateModelKeyIndex();\n      thisClickPosition = this._getPositionByElement(el);\n      if (thisClickPosition == null) {\n        return;\n      }\n      thisClickTick = Date.now();\n      if (thisClickTick - this.lastClickTick < this.DOUBLE_CLICK_INTERVAL && CompareObjects(thisClickPosition, this.lastClickedPosition)) {\n        this.__startEdit();\n        return;\n      }\n      this.lastClickedPosition = thisClickPosition;\n      this.lastClickTick = thisClickTick;\n      if (thisClickPosition != null) {\n        this.setSelectedCell(thisClickPosition.rowIdx, thisClickPosition.idx);\n      }\n      this.shouldEdit = false;\n      this.startKeySelPosition = null;\n      if (evt.shiftKey) {\n        return _.defer(function (_this) {\n          return function () {\n            return _this.__shiftKeyClickSelect(thisClickPosition);\n          };\n        }(this));\n      } else {\n        return this.startSelPosition = thisClickPosition;\n      }\n    };\n\n    GridSelect.prototype.__onDocumentKeyDown = function (evt) {\n      var i, keyCode, results;\n      if (!this.__isInOurDatagrid(evt.target)) {\n        return;\n      }\n      keyCode = evt.keyCode;\n      switch (false) {\n        case !((keyCode === 13 || keyCode === 32 || keyCode === 110 || indexOf.call(function () {\n          results = [];\n          for (i = 48; i <= 90; i++) {\n            results.push(i);\n          }\n          return results;\n        }.apply(this), keyCode) >= 0) && !(evt.ctrlKey || evt.metaKey)):\n          return this.__startEdit();\n        case keyCode !== 27:\n          return this.resetSelectedCells();\n        case keyCode !== 37 && keyCode !== 38 && keyCode !== 39 && keyCode !== 40:\n          if (evt.shiftKey) {\n            this.selectCurrentCell();\n            if (this.startKeySelPosition == null) {\n              this.startKeySelPosition = this.getSelectedCell();\n            }\n            return _.defer(function (_this) {\n              return function () {\n                var cells, endCell;\n                if (_this.startKeySelPosition == null) {\n                  return;\n                }\n                endCell = _this.getSelectedCell();\n                cells = _this._getCellsBetween(_this.startKeySelPosition.rowIdx, _this.startKeySelPosition.idx, endCell.rowIdx, endCell.idx);\n                return _this.selectCells(cells);\n              };\n            }(this));\n          } else {\n            this.startKeySelPosition = null;\n            this.resetSelectedCells();\n            return _.defer(function (_this) {\n              return function () {\n                return _this.selectCurrentCell();\n              };\n            }(this));\n          }\n      }\n    };\n\n    GridSelect.prototype.__onDocumentMouseUp = function (evt) {\n      var el, isSelectColumn, rowModel, sameCellAsOrigin;\n      el = $(evt.target);\n      if (el.closest('.datagrid-cell.editing').length > 0) {\n        return;\n      }\n      if (el.closest('.widgets-react-datagrid').length > 0 && !evt.shiftKey) {\n        if (this.startSelPosition != null) {\n          this.endSelPosition = this._getPositionByElement(el);\n          if (this.endSelPosition == null) {\n            this.startSelPosition = null;\n            return;\n          }\n          sameCellAsOrigin = this.endSelPosition.rowIdx === this.startSelPosition.rowIdx && this.endSelPosition.col === this.startSelPosition.col;\n          isSelectColumn = el.closest('.datagrid-cell.selected-column').length > 0;\n          rowModel = this.getModelAt(this.endSelPosition.rowIdx);\n          if (evt.metaKey || evt.ctrKey || isSelectColumn) {\n            if (sameCellAsOrigin) {\n              if (this.isCellSelected(this.endSelPosition.rowIdx, this.endSelPosition.col) || isSelectColumn && rowModel.selected) {\n                this.deselectCell(this.endSelPosition.rowIdx, this.endSelPosition.col);\n              } else {\n                this.selectCell(this.endSelPosition.rowIdx, this.endSelPosition.col);\n              }\n            }\n          } else if (sameCellAsOrigin) {\n            this.resetSelectedCells();\n            _.defer(function (_this) {\n              return function () {\n                return _this.selectCurrentCell();\n              };\n            }(this));\n          }\n        } else {\n          this.resetSelectedCells();\n          _.defer(function (_this) {\n            return function () {\n              return _this.selectCurrentCell();\n            };\n          }(this));\n        }\n      }\n      return this.startSelPosition = null;\n    };\n\n    GridSelect.prototype.__onDocumentMouseMove = function (evt) {\n      var cells, el;\n      evt.preventDefault();\n      evt.stopPropagation();\n      if (evt.metaKey || evt.ctrKey || evt.shiftKey) {\n        return;\n      }\n      el = $(evt.target);\n      if (this.startSelPosition != null && el.hasClass(\"datagrid-cell\")) {\n        this.shouldEdit = false;\n        this.endSelPosition = this._getPositionByElement(el);\n        cells = this._getCellsBetween(this.startSelPosition.rowIdx, this.startSelPosition.idx, this.endSelPosition.rowIdx, this.endSelPosition.idx);\n        return this.selectCells(cells);\n      }\n    };\n\n    GridSelect.prototype.__startEdit = function () {\n      this.startSelPosition = null;\n      this.startKeySelPosition = null;\n      this.resetSelectedCells();\n      return this.shouldEdit = true;\n    };\n\n    GridSelect.prototype.__updateRowModelColumn = function (rowIndex, rowModel, columnKey, value) {\n      var attribute, column, error, parsedJsonObj;\n      if (rowModel == null) {\n        return;\n      }\n      try {\n        if (_.isString(value)) {\n          parsedJsonObj = JSON.parse(value);\n        }\n      } catch (error) {}\n      attribute = columnKey;\n      column = this.getColumn(columnKey);\n      if (this.canEditCell(column, rowModel)) {\n        this.saveModel(rowModel, {\n          cellKey: columnKey,\n          rowIdx: rowIndex,\n          updated: parsedJsonObj != null ? parsedJsonObj : value,\n          key: \"Paste\"\n        });\n        return rowModel.trigger('invalidate');\n      }\n    };\n\n    GridSelect.prototype.__isInOurDatagrid = function (element) {\n      return $.contains(ReactDOM.findDOMNode(this), $(element)[0]);\n    };\n\n    GridSelect.prototype.__shiftKeyClickSelect = function (endSelPosition) {\n      var cells, lowerRightSel, startingFrom, upperLeftSel;\n      upperLeftSel = this._getUpperLeftBound();\n      lowerRightSel = this._getLowerRightBound();\n      startingFrom = endSelPosition.rowIdx <= upperLeftSel.top && endSelPosition.idx <= upperLeftSel.left ? {\n        rowIdx: lowerRightSel.bottom,\n        idx: lowerRightSel.right\n      } : {\n        rowIdx: upperLeftSel.top,\n        idx: upperLeftSel.left\n      };\n      if (startingFrom.rowIdx != null && startingFrom.idx != null) {\n        cells = this._getCellsBetween(startingFrom.rowIdx, startingFrom.idx, endSelPosition.rowIdx, endSelPosition.idx);\n        return this.selectCells(cells);\n      } else {\n        return this.selectCurrentCell();\n      }\n    };\n\n    return GridSelect;\n  }();\n}).call(undefined);"
        },
        {
          "id": 25,
          "identifier": "/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/cache-loader/dist/cjs.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/babel-loader/lib/index.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/lib/helpers/copyPasteFromExcel.js",
          "name": "./lib/helpers/copyPasteFromExcel.js",
          "index": 25,
          "index2": 21,
          "size": 6355,
          "cacheable": true,
          "built": true,
          "optional": false,
          "prefetched": false,
          "chunks": [
            0
          ],
          "assets": [],
          "issuer": "/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/cache-loader/dist/cjs.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/babel-loader/lib/index.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/lib/gridSelect.js",
          "issuerId": 24,
          "issuerName": "./lib/gridSelect.js",
          "failed": false,
          "errors": 0,
          "warnings": 0,
          "reasons": [
            {
              "moduleId": 24,
              "moduleIdentifier": "/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/cache-loader/dist/cjs.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/babel-loader/lib/index.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/lib/gridSelect.js",
              "module": "./lib/gridSelect.js",
              "moduleName": "./lib/gridSelect.js",
              "type": "cjs require",
              "userRequest": "./helpers/copyPasteFromExcel",
              "loc": "27:23-62"
            }
          ],
          "usedExports": true,
          "providedExports": null,
          "optimizationBailout": [],
          "depth": 4,
          "source": "'use strict';\n\n(function () {\n  var $,\n      CopyPasteFromExcel,\n      bind = function bind(fn, me) {\n    return function () {\n      return fn.apply(me, arguments);\n    };\n  };\n\n  $ = require('jquery');\n\n  /*\n   */\n\n  module.exports = CopyPasteFromExcel = function () {\n    function CopyPasteFromExcel() {\n      this.processPaste = bind(this.processPaste, this);\n    }\n\n    CopyPasteFromExcel.prototype.getClipboardData = function (e) {\n      var ref;\n      return e.clipboardData || ((ref = e.originalEvent) != null ? ref.clipboardData : void 0) || window.clipboardData;\n    };\n\n    CopyPasteFromExcel.prototype.getExpectedColumnLength = function (array2d) {\n      var i, len, max, row;\n      if (!Array.isArray(array2d)) {\n        return 0;\n      }\n      max = 1;\n      for (i = 0, len = array2d.length; i < len; i++) {\n        row = array2d[i];\n        if (Array.isArray(row) && row.length > max) {\n          max = row.length;\n        }\n      }\n      return max;\n    };\n\n    CopyPasteFromExcel.prototype.removeQuotes = function (str) {\n      var trimmed;\n      if (str == null) {\n        return str;\n      }\n      trimmed = $.trim(str);\n      if (trimmed[0] === '\\\"' && trimmed[trimmed.length - 1] === '\\\"') {\n        return trimmed.substr(trimmed.indexOf('\\\"') + 1, trimmed.lastIndexOf('\\\"') - 1);\n      } else {\n        return trimmed;\n      }\n    };\n\n    /*\n    This function will iterate over a 2d array and see if the first and last columns\n    anywhere in the array have newline returns. Indicating an edge case we probably\n    didn't reliably parse.\n     */\n\n    CopyPasteFromExcel.prototype.is2dArrayBroken = function (array2d) {\n      var i, leftIsTextarea, len, rightIsTextarea, row;\n      leftIsTextarea = false;\n      rightIsTextarea = false;\n      for (i = 0, len = array2d.length; i < len; i++) {\n        row = array2d[i];\n        if (row[0].indexOf('\\n') >= 0) {\n          leftIsTextarea = true;\n        }\n        if (row[row.length - 1].indexOf('\\n') >= 0) {\n          rightIsTextarea = true;\n        }\n      }\n      return rightIsTextarea && leftIsTextarea;\n    };\n\n    /*\n    This function will take a 2d array and uniform the columns for each row\n    by finding the row with the most columns, and assuming that as the 'standard'\n    column length. Then it iterates over each cell and creates new rows that have the\n    standardized column length.\n    \n    If it encouters a row with a single value, it will collect all single values from\n    that point on, until it finds a normal row, and then it will assum cell[0] in the normal\n    row is also part of the broken cells it has collected. It will smartly merge the broken values and the cell[0]\n    in the correct place.\n    \n    This fixes excel weirdness.\n     */\n\n    CopyPasteFromExcel.prototype.make2dArrayUniform = function (array2d) {\n      var brokenStr, cell, cells, i, j, lastCell, len, len1, length, result, row, tempRow;\n      length = this.getExpectedColumnLength(array2d);\n      result = [];\n      tempRow = [];\n      brokenStr = '';\n      if (length === 1) {\n        return array2d;\n      }\n      for (i = 0, len = array2d.length; i < len; i++) {\n        row = array2d[i];\n        if (!Array.isArray(row)) {\n          brokenStr += row + '\\n';\n        } else {\n          if (brokenStr.length > 0) {\n            if (tempRow.length > 0) {\n              tempRow[tempRow.length - 1] += '\\n' + brokenStr;\n            } else if (result.length > 0) {\n              cells = result[result.length - 1];\n              lastCell = cells[cells.length - 1];\n              if (lastCell.indexOf('\\n') >= 0 || lastCell.indexOf('\\\"') >= 0) {\n                cells[cells.length - 1] = this.removeQuotes(lastCell + '\\n' + brokenStr);\n              } else {\n                tempRow.push(this.removeQuotes(brokenStr));\n              }\n            }\n            brokenStr = '';\n          }\n          if (row.length + tempRow.length < length && tempRow.length > 0) {\n            tempRow[tempRow.length - 1] = this.removeQuotes(tempRow[tempRow.length - 1] + '\\n' + row.splice(0, 1));\n          }\n          if (tempRow.length > 0 && row.length + tempRow.length > length) {\n            while (row.length + tempRow.length > length) {\n              tempRow[tempRow.length - 1] = this.removeQuotes(tempRow[tempRow.length - 1] + '\\n' + row.splice(0, 1));\n            }\n          }\n          for (j = 0, len1 = row.length; j < len1; j++) {\n            cell = row[j];\n            tempRow.push(cell);\n            if (tempRow.length >= length) {\n              result.push(tempRow);\n              tempRow = [];\n            }\n          }\n        }\n      }\n      if (tempRow.length > 0) {\n        result.push(tempRow);\n      }\n      return result;\n    };\n\n    /*\n    If a single value is pasted, this will invoke @props.onPaste if available.\n    Otherwise, it will convert the value into a 2-dimensional array and pass it to\n    @props.onMultiPaste if available.\n    \n    It also passes the event along with, so you can e.stopPropagation() and e.preventDefault()\n    further upstream if you want.\n     */\n\n    CopyPasteFromExcel.prototype.processPaste = function (e) {\n      var arrText, clipboardData, i, len, rawText, ref, ref1, resultArray, row, splitChar;\n      clipboardData = this.getClipboardData(e);\n      rawText = clipboardData != null ? clipboardData.getData('text') : void 0;\n      if (rawText == null) {\n        return;\n      }\n      if (rawText.indexOf(String.fromCharCode(13)) >= 0) {\n        arrText = rawText.split(String.fromCharCode(13));\n      } else if (rawText.indexOf('\\n') >= 0) {\n        arrText = rawText.split('\\n');\n      } else {\n        arrText = [rawText];\n      }\n      if (arrText.length > 1) {\n        resultArray = [];\n        if (((ref = arrText[0]) != null ? ref.indexOf('\\t') : void 0) >= 0) {\n          splitChar = '\\t';\n        } else if (((ref1 = arrText[0]) != null ? ref1.indexOf(',') : void 0) >= 0) {\n          splitChar = ',';\n        }\n        for (i = 0, len = arrText.length; i < len; i++) {\n          row = arrText[i];\n          if (row.indexOf(splitChar) >= 0) {\n            resultArray.push(row.split(splitChar));\n          } else {\n            resultArray.push(row);\n          }\n        }\n        return this.make2dArrayUniform(resultArray);\n      } else {\n        return rawText;\n      }\n    };\n\n    return CopyPasteFromExcel;\n  }();\n}).call(undefined);"
        },
        {
          "id": 26,
          "identifier": "/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/cache-loader/dist/cjs.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/babel-loader/lib/index.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/lib/helpers/compareObjects.js",
          "name": "./lib/helpers/compareObjects.js",
          "index": 26,
          "index2": 22,
          "size": 1411,
          "cacheable": true,
          "built": true,
          "optional": false,
          "prefetched": false,
          "chunks": [
            0
          ],
          "assets": [],
          "issuer": "/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/cache-loader/dist/cjs.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/babel-loader/lib/index.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/lib/gridSelect.js",
          "issuerId": 24,
          "issuerName": "./lib/gridSelect.js",
          "failed": false,
          "errors": 0,
          "warnings": 0,
          "reasons": [
            {
              "moduleId": 24,
              "moduleIdentifier": "/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/cache-loader/dist/cjs.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/babel-loader/lib/index.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/lib/gridSelect.js",
              "module": "./lib/gridSelect.js",
              "moduleName": "./lib/gridSelect.js",
              "type": "cjs require",
              "userRequest": "./helpers/compareObjects",
              "loc": "29:19-54"
            }
          ],
          "usedExports": true,
          "providedExports": null,
          "optimizationBailout": [],
          "depth": 4,
          "source": "\"use strict\";\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\n(function () {\n  var _compareObjects;\n\n  module.exports = _compareObjects = function compareObjects(a, b) {\n    var attr;\n    if (a == null && b == null) {\n      return true;\n    }\n    if (!(a != null && b != null)) {\n      return false;\n    }\n    attr = null;\n    for (attr in a) {\n      if (typeof b[attr] === \"undefined\") {\n        return false;\n      }\n    }\n    for (attr in a) {\n      if (a[attr]) {\n        switch (_typeof(a[attr])) {\n          case \"object\":\n            if (!_compareObjects(a[attr], b[attr])) {\n              return false;\n            }\n            break;\n          case \"function\":\n            if (typeof b[attr] === \"undefined\" || attr !== \"equals\" && a[attr].toString() !== b[attr].toString()) {\n              return false;\n            }\n            break;\n          default:\n            if (a[attr] !== b[attr]) {\n              return false;\n            }\n        }\n      } else {\n        if (b[attr]) {\n          return false;\n        }\n      }\n    }\n    for (attr in b) {\n      if (typeof a[attr] === \"undefined\") {\n        return false;\n      }\n    }\n    return true;\n  };\n}).call(undefined);"
        }
      ],
      "filteredModules": 0,
      "origins": [
        {
          "moduleId": 9,
          "module": "multi ./index.js",
          "moduleIdentifier": "multi ./index.js",
          "moduleName": "multi ./index.js",
          "loc": "",
          "name": "main",
          "reasons": []
        }
      ]
    }
  ],
  "modules": [
    {
      "id": 0,
      "identifier": "external {\"root\":\"_\",\"commonjs2\":\"underscore\",\"commonjs\":\"underscore\",\"amd\":\"underscore\"}",
      "name": "external {\"root\":\"_\",\"commonjs2\":\"underscore\",\"commonjs\":\"underscore\",\"amd\":\"underscore\"}",
      "index": 12,
      "index2": 9,
      "size": 42,
      "cacheable": false,
      "built": false,
      "optional": false,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/cache-loader/dist/cjs.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/babel-loader/lib/index.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/lib/datagrid.js",
      "issuerId": 12,
      "issuerName": "./lib/datagrid.js",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 6,
          "moduleIdentifier": "/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/cache-loader/dist/cjs.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/babel-loader/lib/index.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/lib/helpers/reactStyles.js",
          "module": "./lib/helpers/reactStyles.js",
          "moduleName": "./lib/helpers/reactStyles.js",
          "type": "cjs require",
          "userRequest": "underscore",
          "loc": "9:6-27"
        },
        {
          "moduleId": 8,
          "moduleIdentifier": "/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/cache-loader/dist/cjs.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/babel-loader/lib/index.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/lib/cell.js",
          "module": "./lib/cell.js",
          "moduleName": "./lib/cell.js",
          "type": "cjs require",
          "userRequest": "underscore",
          "loc": "32:6-27"
        },
        {
          "moduleId": 12,
          "moduleIdentifier": "/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/cache-loader/dist/cjs.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/babel-loader/lib/index.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/lib/datagrid.js",
          "module": "./lib/datagrid.js",
          "moduleName": "./lib/datagrid.js",
          "type": "cjs require",
          "userRequest": "underscore",
          "loc": "39:6-27"
        },
        {
          "moduleId": 17,
          "moduleIdentifier": "/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/cache-loader/dist/cjs.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/babel-loader/lib/index.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/lib/helpers/mixin.js",
          "module": "./lib/helpers/mixin.js",
          "moduleName": "./lib/helpers/mixin.js",
          "type": "cjs require",
          "userRequest": "underscore",
          "loc": "6:6-27"
        },
        {
          "moduleId": 18,
          "moduleIdentifier": "/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/cache-loader/dist/cjs.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/babel-loader/lib/index.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/lib/helpers/deepSet.js",
          "module": "./lib/helpers/deepSet.js",
          "moduleName": "./lib/helpers/deepSet.js",
          "type": "cjs require",
          "userRequest": "underscore",
          "loc": "6:6-27"
        },
        {
          "moduleId": 19,
          "moduleIdentifier": "/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/cache-loader/dist/cjs.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/babel-loader/lib/index.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/lib/cellWrapper.js",
          "module": "./lib/cellWrapper.js",
          "moduleName": "./lib/cellWrapper.js",
          "type": "cjs require",
          "userRequest": "underscore",
          "loc": "36:6-27"
        },
        {
          "moduleId": 22,
          "moduleIdentifier": "/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/cache-loader/dist/cjs.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/babel-loader/lib/index.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/lib/gridEdit.js",
          "module": "./lib/gridEdit.js",
          "moduleName": "./lib/gridEdit.js",
          "type": "cjs require",
          "userRequest": "underscore",
          "loc": "14:6-27"
        },
        {
          "moduleId": 24,
          "moduleIdentifier": "/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/cache-loader/dist/cjs.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/babel-loader/lib/index.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/lib/gridSelect.js",
          "module": "./lib/gridSelect.js",
          "moduleName": "./lib/gridSelect.js",
          "type": "cjs require",
          "userRequest": "underscore",
          "loc": "25:6-27"
        }
      ],
      "usedExports": true,
      "providedExports": null,
      "optimizationBailout": [],
      "depth": 3
    },
    {
      "id": 1,
      "identifier": "external {\"root\":\"jQuery\",\"commonjs2\":\"jquery\",\"commonjs\":\"jquery\",\"amd\":\"jquery\"}",
      "name": "external {\"root\":\"jQuery\",\"commonjs2\":\"jquery\",\"commonjs\":\"jquery\",\"amd\":\"jquery\"}",
      "index": 13,
      "index2": 10,
      "size": 42,
      "cacheable": false,
      "built": false,
      "optional": false,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/cache-loader/dist/cjs.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/babel-loader/lib/index.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/lib/datagrid.js",
      "issuerId": 12,
      "issuerName": "./lib/datagrid.js",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 12,
          "moduleIdentifier": "/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/cache-loader/dist/cjs.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/babel-loader/lib/index.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/lib/datagrid.js",
          "module": "./lib/datagrid.js",
          "moduleName": "./lib/datagrid.js",
          "type": "cjs require",
          "userRequest": "jquery",
          "loc": "41:6-23"
        },
        {
          "moduleId": 19,
          "moduleIdentifier": "/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/cache-loader/dist/cjs.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/babel-loader/lib/index.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/lib/cellWrapper.js",
          "module": "./lib/cellWrapper.js",
          "moduleName": "./lib/cellWrapper.js",
          "type": "cjs require",
          "userRequest": "jquery",
          "loc": "34:6-23"
        },
        {
          "moduleId": 22,
          "moduleIdentifier": "/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/cache-loader/dist/cjs.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/babel-loader/lib/index.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/lib/gridEdit.js",
          "module": "./lib/gridEdit.js",
          "moduleName": "./lib/gridEdit.js",
          "type": "cjs require",
          "userRequest": "jquery",
          "loc": "16:6-23"
        },
        {
          "moduleId": 24,
          "moduleIdentifier": "/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/cache-loader/dist/cjs.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/babel-loader/lib/index.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/lib/gridSelect.js",
          "module": "./lib/gridSelect.js",
          "moduleName": "./lib/gridSelect.js",
          "type": "cjs require",
          "userRequest": "jquery",
          "loc": "23:6-23"
        },
        {
          "moduleId": 25,
          "moduleIdentifier": "/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/cache-loader/dist/cjs.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/babel-loader/lib/index.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/lib/helpers/copyPasteFromExcel.js",
          "module": "./lib/helpers/copyPasteFromExcel.js",
          "moduleName": "./lib/helpers/copyPasteFromExcel.js",
          "type": "cjs require",
          "userRequest": "jquery",
          "loc": "12:6-23"
        }
      ],
      "usedExports": true,
      "providedExports": null,
      "optimizationBailout": [],
      "depth": 3
    },
    {
      "id": 2,
      "identifier": "external {\"root\":\"React\",\"commonjs2\":\"react\",\"commonjs\":\"react\",\"amd\":\"react\"}",
      "name": "external {\"root\":\"React\",\"commonjs2\":\"react\",\"commonjs\":\"react\",\"amd\":\"react\"}",
      "index": 4,
      "index2": 1,
      "size": 42,
      "cacheable": false,
      "built": false,
      "optional": false,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/cache-loader/dist/cjs.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/babel-loader/lib/index.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/lib/datagrid.js",
      "issuerId": 12,
      "issuerName": "./lib/datagrid.js",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 8,
          "moduleIdentifier": "/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/cache-loader/dist/cjs.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/babel-loader/lib/index.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/lib/cell.js",
          "module": "./lib/cell.js",
          "moduleName": "./lib/cell.js",
          "type": "cjs require",
          "userRequest": "react",
          "loc": "24:10-26"
        },
        {
          "moduleId": 12,
          "moduleIdentifier": "/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/cache-loader/dist/cjs.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/babel-loader/lib/index.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/lib/datagrid.js",
          "module": "./lib/datagrid.js",
          "moduleName": "./lib/datagrid.js",
          "type": "cjs require",
          "userRequest": "react",
          "loc": "31:10-26"
        },
        {
          "moduleId": 19,
          "moduleIdentifier": "/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/cache-loader/dist/cjs.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/babel-loader/lib/index.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/lib/cellWrapper.js",
          "module": "./lib/cellWrapper.js",
          "moduleName": "./lib/cellWrapper.js",
          "type": "cjs require",
          "userRequest": "react",
          "loc": "26:10-26"
        },
        {
          "moduleId": 20,
          "moduleIdentifier": "/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/cache-loader/dist/cjs.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/babel-loader/lib/index.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/lib/labelCell.js",
          "module": "./lib/labelCell.js",
          "moduleName": "./lib/labelCell.js",
          "type": "cjs require",
          "userRequest": "react",
          "loc": "24:10-26"
        }
      ],
      "usedExports": true,
      "providedExports": null,
      "optimizationBailout": [],
      "depth": 3
    },
    {
      "id": 3,
      "identifier": "/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/prop-types/index.js",
      "name": "./node_modules/prop-types/index.js",
      "index": 7,
      "index2": 8,
      "size": 956,
      "cacheable": true,
      "built": true,
      "optional": false,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/cache-loader/dist/cjs.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/babel-loader/lib/index.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/lib/datagrid.js",
      "issuerId": 12,
      "issuerName": "./lib/datagrid.js",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 8,
          "moduleIdentifier": "/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/cache-loader/dist/cjs.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/babel-loader/lib/index.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/lib/cell.js",
          "module": "./lib/cell.js",
          "moduleName": "./lib/cell.js",
          "type": "cjs require",
          "userRequest": "prop-types",
          "loc": "28:14-35"
        },
        {
          "moduleId": 12,
          "moduleIdentifier": "/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/cache-loader/dist/cjs.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/babel-loader/lib/index.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/lib/datagrid.js",
          "module": "./lib/datagrid.js",
          "moduleName": "./lib/datagrid.js",
          "type": "cjs require",
          "userRequest": "prop-types",
          "loc": "37:14-35"
        },
        {
          "moduleId": 19,
          "moduleIdentifier": "/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/cache-loader/dist/cjs.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/babel-loader/lib/index.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/lib/cellWrapper.js",
          "module": "./lib/cellWrapper.js",
          "moduleName": "./lib/cellWrapper.js",
          "type": "cjs require",
          "userRequest": "prop-types",
          "loc": "30:14-35"
        },
        {
          "moduleId": 20,
          "moduleIdentifier": "/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/cache-loader/dist/cjs.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/babel-loader/lib/index.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/lib/labelCell.js",
          "module": "./lib/labelCell.js",
          "moduleName": "./lib/labelCell.js",
          "type": "cjs require",
          "userRequest": "prop-types",
          "loc": "26:14-35"
        }
      ],
      "usedExports": true,
      "providedExports": null,
      "optimizationBailout": [],
      "depth": 3,
      "source": "/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nif (process.env.NODE_ENV !== 'production') {\n  var REACT_ELEMENT_TYPE = (typeof Symbol === 'function' &&\n    Symbol.for &&\n    Symbol.for('react.element')) ||\n    0xeac7;\n\n  var isValidElement = function(object) {\n    return typeof object === 'object' &&\n      object !== null &&\n      object.$$typeof === REACT_ELEMENT_TYPE;\n  };\n\n  // By explicitly using `prop-types` you are opting into new development behavior.\n  // http://fb.me/prop-types-in-prod\n  var throwOnDirectAccess = true;\n  module.exports = require('./factoryWithTypeCheckers')(isValidElement, throwOnDirectAccess);\n} else {\n  // By explicitly using `prop-types` you are opting into new production behavior.\n  // http://fb.me/prop-types-in-prod\n  module.exports = require('./factoryWithThrowingShims')();\n}\n"
    },
    {
      "id": 4,
      "identifier": "external {\"root\":\"ReactDOM\",\"commonjs2\":\"react-dom\",\"commonjs\":\"react-dom\",\"amd\":\"react-dom\"}",
      "name": "external {\"root\":\"ReactDOM\",\"commonjs2\":\"react-dom\",\"commonjs\":\"react-dom\",\"amd\":\"react-dom\"}",
      "index": 5,
      "index2": 2,
      "size": 42,
      "cacheable": false,
      "built": false,
      "optional": false,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/cache-loader/dist/cjs.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/babel-loader/lib/index.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/lib/datagrid.js",
      "issuerId": 12,
      "issuerName": "./lib/datagrid.js",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 12,
          "moduleIdentifier": "/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/cache-loader/dist/cjs.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/babel-loader/lib/index.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/lib/datagrid.js",
          "module": "./lib/datagrid.js",
          "moduleName": "./lib/datagrid.js",
          "type": "cjs require",
          "userRequest": "react-dom",
          "loc": "33:13-33"
        },
        {
          "moduleId": 19,
          "moduleIdentifier": "/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/cache-loader/dist/cjs.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/babel-loader/lib/index.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/lib/cellWrapper.js",
          "module": "./lib/cellWrapper.js",
          "moduleName": "./lib/cellWrapper.js",
          "type": "cjs require",
          "userRequest": "react-dom",
          "loc": "28:13-33"
        },
        {
          "moduleId": 24,
          "moduleIdentifier": "/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/cache-loader/dist/cjs.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/babel-loader/lib/index.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/lib/gridSelect.js",
          "module": "./lib/gridSelect.js",
          "moduleName": "./lib/gridSelect.js",
          "type": "cjs require",
          "userRequest": "react-dom",
          "loc": "21:13-33"
        }
      ],
      "usedExports": true,
      "providedExports": null,
      "optimizationBailout": [],
      "depth": 3
    },
    {
      "id": 5,
      "identifier": "external {\"root\":\"ReactDatum\",\"commonjs2\":\"react-datum\",\"commonjs\":\"react-datum\",\"amd\":\"react-datum\"}",
      "name": "external {\"root\":\"ReactDatum\",\"commonjs2\":\"react-datum\",\"commonjs\":\"react-datum\",\"amd\":\"react-datum\"}",
      "index": 6,
      "index2": 3,
      "size": 42,
      "cacheable": false,
      "built": false,
      "optional": false,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/cache-loader/dist/cjs.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/babel-loader/lib/index.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/lib/datagrid.js",
      "issuerId": 12,
      "issuerName": "./lib/datagrid.js",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 8,
          "moduleIdentifier": "/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/cache-loader/dist/cjs.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/babel-loader/lib/index.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/lib/cell.js",
          "module": "./lib/cell.js",
          "moduleName": "./lib/cell.js",
          "type": "cjs require",
          "userRequest": "react-datum",
          "loc": "26:15-37"
        },
        {
          "moduleId": 12,
          "moduleIdentifier": "/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/cache-loader/dist/cjs.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/babel-loader/lib/index.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/lib/datagrid.js",
          "module": "./lib/datagrid.js",
          "moduleName": "./lib/datagrid.js",
          "type": "cjs require",
          "userRequest": "react-datum",
          "loc": "35:15-37"
        }
      ],
      "usedExports": true,
      "providedExports": null,
      "optimizationBailout": [],
      "depth": 3
    },
    {
      "id": 6,
      "identifier": "/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/cache-loader/dist/cjs.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/babel-loader/lib/index.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/lib/helpers/reactStyles.js",
      "name": "./lib/helpers/reactStyles.js",
      "index": 15,
      "index2": 13,
      "size": 2256,
      "cacheable": true,
      "built": true,
      "optional": false,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/cache-loader/dist/cjs.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/babel-loader/lib/index.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/lib/datagrid.js",
      "issuerId": 12,
      "issuerName": "./lib/datagrid.js",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 12,
          "moduleIdentifier": "/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/cache-loader/dist/cjs.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/babel-loader/lib/index.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/lib/datagrid.js",
          "module": "./lib/datagrid.js",
          "moduleName": "./lib/datagrid.js",
          "type": "cjs require",
          "userRequest": "./helpers/reactStyles",
          "loc": "45:16-48"
        },
        {
          "moduleId": 20,
          "moduleIdentifier": "/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/cache-loader/dist/cjs.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/babel-loader/lib/index.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/lib/labelCell.js",
          "module": "./lib/labelCell.js",
          "moduleName": "./lib/labelCell.js",
          "type": "cjs require",
          "userRequest": "./helpers/reactStyles",
          "loc": "30:16-48"
        }
      ],
      "usedExports": true,
      "providedExports": null,
      "optimizationBailout": [],
      "depth": 3,
      "source": "'use strict';\n\n(function () {\n  var DeepSet,\n      ReactStyles,\n      _,\n      slice = [].slice;\n\n  _ = require('underscore');\n\n  DeepSet = require('./deepSet');\n\n  module.exports = ReactStyles = function () {\n    function ReactStyles(styles) {\n      this.styles = styles;\n    }\n\n    /*\n      Get's an object of React inline styles resolving any includes.  \n      \n      Context is optional and defaults to window.  \n      (see, ./reactStyles.md for more)\n     */\n\n    ReactStyles.prototype.get = function () {\n      var context, i, include, includes, j, len, len1, outStyles, style, styleName, styleNames;\n      context = arguments[0], styleNames = 2 <= arguments.length ? slice.call(arguments, 1) : [];\n      if (_.isString(context)) {\n        styleNames.splice(0, 0, context);\n        context = window;\n      }\n      outStyles = [{}];\n      for (i = 0, len = styleNames.length; i < len; i++) {\n        styleName = styleNames[i];\n        style = _.extend({}, this.styles[styleName]);\n        if (style == null) {\n          console.error(\"ReactStyles: invalid styleName specified: '\" + styleName + \"'\");\n          continue;\n        }\n        if (style.includes != null) {\n          includes = _.isArray(style.includes) ? style.includes : [style.includes];\n          for (j = 0, len1 = includes.length; j < len1; j++) {\n            include = includes[j];\n            switch (false) {\n              case !_.isString(include):\n                outStyles.push(this.get(context, include));\n                break;\n              case !_.isFunction(include):\n                outStyles.push(include.call(context));\n                break;\n              case !_.isObject(include):\n                outStyles.push(include);\n                break;\n              default:\n                throw \"Unrecognized include type (should be string, object or function): \" + JSON.stringify(include) + \" for styles: \" + JSON.stringify(this.styles);\n            }\n          }\n          delete style.includes;\n        }\n        outStyles.push(style);\n      }\n      return _.extend.apply(this, outStyles);\n    };\n\n    ReactStyles.prototype.set = function (deepAttr, value) {\n      return DeepSet(this.styles, deepAttr, value);\n    };\n\n    return ReactStyles;\n  }();\n}).call(undefined);"
    },
    {
      "id": 7,
      "identifier": "/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/classnames/index.js",
      "name": "./node_modules/classnames/index.js",
      "index": 18,
      "index2": 14,
      "size": 1102,
      "cacheable": true,
      "built": true,
      "optional": false,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/cache-loader/dist/cjs.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/babel-loader/lib/index.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/lib/cellWrapper.js",
      "issuerId": 19,
      "issuerName": "./lib/cellWrapper.js",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 8,
          "moduleIdentifier": "/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/cache-loader/dist/cjs.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/babel-loader/lib/index.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/lib/cell.js",
          "module": "./lib/cell.js",
          "moduleName": "./lib/cell.js",
          "type": "cjs require",
          "userRequest": "classnames",
          "loc": "30:15-36"
        },
        {
          "moduleId": 19,
          "moduleIdentifier": "/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/cache-loader/dist/cjs.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/babel-loader/lib/index.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/lib/cellWrapper.js",
          "module": "./lib/cellWrapper.js",
          "moduleName": "./lib/cellWrapper.js",
          "type": "cjs require",
          "userRequest": "classnames",
          "loc": "32:15-36"
        }
      ],
      "usedExports": true,
      "providedExports": null,
      "optimizationBailout": [],
      "depth": 4,
      "source": "/*!\n  Copyright (c) 2016 Jed Watson.\n  Licensed under the MIT License (MIT), see\n  http://jedwatson.github.io/classnames\n*/\n/* global define */\n\n(function () {\n\t'use strict';\n\n\tvar hasOwn = {}.hasOwnProperty;\n\n\tfunction classNames () {\n\t\tvar classes = [];\n\n\t\tfor (var i = 0; i < arguments.length; i++) {\n\t\t\tvar arg = arguments[i];\n\t\t\tif (!arg) continue;\n\n\t\t\tvar argType = typeof arg;\n\n\t\t\tif (argType === 'string' || argType === 'number') {\n\t\t\t\tclasses.push(arg);\n\t\t\t} else if (Array.isArray(arg)) {\n\t\t\t\tclasses.push(classNames.apply(null, arg));\n\t\t\t} else if (argType === 'object') {\n\t\t\t\tfor (var key in arg) {\n\t\t\t\t\tif (hasOwn.call(arg, key) && arg[key]) {\n\t\t\t\t\t\tclasses.push(key);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn classes.join(' ');\n\t}\n\n\tif (typeof module !== 'undefined' && module.exports) {\n\t\tmodule.exports = classNames;\n\t} else if (typeof define === 'function' && typeof define.amd === 'object' && define.amd) {\n\t\t// register as 'classnames', consistent with npm package name\n\t\tdefine('classnames', [], function () {\n\t\t\treturn classNames;\n\t\t});\n\t} else {\n\t\twindow.classNames = classNames;\n\t}\n}());\n"
    },
    {
      "id": 8,
      "identifier": "/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/cache-loader/dist/cjs.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/babel-loader/lib/index.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/lib/cell.js",
      "name": "./lib/cell.js",
      "index": 19,
      "index2": 15,
      "size": 9618,
      "cacheable": true,
      "built": true,
      "optional": false,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/cache-loader/dist/cjs.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/babel-loader/lib/index.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/lib/cellWrapper.js",
      "issuerId": 19,
      "issuerName": "./lib/cellWrapper.js",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 19,
          "moduleIdentifier": "/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/cache-loader/dist/cjs.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/babel-loader/lib/index.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/lib/cellWrapper.js",
          "module": "./lib/cellWrapper.js",
          "moduleName": "./lib/cellWrapper.js",
          "type": "cjs require",
          "userRequest": "./cell",
          "loc": "38:9-26"
        },
        {
          "moduleId": 20,
          "moduleIdentifier": "/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/cache-loader/dist/cjs.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/babel-loader/lib/index.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/lib/labelCell.js",
          "module": "./lib/labelCell.js",
          "moduleName": "./lib/labelCell.js",
          "type": "cjs require",
          "userRequest": "./cell",
          "loc": "32:9-26"
        }
      ],
      "usedExports": true,
      "providedExports": null,
      "optimizationBailout": [],
      "depth": 4,
      "source": "'use strict';\n\n(function () {\n  var Cell,\n      Classnames,\n      PropTypes,\n      React,\n      ReactDatum,\n      _,\n      bind = function bind(fn, me) {\n    return function () {\n      return fn.apply(me, arguments);\n    };\n  },\n      extend = function extend(child, parent) {\n    for (var key in parent) {\n      if (hasProp.call(parent, key)) child[key] = parent[key];\n    }function ctor() {\n      this.constructor = child;\n    }ctor.prototype = parent.prototype;child.prototype = new ctor();child.__super__ = parent.prototype;return child;\n  },\n      hasProp = {}.hasOwnProperty;\n\n  React = require('react');\n\n  ReactDatum = require('react-datum');\n\n  PropTypes = require('prop-types');\n\n  Classnames = require('classnames');\n\n  _ = require('underscore');\n\n  module.exports = Cell = function (superClass) {\n    extend(Cell, superClass);\n\n    Cell.propTypes = {\n      editing: PropTypes.bool,\n      rowData: PropTypes.object,\n      column: PropTypes.object,\n      datagrid: PropTypes.any,\n      onEdit: PropTypes.func,\n      defaultCellStyle: PropTypes.object\n    };\n\n    Cell.contextTypes = {\n      datagrid: PropTypes.any\n    };\n\n    function Cell() {\n      this.onEditClick = bind(this.onEditClick, this);\n      this._delayedForceUpdate = bind(this._delayedForceUpdate, this);\n      this._debouncedForceUpdate = bind(this._debouncedForceUpdate, this);\n      this.renderWrapped = bind(this.renderWrapped, this);\n      Cell.__super__.constructor.apply(this, arguments);\n    }\n\n    Cell.prototype.componentDidMount = function () {\n      return Cell.__super__.componentDidMount.apply(this, arguments);\n    };\n\n    Cell.prototype.render = function () {\n      var datumComponent, datumProps, ref, value;\n      value = this.props.value;\n      datumProps = _.extend({}, this.props.column.datumProps, {\n        model: this.getModel(),\n        attr: this.props.column.key,\n        column: this.props.column,\n        ref: 'datum',\n        inputMode: this.props.editing ? 'edit' : 'readonly'\n      });\n      datumProps = _.defaults(datumProps, {\n        rbOverlayProps: {\n          trigger: ['hover', 'focus', 'click'],\n          placement: 'top'\n        }\n      });\n      datumComponent = (ref = this.props.column.datum) != null ? ref : ReactDatum.Text;\n      value = React.createElement(this.props.column.datum, datumProps);\n      this.renderWrapped(value);\n      return renderedCell;\n    };\n\n    Cell.prototype.renderWrapped = function (value, options) {\n      var canEditCell, className, icon, ref, wrapperStyle;\n      if (options == null) {\n        options = {};\n      }\n      options = _.defaults(options, {\n        title: null,\n        wrapperStyle: {}\n      });\n      this.setDatumErrors();\n      canEditCell = (ref = this.getDatagrid()) != null ? ref.canEditCell(this.props.column, this.getModel()) : void 0;\n      wrapperStyle = $.extend(true, {}, options.wrapperStyle, this.getCellStyle(canEditCell));\n      className = this.getCellClass(canEditCell);\n      icon = this.getPrimaryIcon(canEditCell);\n      return React.createElement(\"div\", {\n        \"data-attr-row\": this.props.rowIdx,\n        \"data-attr-col\": this.props.column.key,\n        \"className\": className,\n        \"title\": options.title,\n        \"style\": wrapperStyle\n      }, icon, React.createElement(\"span\", null, value));\n    };\n\n    Cell.prototype._debouncedForceUpdate = function () {\n      return _.debounce(function (_this) {\n        return function () {\n          return _this.forceUpdate();\n        };\n      }(this), 50);\n    };\n\n    Cell.prototype._delayedForceUpdate = function (delay) {\n      if (delay == null) {\n        delay = 5000;\n      }\n      return _.delay(this._debouncedForceUpdate, 5000);\n    };\n\n    Cell.prototype.onEditClick = function (evt) {\n      return _.defer(function (_this) {\n        return function () {\n          var ref;\n          if (_this.props.onEdit != null) {\n            return _this.props.onEdit(_this, evt);\n          } else {\n            return (ref = _this.getDatagrid()) != null ? typeof ref.editCurrentCell === \"function\" ? ref.editCurrentCell() : void 0 : void 0;\n          }\n        };\n      }(this));\n    };\n\n    Cell.prototype.getModel = function () {\n      return this.props.rowData;\n    };\n\n    Cell.prototype.getDatagrid = function () {\n      var ref;\n      return (ref = this.props.datagrid) != null ? ref : this.context.datagrid;\n    };\n\n    Cell.prototype.getCellClass = function (canEditCell) {\n      var model, ref;\n      model = this.getModel();\n      return Classnames('rdd-cell', \"rdd-\" + this.props.column.key.dasherize() + \"-column no-help-icon\", this.getAdditionalElementClasses(), {\n        'rdd-cell-error': ((ref = this.getDatagridSaveErrors()) != null ? ref.length : void 0) > 0\n      }, {\n        'rdd-cell-saved': this.getDatagridSaveSuccess() === true\n      }, {\n        'rdd-editable': canEditCell\n      }, {\n        'rdd-selected': this.isSelected()\n      });\n    };\n\n    Cell.prototype.getCellStyle = function (canEditCell) {\n      var model;\n      model = this.getModel();\n      return $.extend(true, {}, this.getCellDefaultStyle(model), this.props.column.cellStyle, this.getCellOverrideStyle(model));\n    };\n\n    Cell.prototype.getCellDefaultStyle = function (model) {\n      var cellStyle, ref;\n      cellStyle = _.extend({}, (ref = this.props.defaultCellStyle) != null ? ref : {});\n      if (this.props.column.rightAlign) {\n        cellStyle.textAlign = 'right';\n        cellStyle.paddingRight = 10;\n      }\n      return cellStyle;\n    };\n\n    Cell.prototype.getCellOverrideStyle = function (model) {\n      return {};\n    };\n\n    Cell.prototype.getPrimaryIcon = function (canEditCell) {\n      var icon, model;\n      icon = null;\n      model = this.getModel();\n      if (model == null) {\n        return null;\n      }\n      if (this.getDatagridSaving()) {\n        icon = React.createElement(\"i\", {\n          \"className\": \"fa fa-spin fa-refresh rdd-icon rdd-icon-refresh\",\n          \"title\": \"Saving update...\"\n        });\n      } else if (canEditCell && !this.props.column.hideEditableIcon) {\n        icon = React.createElement(\"i\", {\n          \"className\": \"fa fa-pencil rdd-icon rdd-icon-edit\",\n          \"onClick\": this.onEditClick,\n          \"title\": \"Click to edit this cell (or dbclick or enter)\"\n        });\n      }\n      return icon;\n    };\n\n    Cell.prototype.getAdditionalElementClasses = function () {\n      return null;\n    };\n\n    Cell.prototype.getDatagridSaveErrors = function () {\n      var model, ref, ref1, ref2;\n      model = this.getModel();\n      return (ref = (ref1 = model != null ? typeof model.getDatagridSaveErrors === \"function\" ? model.getDatagridSaveErrors(this.props.column.key) : void 0 : void 0) != null ? ref1 : model != null ? (ref2 = model.__datagridSaveErrors) != null ? ref2[this.props.column.key] : void 0 : void 0) != null ? ref : [];\n    };\n\n    Cell.prototype.getDatagridSaveSuccess = function () {\n      var model, ref, ref1, ref2;\n      model = this.getModel();\n      return (ref = (ref1 = model != null ? typeof model.getDatagridSaveSuccess === \"function\" ? model.getDatagridSaveSuccess(this.props.column.key) : void 0 : void 0) != null ? ref1 : model != null ? (ref2 = model.__datagridSaveSuccess) != null ? ref2[this.props.column.key] : void 0 : void 0) != null ? ref : false;\n    };\n\n    Cell.prototype.setDatagridSaveSuccess = function (trueOrFalse) {\n      var model, ref;\n      model = this.getModel();\n      if (model == null) {\n        return;\n      }\n      if (_.isFunction(model.setDatagridSaveSuccess)) {\n        return model.setDatagridSaveSuccess(this.props.column.key, trueOrFalse);\n      } else {\n        return (ref = model.__datagridSaveSuccess) != null ? ref[this.props.column.key] = trueOrFalse : void 0;\n      }\n    };\n\n    Cell.prototype.getDatagridSaving = function () {\n      var model, ref, ref1, ref2;\n      model = this.getModel();\n      return (ref = (ref1 = model != null ? typeof model.getDatagridSaving === \"function\" ? model.getDatagridSaving(this.props.column.key) : void 0 : void 0) != null ? ref1 : model != null ? (ref2 = model.__datagridSaving) != null ? ref2[this.props.column.key] : void 0 : void 0) != null ? ref : false;\n    };\n\n    Cell.prototype.isSelected = function () {\n      var ref;\n      return (ref = this.getDatagrid()) != null ? typeof ref.isCellSelected === \"function\" ? ref.isCellSelected(this.props.rowIdx, this.props.column.key) : void 0 : void 0;\n    };\n\n    Cell.prototype.setDatumErrors = function () {\n      var model, saveErrorResp;\n      model = this.getModel();\n      if (model == null) {\n        return;\n      }\n      saveErrorResp = this.getDatagridSaveErrors();\n      if ((saveErrorResp != null ? saveErrorResp.length : void 0) > 0) {\n        _.defer(function (_this) {\n          return function () {\n            var base;\n            if (_this.refs.datum != null) {\n              if (typeof (base = _this.refs.datum).clearErrors === \"function\") {\n                base.clearErrors();\n              }\n              return _this.refs.datum.onModelSaveError(_this.getModel(), saveErrorResp);\n            }\n          };\n        }(this));\n      }\n      if (this.getDatagridSaveSuccess()) {\n        _.defer(function (_this) {\n          return function () {\n            var base;\n            if (_this.refs.datum != null) {\n              if (typeof (base = _this.refs.datum).clearErrors === \"function\") {\n                base.clearErrors();\n              }\n            }\n            return _this.setDatagridSaveSuccess(false);\n          };\n        }(this));\n        return this._delayedForceUpdate();\n      }\n    };\n\n    return Cell;\n  }(React.Component);\n}).call(undefined);"
    },
    {
      "id": 9,
      "identifier": "multi ./index.js",
      "name": "multi ./index.js",
      "index": 0,
      "index2": 26,
      "size": 28,
      "cacheable": true,
      "built": true,
      "optional": false,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": null,
      "issuerId": null,
      "issuerName": null,
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [],
      "usedExports": true,
      "providedExports": null,
      "optimizationBailout": [],
      "depth": 0
    },
    {
      "id": 10,
      "identifier": "/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/cache-loader/dist/cjs.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/babel-loader/lib/index.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/index.js",
      "name": "./index.js",
      "index": 1,
      "index2": 25,
      "size": 191,
      "cacheable": true,
      "built": true,
      "optional": false,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "multi ./index.js",
      "issuerId": 9,
      "issuerName": "multi ./index.js",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 9,
          "moduleIdentifier": "multi ./index.js",
          "module": "multi ./index.js",
          "moduleName": "multi ./index.js",
          "type": "single entry",
          "userRequest": "./index.js",
          "loc": "main:100000"
        }
      ],
      "usedExports": true,
      "providedExports": null,
      "optimizationBailout": [],
      "depth": 1,
      "source": "'use strict';\n\nvar _ReactDatumDatagrid = require('./lib/datagrid');\n\nif (window) {\n  window.ReactDatumDatagrid = _ReactDatumDatagrid;\n}\nif (module) {\n  module.exports = _ReactDatumDatagrid;\n}"
    },
    {
      "id": 11,
      "identifier": "/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/webpack/buildin/module.js",
      "name": "(webpack)/buildin/module.js",
      "index": 2,
      "index2": 0,
      "size": 517,
      "cacheable": true,
      "built": true,
      "optional": false,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/cache-loader/dist/cjs.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/babel-loader/lib/index.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/index.js",
      "issuerId": 10,
      "issuerName": "./index.js",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 10,
          "moduleIdentifier": "/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/cache-loader/dist/cjs.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/babel-loader/lib/index.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/index.js",
          "module": "./index.js",
          "moduleName": "./index.js",
          "type": "cjs require",
          "userRequest": "module",
          "loc": "1:0-51"
        }
      ],
      "usedExports": true,
      "providedExports": null,
      "optimizationBailout": [],
      "depth": 2,
      "source": "module.exports = function(module) {\r\n\tif(!module.webpackPolyfill) {\r\n\t\tmodule.deprecate = function() {};\r\n\t\tmodule.paths = [];\r\n\t\t// module.parent = undefined by default\r\n\t\tif(!module.children) module.children = [];\r\n\t\tObject.defineProperty(module, \"loaded\", {\r\n\t\t\tenumerable: true,\r\n\t\t\tget: function() {\r\n\t\t\t\treturn module.l;\r\n\t\t\t}\r\n\t\t});\r\n\t\tObject.defineProperty(module, \"id\", {\r\n\t\t\tenumerable: true,\r\n\t\t\tget: function() {\r\n\t\t\t\treturn module.i;\r\n\t\t\t}\r\n\t\t});\r\n\t\tmodule.webpackPolyfill = 1;\r\n\t}\r\n\treturn module;\r\n};\r\n"
    },
    {
      "id": 12,
      "identifier": "/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/cache-loader/dist/cjs.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/babel-loader/lib/index.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/lib/datagrid.js",
      "name": "./lib/datagrid.js",
      "index": 3,
      "index2": 24,
      "size": 16007,
      "cacheable": true,
      "built": true,
      "optional": false,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/cache-loader/dist/cjs.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/babel-loader/lib/index.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/index.js",
      "issuerId": 10,
      "issuerName": "./index.js",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 10,
          "moduleIdentifier": "/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/cache-loader/dist/cjs.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/babel-loader/lib/index.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/index.js",
          "module": "./index.js",
          "moduleName": "./index.js",
          "type": "cjs require",
          "userRequest": "./lib/datagrid",
          "loc": "3:26-51"
        }
      ],
      "usedExports": true,
      "providedExports": null,
      "optimizationBailout": [],
      "depth": 2,
      "source": "'use strict';\n\n(function () {\n  var $,\n      CellWrapper,\n      Datagrid,\n      GridEdit,\n      GridSelect,\n      LabelCell,\n      Mixin,\n      PropTypes,\n      React,\n      ReactDOM,\n      ReactDatum,\n      ReactStyles,\n      _,\n      bind = function bind(fn, me) {\n    return function () {\n      return fn.apply(me, arguments);\n    };\n  },\n      extend = function extend(child, parent) {\n    for (var key in parent) {\n      if (hasProp.call(parent, key)) child[key] = parent[key];\n    }function ctor() {\n      this.constructor = child;\n    }ctor.prototype = parent.prototype;child.prototype = new ctor();child.__super__ = parent.prototype;return child;\n  },\n      hasProp = {}.hasOwnProperty;\n\n  React = require('react');\n\n  ReactDOM = require('react-dom');\n\n  ReactDatum = require('react-datum');\n\n  PropTypes = require('prop-types');\n\n  _ = require('underscore');\n\n  $ = require('jquery');\n\n  Mixin = require('./helpers/mixin');\n\n  ReactStyles = require('./helpers/reactStyles');\n\n  CellWrapper = require('./cellWrapper');\n\n  LabelCell = require('./labelCell');\n\n  GridEdit = require('./gridEdit');\n\n  GridSelect = require('./gridSelect');\n\n  /*\n    This is react-datum-datagrid.   \n    \n    Example:\n    TODO\n   */\n\n  module.exports = Datagrid = function (superClass) {\n    extend(Datagrid, superClass);\n\n    function Datagrid() {\n      this._onLabelScroll = bind(this._onLabelScroll, this);\n      this._onBottomGridScroll = bind(this._onBottomGridScroll, this);\n      this._onTopGridScroll = bind(this._onTopGridScroll, this);\n      return Datagrid.__super__.constructor.apply(this, arguments);\n    }\n\n    Datagrid.displayName = \"react-datum-datagrid\";\n\n    Datagrid.DEFAULT_CELL_HEIGHT = 20;\n\n    Datagrid.DEFAULT_CELL_BORDER_WIDTH = 1;\n\n    Datagrid.DEFAULT_CELL_PADDING_HEIGHT = 5;\n\n    Datagrid.DEFAULT_CELL_PADDING_WIDTH = 10;\n\n    Datagrid.propTypes = {\n      collection: PropTypes.oneOfType([PropTypes.object, PropTypes.array]),\n      columns: PropTypes.array,\n      silentSaveErrors: PropTypes.bool,\n      labelWidth: PropTypes.number,\n      onHideColumn: PropTypes.func,\n      onShowColumn: PropTypes.func\n    };\n\n    Datagrid.defaultProps = {\n      labelWidth: 300\n    };\n\n    Datagrid.childContextTypes = {\n      datagrid: PropTypes.instanceOf(Datagrid.constructor)\n    };\n\n    Datagrid.prototype.getChildContext = function () {\n      return {\n        datagrid: this\n      };\n    };\n\n    Datagrid.prototype.styles = new ReactStyles({\n      container: {\n        includes: function includes() {\n          return this.props.style;\n        }\n      },\n      headers: {\n        includes: function includes() {\n          return {\n            width: this.props.labelWidth\n          };\n        },\n        display: 'inline-block',\n        backgroundColor: '#eceff6',\n        height: '100%',\n        verticalAlign: 'top'\n      },\n      gridsContainer: {\n        includes: function includes() {\n          return {\n            width: \"calc(100% - \" + this.props.labelWidth + \"px)\"\n          };\n        },\n        display: 'inline-block',\n        height: '100%'\n      },\n      topGrid: {\n        includes: ['bottomDivider', function () {\n          return {\n            height: this._getTopGridHeight()\n          };\n        }],\n        width: 'calc(100% - 13px)'\n      },\n      bottomGrid: {\n        includes: function includes() {\n          return {\n            height: this._getBottomGridHeight()\n          };\n        },\n        width: '100%'\n      },\n      fixedHeaderCells: {\n        includes: ['bottomDivider', function () {\n          return {\n            height: this._getTopGridHeight() + 1\n          };\n        }],\n        width: '100%'\n      },\n      scrollingHeaderCells: {\n        includes: function includes() {\n          return {\n            height: \"calc(100% - \" + (this._getTopGridHeight() + 20) + \"px)\"\n          };\n        },\n        width: '100%',\n        marginTop: 1\n      },\n      scrollingHeaderCellsViewport: {\n        height: '100%',\n        overflowY: 'scroll'\n      },\n      styleImage: {\n        width: 50,\n        minHeight: 60\n      },\n      bottomDivider: {\n        borderBottom: \"3px solid #cccccc\"\n      }\n    });\n\n    Datagrid.prototype.componentDidMount = function () {\n      this._initializeScrolling();\n      return Datagrid.__super__.componentDidMount.apply(this, arguments);\n    };\n\n    Datagrid.prototype.style = function (name) {\n      var ref;\n      return _.extend({}, this.styles.get(this, name), ((ref = this.props.styles) != null ? ref[name] : void 0) || {});\n    };\n\n    Datagrid.prototype.render = function () {\n      var fixedColumns, scrollingColumns;\n      fixedColumns = this._getFixedColumns();\n      scrollingColumns = this._getScrollingColumns();\n      return React.createElement(\"div\", {\n        \"style\": this.style('container'),\n        \"className\": 'react-datum-datagrid'\n      }, React.createElement(\"div\", {\n        \"style\": this.style('headers'),\n        \"className\": 'rdd-headers'\n      }, React.createElement(\"div\", {\n        \"style\": this.style('fixedHeaderCells'),\n        \"className\": 'rdd-fixed-header-cells'\n      }, this._renderHeaderCells(fixedColumns)), React.createElement(\"div\", {\n        \"style\": this.style('scrollingHeaderCells'),\n        \"className\": 'rdd-scrolling-header-cells'\n      }, React.createElement(\"div\", {\n        \"style\": this.style('scrollingHeaderCellsViewport')\n      }, this._renderHeaderCells(scrollingColumns)))), React.createElement(\"div\", {\n        \"style\": this.style('gridsContainer')\n      }, React.createElement(\"div\", {\n        \"style\": this.style('topGrid'),\n        \"className\": 'rdd-top-grid'\n      }, React.createElement(ReactGrid, {\n        \"collection\": this.props.collection,\n        \"ref\": 'topGrid',\n        \"gridSelectionClass\": null,\n        \"gridOptions\": {\n          preloadCushion: 200,\n          pageSize: 20\n        }\n      }, function (_this) {\n        return function (model, rowIdx) {\n          return _this._renderDataCells(_this._getFixedColumns(), model, rowIdx, 0);\n        };\n      }(this))), React.createElement(\"div\", {\n        \"style\": this.style('bottomGrid'),\n        \"className\": 'rdd-bottom-grid'\n      }, React.createElement(ReactGrid, {\n        \"collection\": this.props.collection,\n        \"ref\": 'bottomGrid',\n        \"gridSelectionClass\": null,\n        \"gridOptions\": {\n          preloadCushion: 200,\n          pageSize: 20\n        }\n      }, function (_this) {\n        return function (model, rowIdx) {\n          return _this._renderDataCells(_this._getScrollingColumns(), model, rowIdx, _this._getFixedColumns().length);\n        };\n      }(this)))));\n    };\n\n    /*\n      Override me to conditionally enable editing on a per cell basis\n     */\n\n    Datagrid.prototype.canEditCell = function (col, rowModel) {\n      var ref, ref1;\n      if (!(col != null ? col.editable : void 0)) {\n        return false;\n      }\n      if (col != null ? (ref = col.datum) != null ? (ref1 = ref.prototype) != null ? typeof ref1.isLocked === \"function\" ? ref1.isLocked(col, rowModel) : void 0 : void 0 : void 0 : void 0) {\n        return false;\n      }\n      return true;\n    };\n\n    Datagrid.prototype.getSelectedCell = function () {\n      var $focusedCell, colIdx, columnDef, rowIdx;\n      $focusedCell = $(ReactDOM.findDOMNode(this)).find('.rdd-cell-wrapper:focus');\n      if (!(($focusedCell != null ? $focusedCell.length : void 0) > 0)) {\n        return null;\n      }\n      rowIdx = ReactDatum.Number.safelyFloat($focusedCell.attr('data-row'));\n      colIdx = ReactDatum.Number.safelyFloat($focusedCell.attr('data-col'));\n      columnDef = this.getColumn(colIdx);\n      return {\n        rowIdx: rowIdx,\n        idx: colIdx,\n        col: columnDef.key\n      };\n    };\n\n    Datagrid.prototype.setSelectedCell = function (rowIndex, colIndex) {\n      var $requestedCell;\n      $requestedCell = $(ReactDOM.findDOMNode(this)).find(\".rdd-cell-wrapper[data-row=\" + rowIndex + \"][data-col=\" + colIndex + \"]\");\n      if (!(($requestedCell != null ? $requestedCell.length : void 0) > 0)) {\n        return;\n      }\n      return $requestedCell.focus();\n    };\n\n    Datagrid.prototype.unsetSelectedCell = function () {\n      if (this.getSelectedCell() != null) {\n        return document.activeElement.blur();\n      }\n    };\n\n    Datagrid.prototype.isCellSelected = function (rowIdx, colKey) {\n      var selectedCell;\n      selectedCell = this.getSelectedCell();\n      return selectedCell.rowIdx === rowIdx && selectedCell.col === colKey;\n    };\n\n    Datagrid.prototype.refresh = function () {\n      var ref, ref1, ref2, ref3;\n      if ((ref = this.refs.topGrid) != null) {\n        if ((ref1 = ref.grid) != null) {\n          ref1.refresh();\n        }\n      }\n      if ((ref2 = this.refs.bottomGrid) != null) {\n        if ((ref3 = ref2.grid) != null) {\n          ref3.refresh();\n        }\n      }\n      this._onLabelScroll();\n      return _.defer(function (_this) {\n        return function () {\n          return _this._onLabelScroll();\n        };\n      }(this));\n    };\n\n    Datagrid.prototype._renderHeaderCells = function (columnDefs) {\n      var cells, columnDef, index;\n      cells = function () {\n        var i, len, results;\n        results = [];\n        for (index = i = 0, len = columnDefs.length; i < len; index = ++i) {\n          columnDef = columnDefs[index];\n          results.push(this._renderLabelCell(index, columnDef));\n        }\n        return results;\n      }.call(this);\n      return cells;\n    };\n\n    Datagrid.prototype._renderLabelCell = function (index, columnDef) {\n      var labelStyle, ref;\n      if (columnDef == null) {\n        return null;\n      }\n      labelStyle = $.extend(true, {}, this._getDefaultCellStyle(columnDef), (ref = columnDef.flipgrid) != null ? ref.labelStyle : void 0);\n      return React.createElement(LabelCell, {\n        \"key\": index,\n        \"column\": columnDef,\n        \"datagrid\": this,\n        \"defaultCellStyle\": labelStyle,\n        \"onShowColumn\": this.props.onShowColumn,\n        \"onHideColumn\": this.props.onHideColumn\n      });\n    };\n\n    Datagrid.prototype._renderDataCells = function (columnDefs, model, rowIdx, baseColumnIndex) {\n      var cells, columnDef, index;\n      return cells = function () {\n        var i, len, results;\n        results = [];\n        for (index = i = 0, len = columnDefs.length; i < len; index = ++i) {\n          columnDef = columnDefs[index];\n          results.push(this._renderDataCell(index, columnDef, model, rowIdx, baseColumnIndex));\n        }\n        return results;\n      }.call(this);\n    };\n\n    Datagrid.prototype._renderDataCell = function (index, columnDef, model, rowIdx, baseColumnIndex) {\n      return React.createElement(CellWrapper, {\n        \"model\": model,\n        \"column\": columnDef,\n        \"rowIdx\": rowIdx,\n        \"colIdx\": baseColumnIndex + index,\n        \"datagrid\": this,\n        \"defaultCellStyle\": this._getDefaultCellStyle(columnDef)\n      });\n    };\n\n    Datagrid.prototype._getFixedColumns = function () {\n      return _.filter(this.props.columns, function (columnDef) {\n        return columnDef.locked;\n      });\n    };\n\n    Datagrid.prototype._getScrollingColumns = function () {\n      return _.filter(this.props.columns, function (columnDef) {\n        return !columnDef.locked;\n      });\n    };\n\n    Datagrid.prototype._initializeScrolling = function () {\n      var bottomGridEl, scrollingLableCellsEl, topGridEl;\n      topGridEl = ReactDOM.findDOMNode(this.refs.topGrid).querySelector('.grid');\n      bottomGridEl = ReactDOM.findDOMNode(this.refs.bottomGrid).querySelector('.grid');\n      topGridEl.addEventListener('scroll', this._onTopGridScroll);\n      bottomGridEl.addEventListener('scroll', this._onBottomGridScroll);\n      scrollingLableCellsEl = ReactDOM.findDOMNode(this).querySelector('.scrolling-label-cells > div');\n      return scrollingLableCellsEl.addEventListener('scroll', this._onLabelScroll);\n    };\n\n    Datagrid.prototype._onTopGridScroll = function () {\n      var bottomGridEl, topGridEl;\n      if (!this._isBottomInitiatedScrolling) {\n        this._isTopInitiatedScrolling = true;\n        topGridEl = ReactDOM.findDOMNode(this.refs.topGrid).querySelector('.grid');\n        bottomGridEl = ReactDOM.findDOMNode(this.refs.bottomGrid).querySelector('.grid');\n        bottomGridEl.scrollLeft = topGridEl.scrollLeft;\n      }\n      return this._isBottomInitiatedScrolling = false;\n    };\n\n    Datagrid.prototype._onBottomGridScroll = function () {\n      var bottomGridEl, scrollingLableCellsEl, topGridEl;\n      if (!(this._isTopInitiatedScrolling || this._isLabelInitiatedScrolling)) {\n        this._isBottomInitiatedScrolling = true;\n        topGridEl = ReactDOM.findDOMNode(this.refs.topGrid).querySelector('.grid');\n        bottomGridEl = ReactDOM.findDOMNode(this.refs.bottomGrid).querySelector('.grid');\n        topGridEl.scrollLeft = bottomGridEl.scrollLeft;\n      }\n      this._isTopInitiatedScrolling = false;\n      if (!this._isLabelInitiatedScrolling) {\n        scrollingLableCellsEl = ReactDOM.findDOMNode(this).querySelector('.scrolling-label-cells > div');\n        bottomGridEl = ReactDOM.findDOMNode(this.refs.bottomGrid).querySelector('.grid');\n        scrollingLableCellsEl.scrollTop = bottomGridEl.scrollTop;\n      }\n      return this._isLabelInitiatedScrolling = false;\n    };\n\n    Datagrid.prototype._onLabelScroll = function () {\n      var bottomGridEl, scrollingLableCellsEl;\n      if (!this._isBottomInitiatedScrolling) {\n        this._isLabelInitiatedScrolling = true;\n        scrollingLableCellsEl = ReactDOM.findDOMNode(this).querySelector('.scrolling-label-cells > div');\n        bottomGridEl = ReactDOM.findDOMNode(this.refs.bottomGrid).querySelector('.grid');\n        bottomGridEl.scrollTop = scrollingLableCellsEl.scrollTop;\n      }\n      return this._isBottomInitiatedScrolling = false;\n    };\n\n    Datagrid.prototype._getTopGridHeight = function () {\n      var col, heightOut, i, len, ref, ref1, ref2, ref3, ref4, ref5, ref6, ref7;\n      heightOut = 0;\n      ref = this._getFixedColumns();\n      for (i = 0, len = ref.length; i < len; i++) {\n        col = ref[i];\n        heightOut += (ref1 = this._convertCssPx((ref2 = col.cellStyle) != null ? ref2.borderWidth : void 0)) != null ? ref1 : this.constructor.DEFAULT_CELL_BORDER_WIDTH;\n        heightOut += (ref3 = col.height) != null ? ref3 : this.constructor.DEFAULT_CELL_HEIGHT;\n        heightOut += (ref4 = this._convertCssPx((ref5 = col.cellStyle) != null ? ref5.paddingTop : void 0)) != null ? ref4 : this.constructor.DEFAULT_CELL_PADDING_HEIGHT;\n        heightOut += (ref6 = this._convertCssPx((ref7 = col.cellStyle) != null ? ref7.paddingBottom : void 0)) != null ? ref6 : this.constructor.DEFAULT_CELL_PADDING_HEIGHT;\n      }\n      return heightOut;\n    };\n\n    Datagrid.prototype._getBottomGridHeight = function () {\n      return \"calc(100% - \" + (this._getTopGridHeight() + 5) + \"px)\";\n    };\n\n    Datagrid.prototype._convertCssPx = function (value) {\n      var numerals, ref;\n      if (value == null) {\n        return null;\n      }\n      if (_.isString(value)) {\n        numerals = (ref = value.match(/[^0-9\\.]*([0-9\\.]*).*/)) != null ? ref[1] : void 0;\n        if (numerals == null) {\n          return 0;\n        }\n        return parseInt(numerals);\n      }\n      return value;\n    };\n\n    Datagrid.prototype._getDefaultCellStyle = function (columnDef) {\n      var cellStyle;\n      cellStyle = {\n        height: columnDef.height || this.constructor.DEFAULT_CELL_HEIGHT,\n        borderColor: \"#EFEFEF\",\n        borderStyle: 'solid',\n        borderWidth: 0,\n        borderBottomWidth: this.constructor.DEFAULT_CELL_BORDER_WIDTH,\n        paddingTop: this.constructor.DEFAULT_CELL_PADDING_HEIGHT,\n        paddingBottom: this.constructor.DEFAULT_CELL_PADDING_HEIGHT,\n        paddingLeft: this.constructor.DEFAULT_CELL_PADDING_WIDTH,\n        paddingRight: this.constructor.DEFAULT_CELL_PADDING_WIDTH\n      };\n      return cellStyle;\n    };\n\n    Mixin(Datagrid, GridEdit);\n\n    Mixin(Datagrid, GridSelect);\n\n    return Datagrid;\n  }(React.Component);\n}).call(undefined);"
    },
    {
      "id": 13,
      "identifier": "/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/prop-types/factoryWithThrowingShims.js",
      "name": "./node_modules/prop-types/factoryWithThrowingShims.js",
      "index": 8,
      "index2": 7,
      "size": 1492,
      "cacheable": true,
      "built": true,
      "optional": false,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/prop-types/index.js",
      "issuerId": 3,
      "issuerName": "./node_modules/prop-types/index.js",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 3,
          "moduleIdentifier": "/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/prop-types/index.js",
          "module": "./node_modules/prop-types/index.js",
          "moduleName": "./node_modules/prop-types/index.js",
          "type": "cjs require",
          "userRequest": "./factoryWithThrowingShims",
          "loc": "27:19-56"
        }
      ],
      "usedExports": true,
      "providedExports": null,
      "optimizationBailout": [],
      "depth": 4,
      "source": "/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\nvar emptyFunction = require('fbjs/lib/emptyFunction');\nvar invariant = require('fbjs/lib/invariant');\nvar ReactPropTypesSecret = require('./lib/ReactPropTypesSecret');\n\nmodule.exports = function() {\n  function shim(props, propName, componentName, location, propFullName, secret) {\n    if (secret === ReactPropTypesSecret) {\n      // It is still safe when called from React.\n      return;\n    }\n    invariant(\n      false,\n      'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +\n      'Use PropTypes.checkPropTypes() to call them. ' +\n      'Read more at http://fb.me/use-check-prop-types'\n    );\n  };\n  shim.isRequired = shim;\n  function getShim() {\n    return shim;\n  };\n  // Important!\n  // Keep this list in sync with production version in `./factoryWithTypeCheckers.js`.\n  var ReactPropTypes = {\n    array: shim,\n    bool: shim,\n    func: shim,\n    number: shim,\n    object: shim,\n    string: shim,\n    symbol: shim,\n\n    any: shim,\n    arrayOf: getShim,\n    element: shim,\n    instanceOf: getShim,\n    node: shim,\n    objectOf: getShim,\n    oneOf: getShim,\n    oneOfType: getShim,\n    shape: getShim,\n    exact: getShim\n  };\n\n  ReactPropTypes.checkPropTypes = emptyFunction;\n  ReactPropTypes.PropTypes = ReactPropTypes;\n\n  return ReactPropTypes;\n};\n"
    },
    {
      "id": 14,
      "identifier": "/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/fbjs/lib/emptyFunction.js",
      "name": "./node_modules/fbjs/lib/emptyFunction.js",
      "index": 9,
      "index2": 4,
      "size": 959,
      "cacheable": true,
      "built": true,
      "optional": false,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/prop-types/factoryWithThrowingShims.js",
      "issuerId": 13,
      "issuerName": "./node_modules/prop-types/factoryWithThrowingShims.js",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 13,
          "moduleIdentifier": "/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/prop-types/factoryWithThrowingShims.js",
          "module": "./node_modules/prop-types/factoryWithThrowingShims.js",
          "moduleName": "./node_modules/prop-types/factoryWithThrowingShims.js",
          "type": "cjs require",
          "userRequest": "fbjs/lib/emptyFunction",
          "loc": "10:20-53"
        }
      ],
      "usedExports": true,
      "providedExports": null,
      "optimizationBailout": [],
      "depth": 5,
      "source": "\"use strict\";\n\n/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n\nfunction makeEmptyFunction(arg) {\n  return function () {\n    return arg;\n  };\n}\n\n/**\n * This function accepts and discards inputs; it has no side effects. This is\n * primarily useful idiomatically for overridable function endpoints which\n * always need to be callable, since JS lacks a null-call idiom ala Cocoa.\n */\nvar emptyFunction = function emptyFunction() {};\n\nemptyFunction.thatReturns = makeEmptyFunction;\nemptyFunction.thatReturnsFalse = makeEmptyFunction(false);\nemptyFunction.thatReturnsTrue = makeEmptyFunction(true);\nemptyFunction.thatReturnsNull = makeEmptyFunction(null);\nemptyFunction.thatReturnsThis = function () {\n  return this;\n};\nemptyFunction.thatReturnsArgument = function (arg) {\n  return arg;\n};\n\nmodule.exports = emptyFunction;"
    },
    {
      "id": 15,
      "identifier": "/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/fbjs/lib/invariant.js",
      "name": "./node_modules/fbjs/lib/invariant.js",
      "index": 10,
      "index2": 5,
      "size": 1506,
      "cacheable": true,
      "built": true,
      "optional": false,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/prop-types/factoryWithThrowingShims.js",
      "issuerId": 13,
      "issuerName": "./node_modules/prop-types/factoryWithThrowingShims.js",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 13,
          "moduleIdentifier": "/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/prop-types/factoryWithThrowingShims.js",
          "module": "./node_modules/prop-types/factoryWithThrowingShims.js",
          "moduleName": "./node_modules/prop-types/factoryWithThrowingShims.js",
          "type": "cjs require",
          "userRequest": "fbjs/lib/invariant",
          "loc": "11:16-45"
        }
      ],
      "usedExports": true,
      "providedExports": null,
      "optimizationBailout": [],
      "depth": 5,
      "source": "/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n'use strict';\n\n/**\n * Use invariant() to assert state which your program assumes to be true.\n *\n * Provide sprintf-style format (only %s is supported) and arguments\n * to provide information about what broke and what you were\n * expecting.\n *\n * The invariant message will be stripped in production, but the invariant\n * will remain to ensure logic does not differ in production.\n */\n\nvar validateFormat = function validateFormat(format) {};\n\nif (process.env.NODE_ENV !== 'production') {\n  validateFormat = function validateFormat(format) {\n    if (format === undefined) {\n      throw new Error('invariant requires an error message argument');\n    }\n  };\n}\n\nfunction invariant(condition, format, a, b, c, d, e, f) {\n  validateFormat(format);\n\n  if (!condition) {\n    var error;\n    if (format === undefined) {\n      error = new Error('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');\n    } else {\n      var args = [a, b, c, d, e, f];\n      var argIndex = 0;\n      error = new Error(format.replace(/%s/g, function () {\n        return args[argIndex++];\n      }));\n      error.name = 'Invariant Violation';\n    }\n\n    error.framesToPop = 1; // we don't care about invariant's own frame\n    throw error;\n  }\n}\n\nmodule.exports = invariant;"
    },
    {
      "id": 16,
      "identifier": "/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/prop-types/lib/ReactPropTypesSecret.js",
      "name": "./node_modules/prop-types/lib/ReactPropTypesSecret.js",
      "index": 11,
      "index2": 6,
      "size": 314,
      "cacheable": true,
      "built": true,
      "optional": false,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/prop-types/factoryWithThrowingShims.js",
      "issuerId": 13,
      "issuerName": "./node_modules/prop-types/factoryWithThrowingShims.js",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 13,
          "moduleIdentifier": "/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/prop-types/factoryWithThrowingShims.js",
          "module": "./node_modules/prop-types/factoryWithThrowingShims.js",
          "moduleName": "./node_modules/prop-types/factoryWithThrowingShims.js",
          "type": "cjs require",
          "userRequest": "./lib/ReactPropTypesSecret",
          "loc": "12:27-64"
        }
      ],
      "usedExports": true,
      "providedExports": null,
      "optimizationBailout": [],
      "depth": 5,
      "source": "/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\nvar ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';\n\nmodule.exports = ReactPropTypesSecret;\n"
    },
    {
      "id": 17,
      "identifier": "/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/cache-loader/dist/cjs.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/babel-loader/lib/index.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/lib/helpers/mixin.js",
      "name": "./lib/helpers/mixin.js",
      "index": 14,
      "index2": 11,
      "size": 4441,
      "cacheable": true,
      "built": true,
      "optional": false,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/cache-loader/dist/cjs.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/babel-loader/lib/index.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/lib/datagrid.js",
      "issuerId": 12,
      "issuerName": "./lib/datagrid.js",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 12,
          "moduleIdentifier": "/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/cache-loader/dist/cjs.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/babel-loader/lib/index.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/lib/datagrid.js",
          "module": "./lib/datagrid.js",
          "moduleName": "./lib/datagrid.js",
          "type": "cjs require",
          "userRequest": "./helpers/mixin",
          "loc": "43:10-36"
        }
      ],
      "usedExports": true,
      "providedExports": null,
      "optimizationBailout": [],
      "depth": 3,
      "source": "\"use strict\";\n\n(function () {\n  var _, mixin;\n\n  _ = require('underscore');\n\n  /*\n    Extends a class with another class.  Klass is the main class and mixinKlass methods and attributes will\n    be added to klass and function as full members of that class.\n  \n    In the context of a mixinKlass method,\n      - @ will reference the instance of klass\n      - @originalMethod() will always call method replaced by the mixinKlass method\n      - mixinKlass attributes will replace attributes in klass\n  \n    @originalMethod()\n      - is a special method that only exists in the context of a mixinKlass method call\n      - should reference either the previous mixin that replaced this method or the klass method replaced\n      - may be undefined.  if no previous mixin or the klass did not define the mixinKlass method,\n        then @originalMethod should be null or undefined.  If you are unsure if the class being mixed into\n        will define the mixin method, use the   @originalMethod?(arguments)   pattern (note existensial op)\n  \n    see,  app/coffeescripts/tests/application/mixin.coffee for examples and expected behaviors.\n  \n    IMPORTANT NOTES:\n  \n      Mixin constructor methods override contructor methods in class being mixed into.  Mixins that extend\n      other classes get a hidden constructor.  Make sure @originalMethod? is called with the original constructor\n      args.   See models/mixins/stylesMetadata.coffee\n  \n      mixin() <b>must be called last</b> in the class definition or after class is defined such that any overridden\n        methods have already been defined.\n  \n      Parameter passing.  For flexibility, plugins will often pass along arguments to @originalMethod.  If your\n        mixin method doesn't specifically require a fixed set of parameters or doesn't care about parameters,\n        you should call original method like so:\n        <pre>\n                    @originalMethod?.apply(@, arguments)\n        </pre>\n        This will make your mixin more flexible and able to survive changes to the underlying instance method\n        argument specification.\n  \n    example:\n  \n        class MyMixin\n          someMethod: () =>\n            @originalMethod()\n             * ... do something more useful\n  \n        class MyClass\n          someMethod: () =>\n             * do something useful\n  \n          mixin @, MyMixin     #  this needs to be last\n   */\n\n  module.exports = mixin = function mixin(klass, mixinKlass) {\n    var base, base1, base2, key, mixinKlassName, oMethod, oMethodKey, ref, results, val, wrapperDef, wrapperName;\n    if (!mixinKlass) {\n      console.trace();\n      throw \"Dev: Mixin class undefined. Make sure you are correctly requiring file.\";\n    }\n    if (klass === window || klass === document) {\n      throw \"Dev: The class being mixed into should not be window or document. <p>Look closely at the indentation of 'mixin(@, ... )' callsite.  If using '@' for first parameter it must be at the same indentation as the instance method definitions in the class at the very end of the class definition.</p>\";\n    }\n    mixinKlassName = mixinKlass.toString().match(/^\\s*function\\s*([^\\(]*)/)[1] || \"unknown\";\n    ref = mixinKlass.prototype;\n    results = [];\n    for (key in ref) {\n      val = ref[key];\n      if (key === 'constructor') {\n        continue;\n      }\n      if (_.isFunction(val) && (_.isEmpty(_.keys(val)) || key === 'constructor')) {\n        oMethod = klass.prototype[key];\n        oMethodKey = mixinKlassName + \"_\" + key;\n        (base = klass.prototype).__originalMethods || (base.__originalMethods = {});\n        klass.prototype.__originalMethods[oMethodKey] = oMethod;\n        (base1 = klass.prototype).__mixinMethods || (base1.__mixinMethods = {});\n        klass.prototype.__mixinMethods[oMethodKey] = val;\n        (base2 = klass.prototype).__originalMethodStack || (base2.__originalMethodStack = []);\n        wrapperName = oMethodKey + \"__wrapperFn\";\n        wrapperDef = \"klass.prototype[key] = function() {\\n  this.__originalMethodStack.push(this.originalMethod)\\n  this.originalMethod = this.__originalMethods['\" + oMethodKey + \"']\\n  returnValue = this.__mixinMethods['\" + oMethodKey + \"'].apply(this, arguments)\\n  this.originalMethod = this.__originalMethodStack.pop()\\n  return returnValue\\n}\";\n        results.push(eval(wrapperDef));\n      } else {\n        results.push(klass.prototype[key] = val);\n      }\n    }\n    return results;\n  };\n}).call(undefined);"
    },
    {
      "id": 18,
      "identifier": "/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/cache-loader/dist/cjs.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/babel-loader/lib/index.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/lib/helpers/deepSet.js",
      "name": "./lib/helpers/deepSet.js",
      "index": 16,
      "index2": 12,
      "size": 1209,
      "cacheable": true,
      "built": true,
      "optional": false,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/cache-loader/dist/cjs.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/babel-loader/lib/index.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/lib/helpers/reactStyles.js",
      "issuerId": 6,
      "issuerName": "./lib/helpers/reactStyles.js",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 6,
          "moduleIdentifier": "/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/cache-loader/dist/cjs.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/babel-loader/lib/index.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/lib/helpers/reactStyles.js",
          "module": "./lib/helpers/reactStyles.js",
          "moduleName": "./lib/helpers/reactStyles.js",
          "type": "cjs require",
          "userRequest": "./deepSet",
          "loc": "11:12-32"
        }
      ],
      "usedExports": true,
      "providedExports": null,
      "optimizationBailout": [],
      "depth": 4,
      "source": "'use strict';\n\n(function () {\n  var _, deepSet;\n\n  _ = require('underscore');\n\n  /*\n  Performs a deep set on the the value of a attribute deeply nested within this object\n  \n  See deepGet comments above for example use.  anything that can get fetched\n  with deepGet should be able to be set by deepSet\n  \n  see also /app/coffeescripts/tests/application/utils/deepGetAndSet.coffee for more examples and tests\n   */\n\n  module.exports = deepSet = function deepSet(object, pathToAttribute, value, isFunctional) {\n    var current, i, lastPart, len, part, parts;\n    if (isFunctional == null) {\n      isFunctional = true;\n    }\n    current = object;\n    parts = pathToAttribute.split('.');\n    lastPart = _.last(parts);\n    for (i = 0, len = parts.length; i < len; i++) {\n      part = parts[i];\n      if (part === lastPart) {\n        if (isFunctional && _.isFunction(current[part])) {\n          return current[part](value);\n        } else {\n          return current[part] = value;\n        }\n      }\n      if (current[part] == null) {\n        current[part] = {};\n      }\n      current = isFunctional && _.isFunction(current[part]) ? current[part]() : current[part];\n    }\n    return current;\n  };\n}).call(undefined);"
    },
    {
      "id": 19,
      "identifier": "/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/cache-loader/dist/cjs.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/babel-loader/lib/index.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/lib/cellWrapper.js",
      "name": "./lib/cellWrapper.js",
      "index": 17,
      "index2": 16,
      "size": 7672,
      "cacheable": true,
      "built": true,
      "optional": false,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/cache-loader/dist/cjs.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/babel-loader/lib/index.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/lib/datagrid.js",
      "issuerId": 12,
      "issuerName": "./lib/datagrid.js",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 12,
          "moduleIdentifier": "/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/cache-loader/dist/cjs.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/babel-loader/lib/index.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/lib/datagrid.js",
          "module": "./lib/datagrid.js",
          "moduleName": "./lib/datagrid.js",
          "type": "cjs require",
          "userRequest": "./cellWrapper",
          "loc": "47:16-40"
        }
      ],
      "usedExports": true,
      "providedExports": null,
      "optimizationBailout": [],
      "depth": 3,
      "source": "'use strict';\n\n(function () {\n  var $,\n      Cell,\n      CellWrapper,\n      Classnames,\n      PropTypes,\n      React,\n      ReactDOM,\n      _,\n      bind = function bind(fn, me) {\n    return function () {\n      return fn.apply(me, arguments);\n    };\n  },\n      extend = function extend(child, parent) {\n    for (var key in parent) {\n      if (hasProp.call(parent, key)) child[key] = parent[key];\n    }function ctor() {\n      this.constructor = child;\n    }ctor.prototype = parent.prototype;child.prototype = new ctor();child.__super__ = parent.prototype;return child;\n  },\n      hasProp = {}.hasOwnProperty;\n\n  React = require('react');\n\n  ReactDOM = require('react-dom');\n\n  PropTypes = require('prop-types');\n\n  Classnames = require('classnames');\n\n  $ = require('jquery');\n\n  _ = require('underscore');\n\n  Cell = require('./cell');\n\n  module.exports = CellWrapper = function (superClass) {\n    extend(CellWrapper, superClass);\n\n    function CellWrapper() {\n      this._onArrowDown = bind(this._onArrowDown, this);\n      this._onArrowUp = bind(this._onArrowUp, this);\n      this._onArrowLeft = bind(this._onArrowLeft, this);\n      this._onArrowRight = bind(this._onArrowRight, this);\n      this._onCellEdit = bind(this._onCellEdit, this);\n      this._onCellKeydown = bind(this._onCellKeydown, this);\n      this._onCellBlur = bind(this._onCellBlur, this);\n      this._onCellFocus = bind(this._onCellFocus, this);\n      return CellWrapper.__super__.constructor.apply(this, arguments);\n    }\n\n    CellWrapper.props = {\n      model: React.PropTypes.any,\n      column: React.PropTypes.object,\n      rowIdx: React.PropTypes.number,\n      colIdx: React.PropTypes.number,\n      datagrid: React.PropTypes.any,\n      defaultCellComponent: React.PropTypes.any,\n      defaultCellStyle: React.PropTypes.object\n    };\n\n    CellWrapper.defaultProps = {\n      defaultCellComponent: Cell\n    };\n\n    CellWrapper.prototype.componentWillMount = function () {\n      return this.setState({\n        editing: false,\n        selected: false\n      });\n    };\n\n    CellWrapper.prototype.render = function () {\n      var CellComponent, classNames, dataProps, ref;\n      CellComponent = (ref = this.props.column.cellComponent) != null ? ref : this.props.defaultCellComponent;\n      dataProps = {\n        'data-row': this.props.rowIdx,\n        'data-col': this.props.colIdx\n      };\n      classNames = Classnames('rdd-cell-wrapper', {\n        selected: this.isSelected()\n      });\n      return React.createElement(\"div\", Object.assign({\n        \"className\": classNames,\n        \"tabIndex\": 1.,\n        \"onKeyDown\": this._onCellKeydown,\n        \"onFocus\": this._onCellFocus,\n        \"onBlur\": this._onCellBlur,\n        \"onDoubleClick\": this._onCellEdit\n      }, dataProps), React.createElement(CellComponent, {\n        \"editing\": this.state.editing,\n        \"rowData\": this.props.model,\n        \"rowIdx\": this.props.rowIdx,\n        \"column\": this.props.column,\n        \"datagrid\": this.props.datagrid,\n        \"defaultCellStyle\": this.props.defaultCellStyle,\n        \"ref\": 'cellComponent',\n        \"onEdit\": this._onCellEdit\n      }));\n    };\n\n    CellWrapper.prototype.edit = function () {\n      var ref;\n      if (!((ref = this.props.datagrid) != null ? typeof ref.canEditCell === \"function\" ? ref.canEditCell(this.props.column, this.props.model) : void 0 : void 0)) {\n        return;\n      }\n      return this.setState({\n        editing: true\n      });\n    };\n\n    CellWrapper.prototype.focus = function () {\n      return ReactDOM.findDOMNode(this).focus();\n    };\n\n    CellWrapper.prototype.isSelected = function () {\n      var ref;\n      return (ref = this.props.datagrid) != null ? typeof ref.isCellSelected === \"function\" ? ref.isCellSelected(this.props.rowIdx, this.props.column.key) : void 0 : void 0;\n    };\n\n    CellWrapper.prototype._onCellFocus = function (evt) {\n      return this.setState({\n        selected: true\n      });\n    };\n\n    CellWrapper.prototype._onCellBlur = function (evt) {\n      return _.defer(function (_this) {\n        return function () {\n          if (!$.contains(ReactDOM.findDOMNode(_this), document.activeElement)) {\n            return _this.setState({\n              selected: false,\n              editing: false\n            });\n          }\n        };\n      }(this));\n    };\n\n    CellWrapper.prototype._onCellKeydown = function (evt) {\n      var newCell;\n      switch (evt.key) {\n        case 'Enter':\n          if (this.state.editing) {\n            this._save();\n            newCell = evt.shiftKey ? this._focusUp() : this._focusDown();\n            return newCell.find('i.fa-pencil').trigger('click');\n          } else {\n            return this.edit();\n          }\n          break;\n        case 'Tab':\n          evt.preventDefault();\n          newCell = evt.shiftKey ? this._focusLeft() : this._focusRight();\n          if (this.state.editing) {\n            this._save();\n            return _.defer(function (_this) {\n              return function () {\n                return newCell.find('.rdd-icon-edit').trigger('click');\n              };\n            }(this));\n          }\n          break;\n        case 'Escape':\n          return this._cancel();\n        case 'ArrowRight':\n          return this._onArrowRight(evt);\n        case 'ArrowLeft':\n          return this._onArrowLeft(evt);\n        case 'ArrowUp':\n          return this._onArrowUp(evt);\n        case 'ArrowDown':\n          return this._onArrowDown(evt);\n      }\n    };\n\n    CellWrapper.prototype._onCellEdit = function () {\n      return this.edit();\n    };\n\n    CellWrapper.prototype._onArrowRight = function (evt) {\n      evt.preventDefault();\n      return this._focusRight();\n    };\n\n    CellWrapper.prototype._onArrowLeft = function (evt) {\n      evt.preventDefault();\n      return this._focusLeft();\n    };\n\n    CellWrapper.prototype._onArrowUp = function (evt) {\n      evt.preventDefault();\n      return this._focusUp();\n    };\n\n    CellWrapper.prototype._onArrowDown = function (evt) {\n      evt.preventDefault();\n      return this._focusDown();\n    };\n\n    /*\n      rowEvt from react-data-grid looks like this:\n      {  \n        cellKey: \"costing.wholesaleCost.amount\"\n        key: \"Enter\"\n        rowIdx: 0\n        updated: \"24\"\n      }\n      datagrid ignores .key\n     */\n\n    CellWrapper.prototype._save = function () {\n      var rowEvt;\n      rowEvt = {\n        cellKey: this.props.column.key,\n        key: \"Other\",\n        rowIdx: this.props.rowIdx,\n        updated: this.refs.cellComponent.getValue()\n      };\n      this.props.datagrid.saveModel(this.props.model, rowEvt);\n      return this.setState({\n        editing: false\n      });\n    };\n\n    CellWrapper.prototype._cancel = function () {\n      this.setState({\n        editing: false\n      });\n      return _.defer(function (_this) {\n        return function () {\n          return _this.focus();\n        };\n      }(this));\n    };\n\n    CellWrapper.prototype._focusRight = function () {\n      return this._focusOffset(0, 1);\n    };\n\n    CellWrapper.prototype._focusLeft = function () {\n      return this._focusOffset(0, -1);\n    };\n\n    CellWrapper.prototype._focusUp = function () {\n      return this._focusOffset(-1, 0);\n    };\n\n    CellWrapper.prototype._focusDown = function () {\n      return this._focusOffset(1, 0);\n    };\n\n    CellWrapper.prototype._focusOffset = function (colOffset, rowOffset) {\n      var colIdx, rowIdx;\n      colIdx = this.props.colIdx + colOffset;\n      rowIdx = this.props.rowIdx + rowOffset;\n      return $(React.findDOMNode(this.props.datagrid)).find(\".rdd-cell-wrapper[data-row=\" + rowIdx + \"][data-col=\" + colIdx + \"]\").focus();\n    };\n\n    return CellWrapper;\n  }(React.Component);\n}).call(undefined);"
    },
    {
      "id": 20,
      "identifier": "/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/cache-loader/dist/cjs.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/babel-loader/lib/index.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/lib/labelCell.js",
      "name": "./lib/labelCell.js",
      "index": 20,
      "index2": 18,
      "size": 5443,
      "cacheable": true,
      "built": true,
      "optional": false,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/cache-loader/dist/cjs.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/babel-loader/lib/index.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/lib/datagrid.js",
      "issuerId": 12,
      "issuerName": "./lib/datagrid.js",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 12,
          "moduleIdentifier": "/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/cache-loader/dist/cjs.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/babel-loader/lib/index.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/lib/datagrid.js",
          "module": "./lib/datagrid.js",
          "moduleName": "./lib/datagrid.js",
          "type": "cjs require",
          "userRequest": "./labelCell",
          "loc": "49:14-36"
        }
      ],
      "usedExports": true,
      "providedExports": null,
      "optimizationBailout": [],
      "depth": 3,
      "source": "'use strict';\n\n(function () {\n  var Cell,\n      LabelCell,\n      PropTypes,\n      Rb,\n      React,\n      ReactStyles,\n      bind = function bind(fn, me) {\n    return function () {\n      return fn.apply(me, arguments);\n    };\n  },\n      extend = function extend(child, parent) {\n    for (var key in parent) {\n      if (hasProp.call(parent, key)) child[key] = parent[key];\n    }function ctor() {\n      this.constructor = child;\n    }ctor.prototype = parent.prototype;child.prototype = new ctor();child.__super__ = parent.prototype;return child;\n  },\n      hasProp = {}.hasOwnProperty;\n\n  React = require('react');\n\n  PropTypes = require('prop-types');\n\n  Rb = require('react-bootstrap');\n\n  ReactStyles = require('./helpers/reactStyles');\n\n  Cell = require('./cell');\n\n  module.exports = LabelCell = function (superClass) {\n    extend(LabelCell, superClass);\n\n    function LabelCell() {\n      this._onHideIconClick = bind(this._onHideIconClick, this);\n      this._onShowIconClick = bind(this._onShowIconClick, this);\n      return LabelCell.__super__.constructor.apply(this, arguments);\n    }\n\n    LabelCell.propTypes = {\n      rowData: PropTypes.any,\n      column: PropTypes.object,\n      onHideColumn: PropTypes.func,\n      onShowColumn: PropTypes.func\n    };\n\n    LabelCell.prototype.styles = new ReactStyles({\n      icon: {\n        float: 'right',\n        color: '#4767AA'\n      },\n      wrapper: {\n        position: 'relative',\n        paddingLeft: 18\n      },\n      showHideIcon: {\n        position: 'absolute',\n        left: -5,\n        top: 0,\n        fontSize: 17,\n        color: '#4767AA'\n      },\n      showIcon: {\n        includes: 'showHideIcon',\n        left: 2,\n        top: 1\n      },\n      banIcon: {\n        includes: 'showHideIcon',\n        color: '#DE8387',\n        top: 1,\n        left: 1,\n        fontSize: 21\n      }\n    });\n\n    LabelCell.prototype.style = function (name) {\n      var ref;\n      return _.extend({}, this.styles.get(this, name), ((ref = this.props.styles) != null ? ref[name] : void 0) || {});\n    };\n\n    LabelCell.prototype.renderWrapped = function () {\n      var ref, ref1;\n      if (!((ref = this.props.column) != null ? ref.tooltip : void 0)) {\n        return LabelCell.__super__.renderWrapped.call(this, React.createElement(\"div\", {\n          \"style\": this.style('wrapper')\n        }, this._renderShowHideControl(), (ref1 = this.props.column) != null ? ref1.name : void 0));\n      }\n      return LabelCell.__super__.renderWrapped.call(this, React.createElement(\"div\", {\n        \"style\": this.style('wrapper')\n      }, React.createElement(Rb.OverlayTrigger, {\n        \"overlay\": this._renderTooltipPopover()\n      }, React.createElement(\"div\", null, this._renderShowHideControl(), this.props.column.name, React.createElement(\"i\", {\n        \"style\": this.style('icon'),\n        \"className\": 'fa fa-question-circle'\n      })))));\n    };\n\n    LabelCell.prototype._renderTooltipPopover = function () {\n      return React.createElement(Rb.Popover, {\n        \"id\": \"flipgridTooltipPopover\"\n      }, this.props.column.tooltip);\n    };\n\n    LabelCell.prototype._renderShowHideControl = function () {\n      if (!this.props.column.canHide) {\n        return null;\n      }\n      if (this.props.column.isHidden) {\n        return React.createElement(\"i\", {\n          \"className\": 'fa fa-eye',\n          \"style\": this.style('showHideIcon'),\n          \"title\": 'Click to show this attribute when \"Mine\" attributes selected',\n          \"onClick\": this._onShowIconClick\n        });\n      } else {\n        return React.createElement(\"span\", {\n          \"class\": \"fa-stack\",\n          \"title\": 'Click to hide this attribute when \"Mine\" attributes selected',\n          \"onClick\": this._onHideIconClick,\n          \"style\": this.style('showHideIcon')\n        }, React.createElement(\"i\", {\n          \"className\": \"fa fa-eye fa-stack-1x\",\n          \"style\": this.style('showIcon')\n        }), React.createElement(\"i\", {\n          \"className\": \"fa fa-ban fa-stack-2x\",\n          \"style\": this.style('banIcon')\n        }));\n      }\n    };\n\n    LabelCell.prototype.getCellDefaultStyle = function (model) {\n      var styles;\n      styles = _.defaults(LabelCell.__super__.getCellDefaultStyle.call(this, model), {\n        verticalAlign: 'middle',\n        textAlign: 'left',\n        paddingLeft: 10\n      });\n      _.extend(styles, {\n        borderRight: \"solid 1px #FFFFFF\",\n        borderBottom: \"solid 1px #FFFFFF\"\n      });\n      if (this.props.column.isHidden) {\n        styles.color = 'rgba(0, 0, 0, 0.16)';\n      }\n      return styles;\n    };\n\n    LabelCell.prototype.getBackgroundColor = function () {\n      return '#eceff6';\n    };\n\n    LabelCell.prototype._onShowIconClick = function (evt) {\n      this.props.column.isHidden = false;\n      return this.forceUpdate(function (_this) {\n        return function () {\n          var base;\n          return typeof (base = _this.props).onShowColumn === \"function\" ? base.onShowColumn(_this, _this.props.column, evt) : void 0;\n        };\n      }(this));\n    };\n\n    LabelCell.prototype._onHideIconClick = function (evt) {\n      this.props.column.isHidden = true;\n      return this.forceUpdate(function (_this) {\n        return function () {\n          var base;\n          return typeof (base = _this.props).onHideColumn === \"function\" ? base.onHideColumn(_this, _this.props.column, evt) : void 0;\n        };\n      }(this));\n    };\n\n    return LabelCell;\n  }(Cell);\n}).call(undefined);"
    },
    {
      "id": 21,
      "identifier": "external {\"root\":\"ReactBootstrap\",\"commonjs2\":\"react-bootstrap\",\"commonjs\":\"react-bootstrap\",\"amd\":\"react-bootstrap\"}",
      "name": "external {\"root\":\"ReactBootstrap\",\"commonjs2\":\"react-bootstrap\",\"commonjs\":\"react-bootstrap\",\"amd\":\"react-bootstrap\"}",
      "index": 21,
      "index2": 17,
      "size": 42,
      "cacheable": false,
      "built": false,
      "optional": false,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/cache-loader/dist/cjs.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/babel-loader/lib/index.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/lib/labelCell.js",
      "issuerId": 20,
      "issuerName": "./lib/labelCell.js",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 20,
          "moduleIdentifier": "/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/cache-loader/dist/cjs.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/babel-loader/lib/index.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/lib/labelCell.js",
          "module": "./lib/labelCell.js",
          "moduleName": "./lib/labelCell.js",
          "type": "cjs require",
          "userRequest": "react-bootstrap",
          "loc": "28:7-33"
        }
      ],
      "usedExports": true,
      "providedExports": null,
      "optimizationBailout": [],
      "depth": 4
    },
    {
      "id": 22,
      "identifier": "/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/cache-loader/dist/cjs.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/babel-loader/lib/index.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/lib/gridEdit.js",
      "name": "./lib/gridEdit.js",
      "index": 22,
      "index2": 20,
      "size": 13040,
      "cacheable": true,
      "built": true,
      "optional": false,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/cache-loader/dist/cjs.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/babel-loader/lib/index.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/lib/datagrid.js",
      "issuerId": 12,
      "issuerName": "./lib/datagrid.js",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 12,
          "moduleIdentifier": "/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/cache-loader/dist/cjs.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/babel-loader/lib/index.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/lib/datagrid.js",
          "module": "./lib/datagrid.js",
          "moduleName": "./lib/datagrid.js",
          "type": "cjs require",
          "userRequest": "./gridEdit",
          "loc": "51:13-34"
        }
      ],
      "usedExports": true,
      "providedExports": null,
      "optimizationBailout": [],
      "depth": 3,
      "source": "'use strict';\n\n(function () {\n  var $,\n      DeepGet,\n      GridEdit,\n      _,\n      bind = function bind(fn, me) {\n    return function () {\n      return fn.apply(me, arguments);\n    };\n  };\n\n  _ = require('underscore');\n\n  $ = require('jquery');\n\n  DeepGet = require('./helpers/deepGet');\n\n  /*\n   */\n\n  module.exports = GridEdit = function () {\n    function GridEdit() {\n      this.onModelSaveComplete = bind(this.onModelSaveComplete, this);\n      this.onModelSaveError = bind(this.onModelSaveError, this);\n      this.onModelSaveSuccess = bind(this.onModelSaveSuccess, this);\n    }\n\n    GridEdit.prototype.getCollection = function () {\n      var ref, ref1, ref2, ref3, ref4;\n      if (this.originalMethod != null) {\n        return this.originalMethod();\n      }\n      return (ref = (ref1 = (ref2 = (ref3 = this.state) != null ? ref3.collection : void 0) != null ? ref2 : this.props.collection) != null ? ref1 : (ref4 = this.context) != null ? ref4.collection : void 0) != null ? ref : this.collection;\n    };\n\n    /*\n      returns columns with a defaulted name, formatter, header component\n     */\n\n    GridEdit.prototype.getColumns = function (columns) {\n      var ref, ref1, ref2;\n      if (columns == null) {\n        columns = null;\n      }\n      if (this.originalMethod != null) {\n        return this.originalMethod(columns);\n      }\n      return (ref = (ref1 = columns != null ? columns : (ref2 = this.state) != null ? ref2.columns : void 0) != null ? ref1 : this.props.columns) != null ? ref : this.columns;\n    };\n\n    /*\n      returns a column by key or index\n     */\n\n    GridEdit.prototype.getColumn = function (keyOrIndex) {\n      var columns;\n      if (this.originalMethod != null) {\n        return this.originalMethod();\n      }\n      columns = this.getColumns();\n      if (_.isString(keyOrIndex)) {\n        return _.find(this.getColumns(), function (c) {\n          return c.key === keyOrIndex;\n        });\n      } else {\n        return columns[keyOrIndex];\n      }\n    };\n\n    GridEdit.prototype.getModelAt = function (index) {\n      var collection;\n      collection = this.getCollection();\n      switch (false) {\n        case !(collection == null):\n          return null;\n        case collection.getItem == null:\n          return collection.getItem(index);\n        case collection.at == null:\n          return collection.at(index);\n        default:\n          return collection[index];\n      }\n    };\n\n    GridEdit.prototype.getValueFromModel = function (model, attr) {\n      var ref;\n      return (ref = typeof model.get === \"function\" ? model.get(attr) : void 0) != null ? ref : model[attr];\n    };\n\n    GridEdit.prototype.getValueAt = function (rowIndex, colIndexOrKey) {\n      var columnKey, datum, model, ref;\n      ref = this.getModelColumnKeyAt(rowIndex, colIndexOrKey), model = ref[0], columnKey = ref[1], datum = ref[2];\n      if (!(model != null && columnKey != null)) {\n        return null;\n      }\n      return this.getValueFromModel(model, columnKey);\n    };\n\n    /*\n      returns the value to export to csv. Also used by gridSelect mixin for value to copy to clipboard\n    \n      NOTE that getExportValue is also used by copy/paste to get the value to copy to clipboard.\n        you can use csvExportAttribute on the column to export a different attribute only when \n        exporting to CSV\n     */\n\n    GridEdit.prototype.getExportValue = function (model, column, options) {\n      var value;\n      if (options == null) {\n        options = {};\n      }\n      options = _.defaults(options, {\n        forCsv: false\n      });\n      value = null;\n      if (column.exportFunction != null) {\n        value = column.exportFunction(model, column, this, options);\n      } else if (options.forCsv && column.csvExportAttribute) {\n        value = this.getValueFromModel(model, column.csvExportAttribute);\n      } else if (column.exportAttribute != null) {\n        value = this.getValueFromModel(model, column.exportAttribute);\n      } else {\n        value = this.getValueFromModel(model, column.key);\n      }\n      if (options.forCsv && _.isArray(value)) {\n        value = _.uniq(_.compact(value)).join(', ');\n      } else if (_.isArray(value) || _.isObject(value)) {\n        value = JSON.stringify(value);\n      }\n      if (_.isString(value) && options.forCsv) {\n        value = value.replace(/\\\"/g, '\"\"');\n      }\n      return value;\n    };\n\n    GridEdit.prototype.getModelColumnKeyAt = function (rowIndex, colIndexOrKey) {\n      var columnKey, model, ref, ref1;\n      model = this.getModelAt(rowIndex);\n      columnKey = _.isNumber(colIndexOrKey) ? (ref = this.getColumns()) != null ? (ref1 = ref[colIndexOrKey]) != null ? ref1.key : void 0 : void 0 : colIndexOrKey;\n      return [model, columnKey];\n    };\n\n    GridEdit.prototype.setValueOnModel = function (model, columnKey, value, saveOptions) {\n      var attr, column, result;\n      attr = columnKey;\n      column = this.getColumn(columnKey);\n      if (!(column != null && this.validateCell(model, column, value, saveOptions))) {\n        return false;\n      }\n      result = _.isFunction(model.set) ? model.set(attr, value) : model[attr] = value;\n      return result;\n    };\n\n    GridEdit.prototype.setValueAt = function (rowIndex, colIndexOrKey, value) {\n      var columnKey, model, ref;\n      ref = this.getModelColumnKeyAt(rowIndex, colIndexOrKey), model = ref[0], columnKey = ref[1];\n      if (!(model != null && columnKey != null)) {\n        return null;\n      }\n      return this.setValueOnModel(model, columnKey);\n    };\n\n    GridEdit.prototype.validateCell = function (model, column, value, saveOptions) {\n      var i, len, ref, ref1, validation, validationErrors, validationResult;\n      validationErrors = [];\n      ref1 = (ref = column.validations) != null ? ref : [];\n      for (i = 0, len = ref1.length; i < len; i++) {\n        validation = ref1[i];\n        validationResult = validation.apply(this, [model, column, value]);\n        if (validationResult !== true) {\n          validationErrors.push(validationResult);\n        }\n      }\n      if (validationErrors.length > 0) {\n        this.onModelSaveError(model, validationErrors, saveOptions);\n        return false;\n      }\n      return true;\n    };\n\n    /*\n      returns the options used when saving a backbone model\n     */\n\n    GridEdit.prototype.getModelSaveOptions = function () {\n      return {\n        success: function (_this) {\n          return function () {\n            return _this.onModelSaveSuccess.apply(_this, arguments);\n          };\n        }(this),\n        error: function (_this) {\n          return function () {\n            return _this.onModelSaveError.apply(_this, arguments);\n          };\n        }(this)\n      };\n    };\n\n    /*\n    This method will log a batch of actions, relying on\n    debounce to ensure the actions are collected properly.\n     */\n\n    GridEdit.prototype._logUndo = function (model, rowEvt, options) {\n      if (options == null) {\n        options = {};\n      }\n      if (!this.props.enableUndo) {\n        return;\n      }\n      this.undo[this.undoIndex++] = this.constructor._batchUndoRequests;\n      return this.constructor._batchUndoRequests = [];\n    };\n\n    GridEdit.prototype.resetUndo = function () {\n      delete this.undo;\n      this.undo = {};\n      return this.undoIndex = 0;\n    };\n\n    /*\n    This method will iterate over the properties of the @undo object\n    and find the top-most item. Each property is an array of actions that\n    occured within the same \"batch\" or \"bucket\". Once it finds the most recent\n    batch, it will revert the operation by calling @saveModel.\n     */\n\n    GridEdit.prototype.doUndo = function () {\n      var bucketKey, i, keys, len, operation, operations;\n      keys = _.keys(this.undo);\n      if (keys.length === 0) {\n        return;\n      }\n      bucketKey = _.last(keys);\n      operations = this.undo[bucketKey];\n      for (i = 0, len = operations.length; i < len; i++) {\n        operation = operations[i];\n        this.clearCellErrors(operation.model, operation.attr);\n        $.extend(true, operation.model.attributes, operation.revPatch);\n        this.saveModel(operation.model, operation.rowEvt, {\n          logUndo: false,\n          setOnUpdate: false\n        });\n      }\n      return delete this.undo[bucketKey];\n    };\n\n    GridEdit.prototype.logUndoDebounced = _.debounce(GridEdit.prototype._logUndo, GridEdit.LOG_UNDO_DEBOUNCE);\n\n    /*\n      rowEvt from react-data-grid looks like this:\n      {  \n        cellKey: \"costing.wholesaleCost.amount\"\n        key: \"Enter\"\n        rowIdx: 0\n        updated: \"24\"\n      }\n     */\n\n    GridEdit.prototype.saveModel = function (model, rowEvt, options) {\n      var attr, base, isDirty, newValue, oldValue, ref, ref1, revPatch, saveOptions;\n      if (options == null) {\n        options = {};\n      }\n      options = _.defaults(options, {\n        logUndo: this.props.enableUndo,\n        setOnUpdate: true\n      });\n      attr = (ref = rowEvt.attribute) != null ? ref : rowEvt.cellKey;\n      oldValue = DeepGet(model._lastSyncAttributes, attr);\n      newValue = ((ref1 = rowEvt.updated) != null ? ref1.toString().trim() : void 0) !== '' ? rowEvt.updated : null;\n      if (!(oldValue || newValue)) {\n        return;\n      }\n      if (oldValue === newValue) {\n        return;\n      }\n      this.clearCellErrors(model, attr);\n      saveOptions = this.getModelSaveOptions();\n      saveOptions.__datagrid_rowEvt = rowEvt;\n      if (!(this.props.setOnUpdate === false || options.setOnUpdate === false)) {\n        if (!this.setValueOnModel(model, attr, newValue, saveOptions)) {\n          return;\n        }\n      }\n      revPatch = model.getReversePatchObject();\n      if (options.logUndo !== false && oldValue !== newValue) {\n        if ((base = this.constructor)._batchUndoRequests == null) {\n          base._batchUndoRequests = [];\n        }\n        this.constructor._batchUndoRequests.push({\n          model: model,\n          attr: attr,\n          revPatch: revPatch,\n          rowEvt: rowEvt\n        });\n        this.logUndoDebounced.apply(this, arguments);\n      }\n      isDirty = _.isFunction(model.isDirty) ? model.isDirty() : true;\n      if (this.props.saveOnUpdate !== false && isDirty) {\n        this.setSaving(model, rowEvt.cellKey, true);\n        return (model.patch || model.save)({}, saveOptions);\n      }\n    };\n\n    GridEdit.prototype.clearCellErrors = function (model, columnKey) {\n      if (_.isFunction(model.setDatagridSaveErrors)) {\n        return model.setDatagridSaveErrors(columnKey, null);\n      } else {\n        if (model.__datagridSaveErrors == null) {\n          model.__datagridSaveErrors = {};\n        }\n        if (columnKey != null) {\n          return delete model.__datagridSaveErrors[columnKey];\n        } else {\n          return model.__datagridSaveErrors = {};\n        }\n      }\n    };\n\n    GridEdit.prototype.setSaveSuccess = function (model, attr, trueOrFalse) {\n      if (_.isFunction(model.setDatagridSaveSuccess)) {\n        return model.setDatagridSaveSuccess(attr, trueOrFalse);\n      } else {\n        if (model.__datagridSaveSuccess == null) {\n          model.__datagridSaveSuccess = {};\n        }\n        return model.__datagridSaveSuccess[attr] = trueOrFalse;\n      }\n    };\n\n    GridEdit.prototype.setSaveErrors = function (model, attr, resp) {\n      if (_.isFunction(model.setDatagridSaveErrors)) {\n        return model.setDatagridSaveErrors(attr, resp);\n      } else {\n        if (model.__datagridSaveErrors == null) {\n          model.__datagridSaveErrors = {};\n        }\n        return model.__datagridSaveErrors[attr] = resp;\n      }\n    };\n\n    GridEdit.prototype.setSaving = function (model, attr, trueOrFalse) {\n      if (_.isFunction(model.setDatagridSaving)) {\n        return model.setDatagridSaving(attr, trueOrFalse);\n      } else {\n        if (model.__datagridSaving == null) {\n          model.__datagridSaving = {};\n        }\n        return model.__datagridSaving[attr] = trueOrFalse;\n      }\n    };\n\n    GridEdit.prototype.onModelSaveSuccess = function (model, resp, options) {\n      var rowEvt;\n      rowEvt = options != null ? options.__datagrid_rowEvt : void 0;\n      if (rowEvt) {\n        this.setSaveSuccess(model, rowEvt.cellKey, true);\n        this.clearCellErrors(model);\n      }\n      return this.onModelSaveComplete(model, resp, options);\n    };\n\n    GridEdit.prototype.onModelSaveError = function (model, resp, options) {\n      var rowEvt;\n      if (!this.props.silentSaveErrors) {\n        throw \"Unable to save changes<br><br>\" + JSON.stringify(resp);\n      }\n      rowEvt = options != null ? options.__datagrid_rowEvt : void 0;\n      if (rowEvt != null) {\n        this.setSaveErrors(model, rowEvt.cellKey, resp);\n      }\n      return this.onModelSaveComplete(model, resp, options);\n    };\n\n    GridEdit.prototype.onModelSaveComplete = function (model, resp, options) {\n      var rowEvt;\n      rowEvt = options != null ? options.__datagrid_rowEvt : void 0;\n      if (rowEvt) {\n        return this.setSaving(model, rowEvt.cellKey, false);\n      }\n    };\n\n    return GridEdit;\n  }();\n}).call(undefined);"
    },
    {
      "id": 23,
      "identifier": "/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/cache-loader/dist/cjs.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/babel-loader/lib/index.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/lib/helpers/deepGet.js",
      "name": "./lib/helpers/deepGet.js",
      "index": 23,
      "index2": 19,
      "size": 1918,
      "cacheable": true,
      "built": true,
      "optional": false,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/cache-loader/dist/cjs.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/babel-loader/lib/index.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/lib/gridEdit.js",
      "issuerId": 22,
      "issuerName": "./lib/gridEdit.js",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 22,
          "moduleIdentifier": "/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/cache-loader/dist/cjs.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/babel-loader/lib/index.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/lib/gridEdit.js",
          "module": "./lib/gridEdit.js",
          "moduleName": "./lib/gridEdit.js",
          "type": "cjs require",
          "userRequest": "./helpers/deepGet",
          "loc": "18:12-40"
        }
      ],
      "usedExports": true,
      "providedExports": null,
      "optimizationBailout": [],
      "depth": 4,
      "source": "\"use strict\";\n\n/*\n  gets the value of a nested member of an object.\n\n  example:\n  <code>\n    |  var data = {\n    |     sayulita: {\n    |       fun: true,\n    |       surf: true,\n    |       weather: {\n    |         high: 90,\n    |         low: function(){ return 70; }\n    |       }\n    |     }\n    |   }\n    |  deepGet(data, 'weather.high')   # will return 90\n  </code>\n\n  There is no limit to the depth, also functions may be employed anywhere along the path if isFunctional is not set to disabled\n  From the former example:\n  <code>\n    |  deepGet(data, 'weather.low')   # will call the function associated with 'low' which returns 70\n  </code>\n\n  see /app/coffeescripts/tests/application/utils/deepGetAndSet.coffee for more examples and tests\n */\n\n(function () {\n  var _deepGet;\n\n  module.exports = _deepGet = function deepGet(object, pathToAttribute, isFunctional) {\n    var current, i, len, part, ref, ref1;\n    if (isFunctional == null) {\n      isFunctional = true;\n    }\n    current = object;\n    ref = pathToAttribute.split('.');\n    for (i = 0, len = ref.length; i < len; i++) {\n      part = ref[i];\n      if (isFunctional && _.isFunction(current[part])) {\n        current = current[part]();\n      } else if (isFunctional && _.isFunction(current[\"get\" + part.capitalize()])) {\n        current = current[\"get\" + part.capitalize()]();\n      } else if (((ref1 = current['attributes']) != null ? ref1[part] : void 0) != null) {\n        current = current['attributes'][part];\n      } else if (_.isArray(current)) {\n        current = _.map(current, function (currentEntity) {\n          if (currentEntity != null) {\n            return _deepGet(currentEntity, part, isFunctional);\n          } else {\n            return currentEntity;\n          }\n        });\n      } else {\n        current = current[part];\n      }\n      if (current == null) {\n        break;\n      }\n    }\n    return current;\n  };\n}).call(undefined);"
    },
    {
      "id": 24,
      "identifier": "/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/cache-loader/dist/cjs.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/babel-loader/lib/index.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/lib/gridSelect.js",
      "name": "./lib/gridSelect.js",
      "index": 24,
      "index2": 23,
      "size": 24791,
      "cacheable": true,
      "built": true,
      "optional": false,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/cache-loader/dist/cjs.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/babel-loader/lib/index.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/lib/datagrid.js",
      "issuerId": 12,
      "issuerName": "./lib/datagrid.js",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 12,
          "moduleIdentifier": "/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/cache-loader/dist/cjs.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/babel-loader/lib/index.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/lib/datagrid.js",
          "module": "./lib/datagrid.js",
          "moduleName": "./lib/datagrid.js",
          "type": "cjs require",
          "userRequest": "./gridSelect",
          "loc": "53:15-38"
        }
      ],
      "usedExports": true,
      "providedExports": null,
      "optimizationBailout": [],
      "depth": 3,
      "source": "'use strict';\n\n(function () {\n  var $,\n      CompareObjects,\n      CopyPasteFromExcel,\n      GridSelect,\n      ReactDOM,\n      _,\n      bind = function bind(fn, me) {\n    return function () {\n      return fn.apply(me, arguments);\n    };\n  },\n      indexOf = [].indexOf || function (item) {\n    for (var i = 0, l = this.length; i < l; i++) {\n      if (i in this && this[i] === item) return i;\n    }return -1;\n  };\n\n  ReactDOM = require('react-dom');\n\n  $ = require('jquery');\n\n  _ = require('underscore');\n\n  CopyPasteFromExcel = require('./helpers/copyPasteFromExcel');\n\n  CompareObjects = require('./helpers/compareObjects');\n\n  /*\n    These are the selection methods available on react-datum-datagrid\n    \n    @selectedCells\n      An array of objects with the following definition\n        {\n          col: string      # Defines the model attribute associated with this cell\n          rowIdx: number   # Defines the row index of the model this row represents\n          idx: number      # Defines the column index. Not probably too useful outside this mixin\n        } \n        \n    getSelectedCells() method is added to datagrid class being mixed into.  It returns an array \n      of the selected cells.  Array may be just one member -> the currently highlighted cell \n        \n    A typical use case would be to check if @selectedCells.length > 0, if so, use that.\n    Otherwise, you can use getSelectedCell() to see if the user has just focused on a specific\n    cell instead of selecting a range.  \n    \n    Addtional Props:\n      onSelectedCellsChange - called with (@selectedCells)\n   */\n\n  module.exports = GridSelect = function () {\n    function GridSelect() {\n      this.__onDocumentMouseMove = bind(this.__onDocumentMouseMove, this);\n      this.__onDocumentMouseUp = bind(this.__onDocumentMouseUp, this);\n      this.__onDocumentKeyDown = bind(this.__onDocumentKeyDown, this);\n      this.__onDocumentMouseDown = bind(this.__onDocumentMouseDown, this);\n      this.__onDocumentPaste = bind(this.__onDocumentPaste, this);\n      this.__onDocumentCopy = bind(this.__onDocumentCopy, this);\n      this.__unbindEvents = bind(this.__unbindEvents, this);\n      this.__bindEvents = bind(this.__bindEvents, this);\n      this.isCellSelected = bind(this.isCellSelected, this);\n      this.onCollectionReset = bind(this.onCollectionReset, this);\n    }\n\n    GridSelect.prototype.DOUBLE_CLICK_INTERVAL = 600;\n\n    GridSelect.prototype.copyPasteHelper = new CopyPasteFromExcel();\n\n    GridSelect.prototype.shouldEdit = false;\n\n    GridSelect.prototype.selectedCells = [];\n\n    GridSelect.prototype.modelKeyIndex = [];\n\n    GridSelect.prototype.startSelPosition = null;\n\n    GridSelect.prototype.endSelPosition = null;\n\n    GridSelect.prototype.componentDidMount = function () {\n      var ref, ref1, wrap;\n      if (typeof this.originalMethod === \"function\") {\n        this.originalMethod();\n      }\n      this.__bindEvents();\n      wrap = function (_this) {\n        return function (fn) {\n          return function () {\n            if (!_this.shouldEdit) {\n              return false;\n            }\n            return fn.apply(_this.refs.reactDataGrid, arguments);\n          };\n        };\n      }(this);\n      return (ref = this.refs.reactDataGrid) != null ? ref.canEdit = wrap((ref1 = this.refs.reactDataGrid) != null ? ref1.canEdit : void 0) : void 0;\n    };\n\n    GridSelect.prototype.componentWillUnmount = function () {\n      if (typeof this.originalMethod === \"function\") {\n        this.originalMethod();\n      }\n      return this.__unbindEvents();\n    };\n\n    GridSelect.prototype.onCollectionReset = function () {\n      this.resetSelectedCells();\n      return typeof this.originalMethod === \"function\" ? this.originalMethod() : void 0;\n    };\n\n    GridSelect.prototype.getContainerStyle = function () {\n      var ref, style;\n      style = (ref = typeof this.originalMethod === \"function\" ? this.originalMethod() : void 0) != null ? ref : this.props.style;\n      style.userSelect = 'none';\n      return style;\n    };\n\n    GridSelect.prototype._getCellsBetween = function (startRow, startCol, endRow, endCol) {\n      var cols, deltaX, deltaY, i, j, modifierX, modifierY, ref, ref1, result, rows;\n      result = [];\n      deltaX = endRow - startRow;\n      deltaY = endCol - startCol;\n      modifierX = deltaX < 0 ? -1 : 1;\n      modifierY = deltaY < 0 ? -1 : 1;\n      for (rows = i = 0, ref = Math.abs(deltaX); 0 <= ref ? i <= ref : i >= ref; rows = 0 <= ref ? ++i : --i) {\n        for (cols = j = 0, ref1 = Math.abs(deltaY); 0 <= ref1 ? j <= ref1 : j >= ref1; cols = 0 <= ref1 ? ++j : --j) {\n          result.push({\n            rowIdx: startRow + rows * modifierX,\n            col: this.modelKeyIndex[startCol + cols * modifierY],\n            idx: startCol + cols * modifierY\n          });\n        }\n      }\n      return result;\n    };\n\n    GridSelect.prototype.getSelectedCell = function () {\n      if (this.originalMethod == null) {\n        throw \"The grid component that has GridSelect mixin must implement getSelectedCell()\";\n      }\n      return this.originalMethod.apply(this, arguments);\n    };\n\n    GridSelect.prototype.setSelectedCell = function (rowIndex, colIndex) {\n      if (this.originalMethod == null) {\n        throw \"The grid component that has GridSelect mixin must implement setSelectedCell()\";\n      }\n      return this.originalMethod.apply(this, arguments);\n    };\n\n    GridSelect.prototype.unsetSelectedCell = function () {\n      if (this.originalMethod == null) {\n        throw \"The grid component that has GridSelect mixin must implement unsetSelectedCell()\";\n      }\n      return this.originalMethod.apply(this, arguments);\n    };\n\n    GridSelect.prototype.getSelectedColumn = function () {\n      var colIndex, ref;\n      colIndex = (ref = this.getSelectedCell()) != null ? ref.idx : void 0;\n      if (colIndex == null) {\n        return null;\n      }\n      return this.getColumn(colIndex);\n    };\n\n    GridSelect.prototype.resetSelectedCells = function () {\n      var cell, collection, i, len, ref, selectedCells;\n      collection = this.getCollection();\n      if (collection != null) {\n        if (typeof collection.selectNone === \"function\") {\n          collection.selectNone();\n        }\n      }\n      selectedCells = this.selectedCells;\n      this.selectedCells = [];\n      for (i = 0, len = selectedCells.length; i < len; i++) {\n        cell = selectedCells[i];\n        if ((ref = this.getModelAt(cell.rowIdx)) != null) {\n          if (typeof ref.trigger === \"function\") {\n            ref.trigger('invalidate');\n          }\n        }\n      }\n      return _.defer(function (_this) {\n        return function () {\n          var highlightedCell;\n          highlightedCell = _this.getSelectedCell();\n          if (highlightedCell != null) {\n            return collection != null ? typeof collection.selectModelByIndex === \"function\" ? collection.selectModelByIndex(highlightedCell.rowIdx) : void 0 : void 0;\n          }\n        };\n      }(this));\n    };\n\n    GridSelect.prototype.selectCells = function (cells, options) {\n      var base, cell, i, len;\n      if (options == null) {\n        options = {};\n      }\n      this.resetSelectedCells();\n      for (i = 0, len = cells.length; i < len; i++) {\n        cell = cells[i];\n        this.selectCell(cell.rowIdx, cell.col, options);\n      }\n      return typeof (base = this.props).onSelectedCellsChange === \"function\" ? base.onSelectedCellsChange(this.selectedCells) : void 0;\n    };\n\n    GridSelect.prototype.selectCell = function (rowIdx, colKey, options) {\n      var cell, ref, rowModel;\n      if (options == null) {\n        options = {};\n      }\n      if (rowIdx < 0 || this.modelKeyIndex.indexOf(colKey) < 0) {\n        return;\n      }\n      rowModel = this.getModelAt(rowIdx);\n      cell = {\n        rowIdx: rowIdx,\n        col: colKey,\n        idx: this.modelKeyIndex.indexOf(colKey)\n      };\n      if (!this.isCellSelected(rowIdx, colKey)) {\n        this.selectedCells.push(cell);\n      }\n      if (typeof this.getCollection === \"function\") {\n        if ((ref = this.getCollection()) != null) {\n          if (typeof ref.selectModel === \"function\") {\n            ref.selectModel(rowModel, true, options);\n          }\n        }\n      }\n      if (!options.silent) {\n        return _.defer(function (_this) {\n          return function () {\n            return rowModel.trigger('invalidate');\n          };\n        }(this));\n      }\n    };\n\n    GridSelect.prototype.selectCurrentCell = function () {\n      var col, highlightedCell, ref;\n      highlightedCell = this.getSelectedCell();\n      col = (ref = this.getSelectedColumn()) != null ? ref.key : void 0;\n      if (!(highlightedCell != null && col != null)) {\n        return;\n      }\n      return this.selectCell(highlightedCell.rowIdx, col);\n    };\n\n    GridSelect.prototype.isCellSelected = function (row, colKey) {\n      return _.any(this.selectedCells, function (cell) {\n        return cell.rowIdx === row && cell.col === colKey;\n      });\n    };\n\n    GridSelect.prototype.deselectCell = function (rowIdx, colKey) {\n      var ref, rowModel;\n      rowModel = this.getModelAt(rowIdx);\n      this.selectedCells = _.filter(this.selectedCells, function (cell) {\n        return !(cell.rowIdx === rowIdx && cell.col === colKey);\n      });\n      return typeof this.getCollection === \"function\" ? (ref = this.getCollection()) != null ? typeof ref.selectModel === \"function\" ? ref.selectModel(rowModel, false) : void 0 : void 0 : void 0;\n    };\n\n    /*\n      returns an array of selectedCells.  May be array of one - the highlighted cell\n     */\n\n    GridSelect.prototype.getSelectedCells = function () {\n      var highlightedCell, ref, ref1;\n      if (!(((ref = this.selectedCells) != null ? ref.length : void 0) > 0)) {\n        highlightedCell = this.getSelectedCell();\n        if (highlightedCell == null) {\n          return [];\n        }\n        highlightedCell.col = (ref1 = this.getSelectedColumn()) != null ? ref1.key : void 0;\n        return [highlightedCell];\n      }\n      return this.selectedCells;\n    };\n\n    GridSelect.prototype._updateModelKeyIndex = function () {\n      return this.modelKeyIndex = _.map(this.getColumns(), function (col) {\n        return col.key;\n      });\n    };\n\n    GridSelect.prototype._getPositionByElement = function (el) {\n      var $cell, columnKey, idx, rowIdx;\n      $cell = $(el).closest('.datagrid-cell');\n      if (!($cell.length > 0)) {\n        return null;\n      }\n      columnKey = $cell.attr(\"data-attr-col\");\n      rowIdx = parseInt($cell.attr(\"data-attr-row\"));\n      idx = this.modelKeyIndex.indexOf(columnKey);\n      return {\n        rowIdx: rowIdx,\n        col: columnKey,\n        idx: idx\n      };\n    };\n\n    GridSelect.prototype._getUpperLeftBound = function (cells) {\n      var left, top;\n      if (cells == null) {\n        cells = this.selectedCells;\n      }\n      if (this.selectedCells == null) {\n        return [];\n      }\n      top = _.min(cells, function (cell) {\n        return cell.rowIdx;\n      });\n      cells = _.filter(cells, function (cell) {\n        return cell.rowIdx === top.rowIdx;\n      });\n      left = _.min(cells, function (cell) {\n        return cell.idx;\n      });\n      return {\n        top: top.rowIdx,\n        left: left.idx\n      };\n    };\n\n    GridSelect.prototype._getLowerRightBound = function (cells) {\n      var bottom, right;\n      if (cells == null) {\n        cells = this.selectedCells;\n      }\n      if (this.selectedCells == null) {\n        return [];\n      }\n      bottom = _.max(cells, function (cell) {\n        return cell.rowIdx;\n      });\n      cells = _.filter(cells, function (cell) {\n        return cell.rowIdx === bottom.rowIdx;\n      });\n      right = _.max(cells, function (cell) {\n        return cell.idx;\n      });\n      return {\n        bottom: bottom.rowIdx,\n        right: right.idx\n      };\n    };\n\n    GridSelect.prototype.__bindEvents = function () {\n      $(document).on('copy.GridSelect', function (_this) {\n        return function (evt) {\n          return _this.__onDocumentCopy(evt);\n        };\n      }(this));\n      $(document).on('paste.GridSelect', function (_this) {\n        return function (evt) {\n          return _this.__onDocumentPaste(evt);\n        };\n      }(this));\n      $(document).on('keydown.GridSelect', function (_this) {\n        return function (evt) {\n          return _this.__onDocumentKeyDown(evt);\n        };\n      }(this));\n      $(document).on('mouseup.GridSelect', function (_this) {\n        return function (evt) {\n          return _this.__onDocumentMouseUp(evt);\n        };\n      }(this));\n      $(document).on('mousedown.GridSelect', '.datagrid-cell', function (_this) {\n        return function (evt) {\n          return _this.__onDocumentMouseDown(evt);\n        };\n      }(this));\n      return $(document).on('mousemove.GridSelect', '.datagrid-cell', function (_this) {\n        return function (evt) {\n          return _this.__onDocumentMouseMove(evt);\n        };\n      }(this));\n    };\n\n    GridSelect.prototype.__unbindEvents = function () {\n      $(document).off('copy.GridSelect');\n      $(document).off('paste.GridSelect');\n      $(document).off('keydown.GridSelect');\n      $(document).off('mouseup.GridSelect');\n      $(document).off('mousedown.GridSelect');\n      return $(document).off('mousemove.GridSelect');\n    };\n\n    GridSelect.prototype.__onDocumentCopy = function (e) {\n      var cell, cells, cellsInRow, i, j, len, len1, ref, result, row, rowModel, rows, vals;\n      if ($(e.target).closest('.datagrid-cell.editing').length > 0) {\n        return;\n      }\n      result = [];\n      cells = this.getSelectedCells();\n      rows = _.uniq(_.map(cells, function (cell) {\n        return cell.rowIdx;\n      }));\n      for (i = 0, len = rows.length; i < len; i++) {\n        row = rows[i];\n        rowModel = this.getModelAt(row);\n        if (rowModel == null) {\n          continue;\n        }\n        cellsInRow = _.filter(cells, function (cell) {\n          return cell.rowIdx === row;\n        });\n        cellsInRow = _.sortBy(cellsInRow, 'idx');\n        vals = [];\n        ref = _.filter(cellsInRow, function (cell) {\n          return cell != null;\n        });\n        for (j = 0, len1 = ref.length; j < len1; j++) {\n          cell = ref[j];\n          vals.push(this.getExportValue(rowModel, this.getColumn(cell.col)));\n        }\n        result.push(vals.join(\"\\t\"));\n      }\n      e.originalEvent.clipboardData.setData('text/plain', result.join(\"\\n\"));\n      e.stopPropagation();\n      return e.preventDefault();\n    };\n\n    GridSelect.prototype.__onDocumentPaste = function (e) {\n      var $activeEl, cell, cellIdx, cellsInRow, highlightedCell, i, j, k, l, len, m, paste, pasteRow, ref, ref1, ref2, ref3, ref4, ref5, ref6, rowIdx, rowModel, start;\n      paste = this.copyPasteHelper.processPaste(e);\n      $activeEl = $(document.activeElement);\n      if ($($activeEl).closest('.datagrid-cell.editing').length > 0 || $($activeEl).is('input,textarea')) {\n        return;\n      }\n      if (!Array.isArray(paste) && paste.indexOf('\\t') >= 0) {\n        paste = [paste.split('\\t')];\n      }\n      if (Array.isArray(paste)) {\n        if (this.selectedCells.length > 0) {\n          start = this._getUpperLeftBound();\n          for (rowIdx = i = ref = start.top, ref1 = start.top + paste.length - 1; ref <= ref1 ? i <= ref1 : i >= ref1; rowIdx = ref <= ref1 ? ++i : --i) {\n            cellsInRow = _.filter(this.selectedCells, function (cell) {\n              return cell != null && cell.rowIdx === rowIdx;\n            });\n            cellsInRow = _.sortBy(cellsInRow, 'idx');\n            if (cellsInRow.length === 0) {\n              continue;\n            }\n            pasteRow = paste[rowIdx - start.top];\n            if (!Array.isArray(pasteRow)) {\n              pasteRow = [pasteRow];\n            }\n            rowModel = this.getModelAt(rowIdx);\n            for (cellIdx = j = 0, ref2 = pasteRow.length - 1; 0 <= ref2 ? j <= ref2 : j >= ref2; cellIdx = 0 <= ref2 ? ++j : --j) {\n              if (cellIdx >= cellsInRow.length) {\n                continue;\n              }\n              this.__updateRowModelColumn(rowIdx, rowModel, cellsInRow[cellIdx].col, pasteRow[cellIdx]);\n            }\n          }\n        } else {\n          highlightedCell = this.getSelectedCell();\n          if (highlightedCell != null) {\n            start = {\n              top: highlightedCell.rowIdx,\n              left: highlightedCell.idx\n            };\n            for (rowIdx = k = ref3 = start.top, ref4 = start.top + paste.length - 1; ref3 <= ref4 ? k <= ref4 : k >= ref4; rowIdx = ref3 <= ref4 ? ++k : --k) {\n              pasteRow = paste[rowIdx - start.top];\n              if (!_.isArray(pasteRow)) {\n                pasteRow = [pasteRow];\n              }\n              rowModel = this.getModelAt(rowIdx);\n              for (cellIdx = l = 0, ref5 = pasteRow.length - 1; 0 <= ref5 ? l <= ref5 : l >= ref5; cellIdx = 0 <= ref5 ? ++l : --l) {\n                this.__updateRowModelColumn(rowIdx, rowModel, this.modelKeyIndex[start.left + cellIdx], pasteRow[cellIdx]);\n              }\n            }\n          }\n        }\n      } else {\n        ref6 = this.getSelectedCells();\n        for (m = 0, len = ref6.length; m < len; m++) {\n          cell = ref6[m];\n          rowModel = this.getModelAt(cell.rowIdx);\n          this.__updateRowModelColumn(cell.rowIdx, rowModel, cell.col, paste);\n        }\n      }\n      e.stopPropagation();\n      return e.preventDefault();\n    };\n\n    GridSelect.prototype.__onDocumentMouseDown = function (evt) {\n      var el, thisClickPosition, thisClickTick;\n      el = $(evt.target);\n      if (el.closest('.datagrid-cell.editing').length > 0 || !this.__isInOurDatagrid(el)) {\n        return;\n      }\n      if (el.hasClass(\"fa-pencil\")) {\n        this.__startEdit();\n        return;\n      }\n      this._updateModelKeyIndex();\n      thisClickPosition = this._getPositionByElement(el);\n      if (thisClickPosition == null) {\n        return;\n      }\n      thisClickTick = Date.now();\n      if (thisClickTick - this.lastClickTick < this.DOUBLE_CLICK_INTERVAL && CompareObjects(thisClickPosition, this.lastClickedPosition)) {\n        this.__startEdit();\n        return;\n      }\n      this.lastClickedPosition = thisClickPosition;\n      this.lastClickTick = thisClickTick;\n      if (thisClickPosition != null) {\n        this.setSelectedCell(thisClickPosition.rowIdx, thisClickPosition.idx);\n      }\n      this.shouldEdit = false;\n      this.startKeySelPosition = null;\n      if (evt.shiftKey) {\n        return _.defer(function (_this) {\n          return function () {\n            return _this.__shiftKeyClickSelect(thisClickPosition);\n          };\n        }(this));\n      } else {\n        return this.startSelPosition = thisClickPosition;\n      }\n    };\n\n    GridSelect.prototype.__onDocumentKeyDown = function (evt) {\n      var i, keyCode, results;\n      if (!this.__isInOurDatagrid(evt.target)) {\n        return;\n      }\n      keyCode = evt.keyCode;\n      switch (false) {\n        case !((keyCode === 13 || keyCode === 32 || keyCode === 110 || indexOf.call(function () {\n          results = [];\n          for (i = 48; i <= 90; i++) {\n            results.push(i);\n          }\n          return results;\n        }.apply(this), keyCode) >= 0) && !(evt.ctrlKey || evt.metaKey)):\n          return this.__startEdit();\n        case keyCode !== 27:\n          return this.resetSelectedCells();\n        case keyCode !== 37 && keyCode !== 38 && keyCode !== 39 && keyCode !== 40:\n          if (evt.shiftKey) {\n            this.selectCurrentCell();\n            if (this.startKeySelPosition == null) {\n              this.startKeySelPosition = this.getSelectedCell();\n            }\n            return _.defer(function (_this) {\n              return function () {\n                var cells, endCell;\n                if (_this.startKeySelPosition == null) {\n                  return;\n                }\n                endCell = _this.getSelectedCell();\n                cells = _this._getCellsBetween(_this.startKeySelPosition.rowIdx, _this.startKeySelPosition.idx, endCell.rowIdx, endCell.idx);\n                return _this.selectCells(cells);\n              };\n            }(this));\n          } else {\n            this.startKeySelPosition = null;\n            this.resetSelectedCells();\n            return _.defer(function (_this) {\n              return function () {\n                return _this.selectCurrentCell();\n              };\n            }(this));\n          }\n      }\n    };\n\n    GridSelect.prototype.__onDocumentMouseUp = function (evt) {\n      var el, isSelectColumn, rowModel, sameCellAsOrigin;\n      el = $(evt.target);\n      if (el.closest('.datagrid-cell.editing').length > 0) {\n        return;\n      }\n      if (el.closest('.widgets-react-datagrid').length > 0 && !evt.shiftKey) {\n        if (this.startSelPosition != null) {\n          this.endSelPosition = this._getPositionByElement(el);\n          if (this.endSelPosition == null) {\n            this.startSelPosition = null;\n            return;\n          }\n          sameCellAsOrigin = this.endSelPosition.rowIdx === this.startSelPosition.rowIdx && this.endSelPosition.col === this.startSelPosition.col;\n          isSelectColumn = el.closest('.datagrid-cell.selected-column').length > 0;\n          rowModel = this.getModelAt(this.endSelPosition.rowIdx);\n          if (evt.metaKey || evt.ctrKey || isSelectColumn) {\n            if (sameCellAsOrigin) {\n              if (this.isCellSelected(this.endSelPosition.rowIdx, this.endSelPosition.col) || isSelectColumn && rowModel.selected) {\n                this.deselectCell(this.endSelPosition.rowIdx, this.endSelPosition.col);\n              } else {\n                this.selectCell(this.endSelPosition.rowIdx, this.endSelPosition.col);\n              }\n            }\n          } else if (sameCellAsOrigin) {\n            this.resetSelectedCells();\n            _.defer(function (_this) {\n              return function () {\n                return _this.selectCurrentCell();\n              };\n            }(this));\n          }\n        } else {\n          this.resetSelectedCells();\n          _.defer(function (_this) {\n            return function () {\n              return _this.selectCurrentCell();\n            };\n          }(this));\n        }\n      }\n      return this.startSelPosition = null;\n    };\n\n    GridSelect.prototype.__onDocumentMouseMove = function (evt) {\n      var cells, el;\n      evt.preventDefault();\n      evt.stopPropagation();\n      if (evt.metaKey || evt.ctrKey || evt.shiftKey) {\n        return;\n      }\n      el = $(evt.target);\n      if (this.startSelPosition != null && el.hasClass(\"datagrid-cell\")) {\n        this.shouldEdit = false;\n        this.endSelPosition = this._getPositionByElement(el);\n        cells = this._getCellsBetween(this.startSelPosition.rowIdx, this.startSelPosition.idx, this.endSelPosition.rowIdx, this.endSelPosition.idx);\n        return this.selectCells(cells);\n      }\n    };\n\n    GridSelect.prototype.__startEdit = function () {\n      this.startSelPosition = null;\n      this.startKeySelPosition = null;\n      this.resetSelectedCells();\n      return this.shouldEdit = true;\n    };\n\n    GridSelect.prototype.__updateRowModelColumn = function (rowIndex, rowModel, columnKey, value) {\n      var attribute, column, error, parsedJsonObj;\n      if (rowModel == null) {\n        return;\n      }\n      try {\n        if (_.isString(value)) {\n          parsedJsonObj = JSON.parse(value);\n        }\n      } catch (error) {}\n      attribute = columnKey;\n      column = this.getColumn(columnKey);\n      if (this.canEditCell(column, rowModel)) {\n        this.saveModel(rowModel, {\n          cellKey: columnKey,\n          rowIdx: rowIndex,\n          updated: parsedJsonObj != null ? parsedJsonObj : value,\n          key: \"Paste\"\n        });\n        return rowModel.trigger('invalidate');\n      }\n    };\n\n    GridSelect.prototype.__isInOurDatagrid = function (element) {\n      return $.contains(ReactDOM.findDOMNode(this), $(element)[0]);\n    };\n\n    GridSelect.prototype.__shiftKeyClickSelect = function (endSelPosition) {\n      var cells, lowerRightSel, startingFrom, upperLeftSel;\n      upperLeftSel = this._getUpperLeftBound();\n      lowerRightSel = this._getLowerRightBound();\n      startingFrom = endSelPosition.rowIdx <= upperLeftSel.top && endSelPosition.idx <= upperLeftSel.left ? {\n        rowIdx: lowerRightSel.bottom,\n        idx: lowerRightSel.right\n      } : {\n        rowIdx: upperLeftSel.top,\n        idx: upperLeftSel.left\n      };\n      if (startingFrom.rowIdx != null && startingFrom.idx != null) {\n        cells = this._getCellsBetween(startingFrom.rowIdx, startingFrom.idx, endSelPosition.rowIdx, endSelPosition.idx);\n        return this.selectCells(cells);\n      } else {\n        return this.selectCurrentCell();\n      }\n    };\n\n    return GridSelect;\n  }();\n}).call(undefined);"
    },
    {
      "id": 25,
      "identifier": "/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/cache-loader/dist/cjs.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/babel-loader/lib/index.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/lib/helpers/copyPasteFromExcel.js",
      "name": "./lib/helpers/copyPasteFromExcel.js",
      "index": 25,
      "index2": 21,
      "size": 6355,
      "cacheable": true,
      "built": true,
      "optional": false,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/cache-loader/dist/cjs.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/babel-loader/lib/index.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/lib/gridSelect.js",
      "issuerId": 24,
      "issuerName": "./lib/gridSelect.js",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 24,
          "moduleIdentifier": "/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/cache-loader/dist/cjs.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/babel-loader/lib/index.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/lib/gridSelect.js",
          "module": "./lib/gridSelect.js",
          "moduleName": "./lib/gridSelect.js",
          "type": "cjs require",
          "userRequest": "./helpers/copyPasteFromExcel",
          "loc": "27:23-62"
        }
      ],
      "usedExports": true,
      "providedExports": null,
      "optimizationBailout": [],
      "depth": 4,
      "source": "'use strict';\n\n(function () {\n  var $,\n      CopyPasteFromExcel,\n      bind = function bind(fn, me) {\n    return function () {\n      return fn.apply(me, arguments);\n    };\n  };\n\n  $ = require('jquery');\n\n  /*\n   */\n\n  module.exports = CopyPasteFromExcel = function () {\n    function CopyPasteFromExcel() {\n      this.processPaste = bind(this.processPaste, this);\n    }\n\n    CopyPasteFromExcel.prototype.getClipboardData = function (e) {\n      var ref;\n      return e.clipboardData || ((ref = e.originalEvent) != null ? ref.clipboardData : void 0) || window.clipboardData;\n    };\n\n    CopyPasteFromExcel.prototype.getExpectedColumnLength = function (array2d) {\n      var i, len, max, row;\n      if (!Array.isArray(array2d)) {\n        return 0;\n      }\n      max = 1;\n      for (i = 0, len = array2d.length; i < len; i++) {\n        row = array2d[i];\n        if (Array.isArray(row) && row.length > max) {\n          max = row.length;\n        }\n      }\n      return max;\n    };\n\n    CopyPasteFromExcel.prototype.removeQuotes = function (str) {\n      var trimmed;\n      if (str == null) {\n        return str;\n      }\n      trimmed = $.trim(str);\n      if (trimmed[0] === '\\\"' && trimmed[trimmed.length - 1] === '\\\"') {\n        return trimmed.substr(trimmed.indexOf('\\\"') + 1, trimmed.lastIndexOf('\\\"') - 1);\n      } else {\n        return trimmed;\n      }\n    };\n\n    /*\n    This function will iterate over a 2d array and see if the first and last columns\n    anywhere in the array have newline returns. Indicating an edge case we probably\n    didn't reliably parse.\n     */\n\n    CopyPasteFromExcel.prototype.is2dArrayBroken = function (array2d) {\n      var i, leftIsTextarea, len, rightIsTextarea, row;\n      leftIsTextarea = false;\n      rightIsTextarea = false;\n      for (i = 0, len = array2d.length; i < len; i++) {\n        row = array2d[i];\n        if (row[0].indexOf('\\n') >= 0) {\n          leftIsTextarea = true;\n        }\n        if (row[row.length - 1].indexOf('\\n') >= 0) {\n          rightIsTextarea = true;\n        }\n      }\n      return rightIsTextarea && leftIsTextarea;\n    };\n\n    /*\n    This function will take a 2d array and uniform the columns for each row\n    by finding the row with the most columns, and assuming that as the 'standard'\n    column length. Then it iterates over each cell and creates new rows that have the\n    standardized column length.\n    \n    If it encouters a row with a single value, it will collect all single values from\n    that point on, until it finds a normal row, and then it will assum cell[0] in the normal\n    row is also part of the broken cells it has collected. It will smartly merge the broken values and the cell[0]\n    in the correct place.\n    \n    This fixes excel weirdness.\n     */\n\n    CopyPasteFromExcel.prototype.make2dArrayUniform = function (array2d) {\n      var brokenStr, cell, cells, i, j, lastCell, len, len1, length, result, row, tempRow;\n      length = this.getExpectedColumnLength(array2d);\n      result = [];\n      tempRow = [];\n      brokenStr = '';\n      if (length === 1) {\n        return array2d;\n      }\n      for (i = 0, len = array2d.length; i < len; i++) {\n        row = array2d[i];\n        if (!Array.isArray(row)) {\n          brokenStr += row + '\\n';\n        } else {\n          if (brokenStr.length > 0) {\n            if (tempRow.length > 0) {\n              tempRow[tempRow.length - 1] += '\\n' + brokenStr;\n            } else if (result.length > 0) {\n              cells = result[result.length - 1];\n              lastCell = cells[cells.length - 1];\n              if (lastCell.indexOf('\\n') >= 0 || lastCell.indexOf('\\\"') >= 0) {\n                cells[cells.length - 1] = this.removeQuotes(lastCell + '\\n' + brokenStr);\n              } else {\n                tempRow.push(this.removeQuotes(brokenStr));\n              }\n            }\n            brokenStr = '';\n          }\n          if (row.length + tempRow.length < length && tempRow.length > 0) {\n            tempRow[tempRow.length - 1] = this.removeQuotes(tempRow[tempRow.length - 1] + '\\n' + row.splice(0, 1));\n          }\n          if (tempRow.length > 0 && row.length + tempRow.length > length) {\n            while (row.length + tempRow.length > length) {\n              tempRow[tempRow.length - 1] = this.removeQuotes(tempRow[tempRow.length - 1] + '\\n' + row.splice(0, 1));\n            }\n          }\n          for (j = 0, len1 = row.length; j < len1; j++) {\n            cell = row[j];\n            tempRow.push(cell);\n            if (tempRow.length >= length) {\n              result.push(tempRow);\n              tempRow = [];\n            }\n          }\n        }\n      }\n      if (tempRow.length > 0) {\n        result.push(tempRow);\n      }\n      return result;\n    };\n\n    /*\n    If a single value is pasted, this will invoke @props.onPaste if available.\n    Otherwise, it will convert the value into a 2-dimensional array and pass it to\n    @props.onMultiPaste if available.\n    \n    It also passes the event along with, so you can e.stopPropagation() and e.preventDefault()\n    further upstream if you want.\n     */\n\n    CopyPasteFromExcel.prototype.processPaste = function (e) {\n      var arrText, clipboardData, i, len, rawText, ref, ref1, resultArray, row, splitChar;\n      clipboardData = this.getClipboardData(e);\n      rawText = clipboardData != null ? clipboardData.getData('text') : void 0;\n      if (rawText == null) {\n        return;\n      }\n      if (rawText.indexOf(String.fromCharCode(13)) >= 0) {\n        arrText = rawText.split(String.fromCharCode(13));\n      } else if (rawText.indexOf('\\n') >= 0) {\n        arrText = rawText.split('\\n');\n      } else {\n        arrText = [rawText];\n      }\n      if (arrText.length > 1) {\n        resultArray = [];\n        if (((ref = arrText[0]) != null ? ref.indexOf('\\t') : void 0) >= 0) {\n          splitChar = '\\t';\n        } else if (((ref1 = arrText[0]) != null ? ref1.indexOf(',') : void 0) >= 0) {\n          splitChar = ',';\n        }\n        for (i = 0, len = arrText.length; i < len; i++) {\n          row = arrText[i];\n          if (row.indexOf(splitChar) >= 0) {\n            resultArray.push(row.split(splitChar));\n          } else {\n            resultArray.push(row);\n          }\n        }\n        return this.make2dArrayUniform(resultArray);\n      } else {\n        return rawText;\n      }\n    };\n\n    return CopyPasteFromExcel;\n  }();\n}).call(undefined);"
    },
    {
      "id": 26,
      "identifier": "/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/cache-loader/dist/cjs.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/babel-loader/lib/index.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/lib/helpers/compareObjects.js",
      "name": "./lib/helpers/compareObjects.js",
      "index": 26,
      "index2": 22,
      "size": 1411,
      "cacheable": true,
      "built": true,
      "optional": false,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/cache-loader/dist/cjs.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/babel-loader/lib/index.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/lib/gridSelect.js",
      "issuerId": 24,
      "issuerName": "./lib/gridSelect.js",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 24,
          "moduleIdentifier": "/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/cache-loader/dist/cjs.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/node_modules/babel-loader/lib/index.js!/Users/bwilkerson/projects/zulily/react-datum-datagrid/lib/gridSelect.js",
          "module": "./lib/gridSelect.js",
          "moduleName": "./lib/gridSelect.js",
          "type": "cjs require",
          "userRequest": "./helpers/compareObjects",
          "loc": "29:19-54"
        }
      ],
      "usedExports": true,
      "providedExports": null,
      "optimizationBailout": [],
      "depth": 4,
      "source": "\"use strict\";\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\n(function () {\n  var _compareObjects;\n\n  module.exports = _compareObjects = function compareObjects(a, b) {\n    var attr;\n    if (a == null && b == null) {\n      return true;\n    }\n    if (!(a != null && b != null)) {\n      return false;\n    }\n    attr = null;\n    for (attr in a) {\n      if (typeof b[attr] === \"undefined\") {\n        return false;\n      }\n    }\n    for (attr in a) {\n      if (a[attr]) {\n        switch (_typeof(a[attr])) {\n          case \"object\":\n            if (!_compareObjects(a[attr], b[attr])) {\n              return false;\n            }\n            break;\n          case \"function\":\n            if (typeof b[attr] === \"undefined\" || attr !== \"equals\" && a[attr].toString() !== b[attr].toString()) {\n              return false;\n            }\n            break;\n          default:\n            if (a[attr] !== b[attr]) {\n              return false;\n            }\n        }\n      } else {\n        if (b[attr]) {\n          return false;\n        }\n      }\n    }\n    for (attr in b) {\n      if (typeof a[attr] === \"undefined\") {\n        return false;\n      }\n    }\n    return true;\n  };\n}).call(undefined);"
    }
  ],
  "filteredModules": 0,
  "children": []
}